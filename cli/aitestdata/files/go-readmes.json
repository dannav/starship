[
  {
    "repo": "moby/moby",
    "content": "The Moby Project\n================\n\n![Moby Project logo](docs/static_files/moby-project-logo.png \"The Moby Project\")\n\nMoby is an open-source project created by Docker to enable and accelerate software containerization.\n\nIt provides a \"Lego set\" of toolkit components, the framework for assembling them into custom container-based systems, and a place for all container enthusiasts and professionals to experiment and exchange ideas.\nComponents include container build tools, a container registry, orchestration tools, a runtime and more, and these can be used as building blocks in conjunction with other tools and projects.\n\n## Principles\n\nMoby is an open project guided by strong principles, aiming to be modular, flexible and without too strong an opinion on user experience.\nIt is open to the community to help set its direction.\n\n- Modular: the project includes lots of components that have well-defined functions and APIs that work together.\n- Batteries included but swappable: Moby includes enough components to build fully featured container system, but its modular architecture ensures that most of the components can be swapped by different implementations.\n- Usable security: Moby provides secure defaults without compromising usability.\n- Developer focused: The APIs are intended to be functional and useful to build powerful tools.\nThey are not necessarily intended as end user tools but as components aimed at developers.\nDocumentation and UX is aimed at developers not end users.\n\n## Audience\n\nThe Moby Project is intended for engineers, integrators and enthusiasts looking to modify, hack, fix, experiment, invent and build systems based on containers.\nIt is not for people looking for a commercially supported system, but for people who want to work and learn with open source code.\n\n## Relationship with Docker\n\nThe components and tools in the Moby Project are initially the open source components that Docker and the community have built for the Docker Project.\nNew projects can be added if they fit with the community goals. Docker is committed to using Moby as the upstream for the Docker Product.\nHowever, other projects are also encouraged to use Moby as an upstream, and to reuse the components in diverse ways, and all these uses will be treated in the same way. External maintainers and contributors are welcomed.\n\nThe Moby project is not intended as a location for support or feature requests for Docker products, but as a place for contributors to work on open source code, fix bugs, and make the code more useful.\nThe releases are supported by the maintainers, community and users, on a best efforts basis only, and are not intended for customers who want enterprise or commercial support; Docker EE is the appropriate product for these use cases.\n\n-----\n\nLegal\n=====\n\n*Brought to you courtesy of our legal counsel. For more context,\nplease see the [NOTICE](https://github.com/moby/moby/blob/master/NOTICE) document in this repo.*\n\nUse and transfer of Moby may be subject to certain restrictions by the\nUnited States and other governments.\n\nIt is your responsibility to ensure that your use and/or transfer does not\nviolate applicable laws.\n\nFor more information, please see https://www.bis.doc.gov\n\nLicensing\n=========\nMoby is licensed under the Apache License, Version 2.0. See\n[LICENSE](https://github.com/moby/moby/blob/master/LICENSE) for the full\nlicense text.\n"
  },
  {
    "repo": "golang/go",
    "content": "# The Go Programming Language\n\nGo is an open source programming language that makes it easy to build simple,\nreliable, and efficient software.\n\n![Gopher image](doc/gopher/fiveyears.jpg)\n*Gopher image by [Renee French][rf], licensed under [Creative Commons 3.0 Attributions license][cc3-by].*\n\nOur canonical Git repository is located at https://go.googlesource.com/go.\nThere is a mirror of the repository at https://github.com/golang/go.\n\nUnless otherwise noted, the Go source files are distributed under the\nBSD-style license found in the LICENSE file.\n\n### Download and Install\n\n#### Binary Distributions\n\nOfficial binary distributions are available at https://golang.org/dl/.\n\nAfter downloading a binary release, visit https://golang.org/doc/install\nor load [doc/install.html](./doc/install.html) in your web browser for installation\ninstructions.\n\n#### Install From Source\n\nIf a binary distribution is not available for your combination of\noperating system and architecture, visit\nhttps://golang.org/doc/install/source or load [doc/install-source.html](./doc/install-source.html)\nin your web browser for source installation instructions.\n\n### Contributing\n\nGo is the work of thousands of contributors. We appreciate your help!\n\nTo contribute, please read the contribution guidelines:\n\thttps://golang.org/doc/contribute.html\n\nNote that the Go project uses the issue tracker for bug reports and\nproposals only. See https://golang.org/wiki/Questions for a list of\nplaces to ask questions about the Go language.\n\n[rf]: https://reneefrench.blogspot.com/\n[cc3-by]: https://creativecommons.org/licenses/by/3.0/\n"
  },
  {
    "repo": "kubernetes/kubernetes",
    "content": "# Kubernetes\n\n[![GoDoc Widget]][GoDoc] [![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/569/badge)](https://bestpractices.coreinfrastructure.org/projects/569)\n\n\u003cimg src=\"https://github.com/kubernetes/kubernetes/raw/master/logo/logo.png\" width=\"100\"\u003e\n\n----\n\nKubernetes is an open source system for managing [containerized applications]\nacross multiple hosts; providing basic mechanisms for deployment, maintenance,\nand scaling of applications.\n\nKubernetes builds upon a decade and a half of experience at Google running\nproduction workloads at scale using a system called [Borg],\ncombined with best-of-breed ideas and practices from the community.\n\nKubernetes is hosted by the Cloud Native Computing Foundation ([CNCF]).\nIf you are a company that wants to help shape the evolution of\ntechnologies that are container-packaged, dynamically-scheduled\nand microservices-oriented, consider joining the CNCF.\nFor details about who's involved and how Kubernetes plays a role,\nread the CNCF [announcement].\n\n----\n\n## To start using Kubernetes\n\nSee our documentation on [kubernetes.io].\n\nTry our [interactive tutorial].\n\nTake a free course on [Scalable Microservices with Kubernetes].\n\n## To start developing Kubernetes\n\nThe [community repository] hosts all information about\nbuilding Kubernetes from source, how to contribute code\nand documentation, who to contact about what, etc.\n\nIf you want to build Kubernetes right away there are two options:\n\n##### You have a working [Go environment].\n\n```\n$ go get -d k8s.io/kubernetes\n$ cd $GOPATH/src/k8s.io/kubernetes\n$ make\n```\n\n##### You have a working [Docker environment].\n\n```\n$ git clone https://github.com/kubernetes/kubernetes\n$ cd kubernetes\n$ make quick-release\n```\n\nFor the full story, head over to the [developer's documentation].\n\n## Support\n\nIf you need support, start with the [troubleshooting guide],\nand work your way through the process that we've outlined.\n\nThat said, if you have questions, reach out to us\n[one way or another][communication].\n\n[announcement]: https://cncf.io/news/announcement/2015/07/new-cloud-native-computing-foundation-drive-alignment-among-container\n[Borg]: https://research.google.com/pubs/pub43438.html\n[CNCF]: https://www.cncf.io/about\n[communication]: https://git.k8s.io/community/communication\n[community repository]: https://git.k8s.io/community\n[containerized applications]: https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/\n[developer's documentation]: https://git.k8s.io/community/contributors/devel#readme\n[Docker environment]: https://docs.docker.com/engine\n[Go environment]: https://golang.org/doc/install\n[GoDoc]: https://godoc.org/k8s.io/kubernetes\n[GoDoc Widget]: https://godoc.org/k8s.io/kubernetes?status.svg\n[interactive tutorial]: https://kubernetes.io/docs/tutorials/kubernetes-basics\n[kubernetes.io]: https://kubernetes.io\n[Scalable Microservices with Kubernetes]: https://www.udacity.com/course/scalable-microservices-with-kubernetes--ud615\n[troubleshooting guide]: https://kubernetes.io/docs/tasks/debug-application-cluster/troubleshooting/\n\n[![Analytics](https://kubernetes-site.appspot.com/UA-36037335-10/GitHub/README.md?pixel)]()\n"
  },
  {
    "repo": "getlantern/lantern",
    "content": "# lantern [![Travis CI Status](https://travis-ci.org/getlantern/lantern.svg?branch=devel)](https://travis-ci.org/getlantern/lantern)\u0026nbsp;[![Coverage Status](https://coveralls.io/repos/getlantern/lantern/badge.png?branch=devel)](https://coveralls.io/r/getlantern/lantern)\u0026nbsp;[![Sourcegraph](https://sourcegraph.com/github.com/getlantern/lantern/-/badge.svg)](https://sourcegraph.com/github.com/getlantern/lantern?badge)\n\n## [üî¥ËìùÁÅØ(Lantern)ÊúÄÊñ∞Áâà‰∏ãËΩΩÁÇπËøôÈáåüî¥](https://github.com/getlantern/download)\n\n**If you're looking for Lantern installers, you can find all of them at the following links:**\n- [Android](https://raw.githubusercontent.com/getlantern/lantern-binaries/master/lantern-installer.apk)\n- [Windows XP SP 3 and above](https://raw.githubusercontent.com/getlantern/lantern-binaries/master/lantern-installer.exe)\n- [OSX 10.8 and above](https://raw.githubusercontent.com/getlantern/lantern-binaries/master/lantern-installer.dmg)\n- [Ubuntu 14.04 32 bit](https://raw.githubusercontent.com/getlantern/lantern-binaries/master/lantern-installer-32-bit.deb)\n- [Ubuntu 14.04 64 bit](https://raw.githubusercontent.com/getlantern/lantern-binaries/master/lantern-installer-64-bit.deb)\n\n**If you would like to give the latest but more UNSTABLE BETA versions a try, you can find all of them at the following links:**\n- [Android](https://raw.githubusercontent.com/getlantern/lantern-binaries/master/lantern-installer-preview.apk)\n- [Windows XP SP 3 and above](https://raw.githubusercontent.com/getlantern/lantern-binaries/master/lantern-installer-preview.exe)\n- [OSX 10.8 and above](https://raw.githubusercontent.com/getlantern/lantern-binaries/master/lantern-installer-preview.dmg)\n- [Ubuntu 14.04 32 bit](https://raw.githubusercontent.com/getlantern/lantern-binaries/master/lantern-installer-preview-32-bit.deb)\n- [Ubuntu 14.04 64 bit](https://raw.githubusercontent.com/getlantern/lantern-binaries/master/lantern-installer-preview-64-bit.deb)\n\n**If you're looking for help, please visit below user forums:**\n\n| [English](https://groups.google.com/forum/#!forum/lantern-users-en) | [‰∏≠Êñá](https://github.com/getlantern/forum) | [ŸÅÿßÿ±ÿ≥€å](https://groups.google.com/forum/#!forum/lantern-users-fa) | [fran√ßais](https://groups.google.com/forum/#!forum/lantern-users-fr)\n\n## Building Lantern\n\n### Prerequisites\n\n* [Custom fork of Go](https://github.com/getlantern/go/tree/lantern) is\n  currently required. We'll eventually switch to Go 1.7 which supports what we\n  need due to [this](https://github.com/golang/go/issues/13998).\n* An OSX or Linux host. Building on Windows is only partially supported with\n  the help of [Cygwin](https://www.cygwin.com/).\n* [Git](https://git-scm.com/downloads) - `brew install git`, `apt-get install git`, etc\n* [GNU Make](https://www.gnu.org/software/make/)\n* [Nodejs \u0026 NPM](https://nodejs.org/en/download/package-manager/)\n* GNU C Library (linux only) - `apt-get install libc6-dev-i386`, etc\n* [Gulp](http://gulpjs.com/) - `npm i gulp-cli -g`\n\nTo build and run Lantern desktop, just do:\n\n```sh\ngit clone https://github.com/getlantern/lantern.git\ncd lantern\nmake lantern\n./lantern\n```\n\nDuring development, you'll likely want to do a clean build like this:\n\n```sh\nmake clean-desktop lantern \u0026\u0026 ./lantern\n```\n\n## Building Mobile\n\n### Mobile Prerequisites\n\nBuilding the mobile library and app requires the following:\n\n1. Install Java JDK 7 or 8\n2. Install Go 1.6 or higher\n3. Install [Android SDK Tools](http://developer.android.com/sdk/index.html#Other)\n4. Install [NDK](http://developer.android.com/ndk/downloads/index.html)\n5. Install [Gradle](http://gradle.org/)\n\nMake sure to set these environment variables before trying to build any Android\ncomponents (replace the paths based on wherever you've installed the Android\nSDK and NDK).\n\n```bash\nexport ANDROID_HOME=/opt/adt-bundle-mac-x86_64-20130917/sdk\nexport PATH=$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools:$ANDROID_HOME/build-tools:$PATH\nexport NDK_HOME=/opt/android-ndk-r10e\nexport PATH=$NDK_HOME:$PATH\n```\n\n### Go Android Library\n\nThe core Lantern functionality can be packaged into a native Android library\nwith:\n\n```\nmake android-lib\n```\n\n### Java Android SDK\n\nThe Java-based Android SDK allows easy embedding of Lantern functionality in 3rd\nparty Android apps such as Manoto TV. The SDK can be built with:\n\n```\nmake android-sdk\n```\n\n### Lantern Mobile Testbed\n\nThis simple Android application provides a way to test the Android SDK. It can\nbe built with:\n\n```\nmake android-testbed\n```\n\n### Lantern Mobile App\n\n\n## Debug\n\nTo create a debug build of the full lantern mobile app:\n\n```\nmake android-debug\n```\n\nTo install on the default device:\n\n```\nmake android-install\n```\n\n## Release\n\nTo create a release build, add the following to your\n``~/.gradle/gradle.properties`` file:\n\n```\nKEYSTORE_PWD=$KEYSTORE_PASSWORD\nKEYSTORE_FILE=keystore.release.jks\nKEY_PWD=$KEY_PASSWORD\n```\n\nYou can find the exact values to add to your gradle.properties\n[here](https://github.com/getlantern/too-many-secrets/blob/master/android/keystore).\n\nThen it can be built with:\n\n```sh\nSECRETS_DIR=$PATH_TO_TOO_MANY_SECRETS \\\nVERSION=2.0.0-beta1 make android-release\n```\n\n### Android Tips\n#### Android Studio\nTo get the build working for Android Studio, you'll want to add the following\ndummy values to your ``~/.gradle/gradle.properties`` file:\n\n```\nlanternRevisionDate=\"April 26, 2016\"\nlanternVersion=2.2.1\n```\n\n#### Uninstall for All Users\nIf you use `adb` to install and debug an app to your Android device during\ndevelopment and then subsequently build a signed APK and try to install it on\nthat same device, you may receive an unhelpful error saying \"App Not Installed\".\nThis typically means that you tried to install the same app but signed with a\ndifferent key.  The solution is to uninstall the app first, but **you have to\nuninstall it for all users**. You can do this by selecting \"Uninstall for all\nusers\" from:\n\n```\nSettings -\u003e Apps -\u003e [Pick the App] -\u003e Hamburger Menu (...) -\u003e Uninstall for all users.\n```\n\nIf you forget to do this and just uninstall normally, you'll still encounter the\nerror. To fix this, you'll have to run the app with `adb` again and then\nuninstall for all users.\n\n#### Getting HTTP Connections to Use Proxy\n\nIn android, programmatic access to HTTP resources typically uses the\n`HttpURLConnection` class.  You can tell it to use a proxy by setting some\nsystem properties:\n\n```java\nSystem.setProperty(\"http.proxyHost\", host);\nSystem.setProperty(\"http.proxyPort\", port);\nSystem.setProperty(\"https.proxyHost\", host);\nSystem.setProperty(\"https.proxyPort\", port);\n```\n\nYou can disable proxying by clearing those properties:\n\n```java\nSystem.clearProperty(\"http.proxyHost\");\nSystem.clearProperty(\"http.proxyPort\");\nSystem.clearProperty(\"https.proxyHost\");\nSystem.clearProperty(\"https.proxyPort\");\n```\n\nHowever, there is one big caveat - **`HttpURLConnection` uses keep-alives to\nreuse existing TCP connections**. These TCP connections will still be using the\nold proxy settings. This has several implications:\n\n**Set the proxy settings as early in the application's lifecycle as possible**,\nideally before any `HttpURLConnection`s have been opened.\n\n**Don't expect the settings to take effect immediately** if some\n`HttpURLConnection`s have already been opened.\n\n**Disable keep-alives if you need to**, which you can do like this:\n\n```java\nHttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n// Need to force closing so that old connections (with old proxy settings) don't get reused.\nurlConnection.setRequestProperty(\"Connection\", \"close\");\n```\n\n## Building Lantern for running on a server\nTo run Lantern on a server, you simply need to set a flag to build it in headless mode and then tell it to run on any local address as opposed to binding to localhost (so that it's accessible from other machines). You can do this as follows:\n\n1. ```HEADLESS=true make docker-linux``` or, if you're already running on Linux just ```HEADLESS=true make linux```\n1. ```./lantern_linux_amd64 --addr 0.0.0.0:8787``` or ```./lantern_linux_386 --addr 0.0.0.0:8787```\n\n## Other\n### Generating assets\n\n```sh\nmake genassets\n```\n\nIf the environment variable `UPDATE_DIST=true` is set, `make genassets` also\nupdates the resources in the dist folder.\n\nAn annotated tag can be added like this:\n\n```sh\ngit tag -a v1.0.0 -m\"Tagged 1.0.0\"\ngit push --tags\n```\n\nUse `make create-tag` as a shortcut for creating and uploading tags:\n\n```\nVERSION='2.0.0-beta5' make create-tag\n```\n\nIf you want to both create a package and upload a tag, run the `create-tag` task\nright after the `packages` task:\n\n```\n[...env variables...] make packages create-tag\n```\n\n### Updating Icons\n\nThe icons used for the system tray are stored in\n`src/github/getlantern/lantern/icons`. To apply changes to the icons, make\nyour updates in the icons folder and then run `make update-icons`.\n\n### Continuous Integration with Travis CI\n\nContinuous builds are run on Travis CI. These builds use the `.travis.yml`\nconfiguration.  The github.com/getlantern/cf unit tests require an envvars.bash\nto be populated with credentials for cloudflare. The original `envvars.bash` is\navailable\n[here](https://github.com/getlantern/too-many-secrets/blob/master/envvars.bash).\nAn encrypted version is checked in as `envvars.bash.enc`, which was encrypted\nper the instructions [here](https://docs.travis-ci.com/user/encrypting-files/).\n\n\n## Documentation for developers\n\n### Dev README\n\nPlease, go to [README-dev](README-dev.md) for an in-depth explanation of the Lantern internals and cloud services.\n\n### Release README\n\nPlease visit [README-release](README-release.md) for details on building release versions of Lantern.\n\n### Translations README\n\nMore info for dealing with translations is available in [README-translations](README-translations.md).\n\n### Contributing changes\nLantern is a [gost](https://github.com/getlantern/gost) project that\nprovides repeatable builds and consolidated pull requests for lantern.\n\nGo code in Lantern must pass several tests:\n\n* [errcheck](https://github.com/kisielk/errcheck)\n* [golint](https://github.com/golang/lint)\n* Go vet\n* Go test -race\n\nYou can find a generic [git-hook](https://github.com/getlantern/lantern/blob/devel/pre-push)\nfile, which can be used as a pre-push (or pre-commit) hook to automatically\nensure these tests are passed before committing any code. Only Go packages in\n`src/github.com/getlantern` will be tested, and only those that have changes in\nthem.\n\nInstall by copying it into the local `.git/hooks/` directory, with the `pre-push`\nfile name if you want to run it before pushing. Alternatively, you can copy\n[pre-commit.hook](https://github.com/getlantern/lantern/blob/devel/pre-commit)\nto `pre-commit` to run it before each commit.\n\n```bash\nln -s \"$(pwd)/prehook.sh\" .git/hooks/prehook.sh\nln -s \"$(pwd)/pre-push\" .git/hooks/pre-push\n```\n\n**Important notice**\n\nIf you *must* commit without running the hooks, you can run git with the\n`--no-verify` flag.\n\n\n\n[1]: https://help.github.com/articles/creating-an-access-token-for-command-line-use/\n"
  },
  {
    "repo": "avelino/awesome-go",
    "content": "# Awesome Go\n\n[![Build Status](https://travis-ci.org/avelino/awesome-go.svg?branch=master)](https://travis-ci.org/avelino/awesome-go) [![Awesome](https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg)](https://github.com/sindresorhus/awesome) [![Slack Widget](https://img.shields.io/badge/join-us%20on%20slack-gray.svg?longCache=true\u0026logo=slack\u0026colorB=red)](http://gophers.slack.com/messages/awesome)\n\nA curated list of awesome Go frameworks, libraries and software. Inspired by [awesome-python](https://github.com/vinta/awesome-python).\n\n### Contributing\n\nPlease take a quick gander at the [contribution guidelines](https://github.com/avelino/awesome-go/blob/master/CONTRIBUTING.md) first. Thanks to all [contributors](https://github.com/avelino/awesome-go/graphs/contributors); you rock!\n\n#### *If you see a package or project here that is no longer maintained or is not a good fit, please submit a pull request to improve this file. Thank you!*\n\n### Contents\n\n- [Awesome Go](#awesome-go)\n    - [Audio and Music](#audio-and-music)\n    - [Authentication and OAuth](#authentication-and-oauth)\n    - [Command Line](#command-line)\n    - [Configuration](#configuration)\n    - [Continuous Integration](#continuous-integration)\n    - [CSS Preprocessors](#css-preprocessors)\n    - [Data Structures](#data-structures)\n    - [Database](#database)\n    - [Database Drivers](#database-drivers)\n    - [Date and Time](#date-and-time)\n    - [Distributed Systems](#distributed-systems)\n    - [Email](#email)\n    - [Embeddable Scripting Languages](#embeddable-scripting-languages)\n    - [Files](#files)\n    - [Financial](#financial)\n    - [Forms](#forms)\n    - [Functional](#functional)\n    - [Game Development](#game-development)\n    - [Generation and Generics](#generation-and-generics)\n    - [Geographic](#geographic)\n    - [Go Compilers](#go-compilers)\n    - [Goroutines](#goroutines)\n    - [GUI](#gui)\n    - [Hardware](#hardware)\n    - [Images](#images)\n    - [IoT](#iot-internet-of-things)\n    - [Logging](#logging)\n    - [Machine Learning](#machine-learning)\n    - [Messaging](#messaging)\n    - [Miscellaneous](#miscellaneous)\n    - [Natural Language Processing](#natural-language-processing)\n    - [Networking](#networking)\n        - [HTTP Clients](#http-clients)\n    - [OpenGL](#opengl)\n    - [ORM](#orm)\n    - [Package Management](#package-management)\n    - [Query Language](#query-language)\n    - [Resource Embedding](#resource-embedding)\n    - [Science and Data Analysis](#science-and-data-analysis)\n    - [Security](#security)\n    - [Serialization](#serialization)\n    - [Template Engines](#template-engines)\n    - [Testing](#testing)\n    - [Text Processing](#text-processing)\n    - [Third-party APIs](#third-party-apis)\n    - [Utilities](#utilities)\n    - [Validation](#validation)\n    - [Version Control](#version-control)\n    - [Video](#video)\n    - [Web Frameworks](#web-frameworks)\n        - [Middlewares](#middlewares)\n            - [Actual middlewares](#actual-middlewares)\n            - [Libraries for creating HTTP middlewares](#libraries-for-creating-http-middlewares)\n        - [Routers](#routers)\n    - [Windows](#windows)\n    - [XML](#xml)\n\n- [Tools](#tools)\n    - [Code Analysis](#code-analysis)\n    - [Editor Plugins](#editor-plugins)\n    - [Go Generate Tools](#go-generate-tools)\n    - [Go Tools](#go-tools)\n    - [Software Packages](#software-packages)\n        - [DevOps Tools](#devops-tools)\n        - [Other Software](#other-software)\n\n- [Server Applications](#server-applications)\n\n- [Resources](#resources)\n    - [Benchmarks](#benchmarks)\n    - [Conferences](#conferences)\n    - [E-Books](#e-books)\n    - [Gophers](#gophers)\n    - [Meetups](#meetups)\n    - [Twitter](#twitter)\n    - [Websites](#websites)\n        - [Tutorials](#tutorials)\n\n## Audio and Music\n\n*Libraries for manipulating audio.*\n\n* [EasyMIDI](https://github.com/algoGuy/EasyMIDI) - EasyMidi is a simple and reliable library for working with standard midi file (SMF).\n* [flac](https://github.com/eaburns/flac) - Native Go FLAC decoder.\n* [flac](https://github.com/mewkiz/flac) - Native Go FLAC decoder.\n* [gaad](https://github.com/Comcast/gaad) - Native Go AAC bitstream parser.\n* [go-sox](https://github.com/krig/go-sox) - libsox bindings for go.\n* [go_mediainfo](https://github.com/zhulik/go_mediainfo) - libmediainfo bindings for go.\n* [gosamplerate](https://github.com/dh1tw/gosamplerate) - libsamplerate bindings for go.\n* [id3v2](https://github.com/bogem/id3v2) - Fast and stable ID3 parsing and writing library for Go.\n* [malgo](https://github.com/gen2brain/malgo) - Mini audio library.\n* [minimp3](https://github.com/tosone/minimp3) - Lightweight MP3 decoder library.\n* [mix](https://github.com/go-mix/mix) - Sequence-based Go-native audio mixer for music apps.\n* [mp3](https://github.com/tcolgate/mp3) - Native Go MP3 decoder.\n* [music-theory](https://github.com/go-music-theory/music-theory) - Music theory models in Go.\n* [PortAudio](https://github.com/gordonklaus/portaudio) - Go bindings for the PortAudio audio I/O library.\n* [portmidi](https://github.com/rakyll/portmidi) - Go bindings for PortMidi.\n* [taglib](https://github.com/wtolson/go-taglib) - Go bindings for taglib.\n* [vorbis](https://github.com/mccoyst/vorbis) - \"Native\" Go Vorbis decoder (uses CGO, but has no dependencies).\n* [waveform](https://github.com/mdlayher/waveform) - Go package capable of generating waveform images from audio streams.\n\n## Authentication and OAuth\n\n*Libraries for implementing authentications schemes.*\n\n* [authboss](https://github.com/volatiletech/authboss) - Modular authentication system for the web. It tries to remove as much boilerplate and \"hard things\" as possible so that each time you start a new web project in Go, you can plug it in, configure, and start building your app without having to build an authentication system each time.\n* [branca](https://github.com/hako/branca) - Golang implementation of Branca Tokens.\n* [casbin](https://github.com/hsluoyz/casbin) - Authorization library that supports access control models like ACL, RBAC, ABAC.\n* [cookiestxt](https://github.com/mengzhuo/cookiestxt) - provides parser of cookies.txt file format.\n* [go-jose](https://github.com/square/go-jose) - Fairly complete implementation of the JOSE working group's JSON Web Token, JSON Web Signatures, and JSON Web Encryption specs.\n* [go-oauth2-server](https://github.com/RichardKnop/go-oauth2-server) - Standalone, specification-compliant,  OAuth2 server written in Golang.\n* [gologin](https://github.com/dghubble/gologin) - chainable handlers for login with OAuth1 and OAuth2 authentication providers.\n* [gorbac](https://github.com/mikespook/gorbac) - provides a lightweight role-based access control (RBAC) implementation in Golang.\n* [goth](https://github.com/markbates/goth) - provides a simple, clean, and idiomatic way to use OAuth and OAuth2. Handles multiple providers out of the box.\n* [httpauth](https://github.com/goji/httpauth) - HTTP Authentication middleware.\n* [jwt](https://github.com/robbert229/jwt) - Clean and easy to use implementation of JSON Web Tokens (JWT).\n* [jwt](https://github.com/pascaldekloe/jwt) - Lightweight JSON Web Token (JWT) library.\n* [jwt-auth](https://github.com/adam-hanna/jwt-auth) - JWT middleware for Golang http servers with many configuration options.\n* [jwt-go](https://github.com/dgrijalva/jwt-go) - Golang implementation of JSON Web Tokens (JWT).\n* [loginsrv](https://github.com/tarent/loginsrv) - JWT login microservice with plugable backends such as OAuth2 (Github), htpasswd, osiam.\n* [oauth2](https://github.com/golang/oauth2) - Successor of goauth2. Generic OAuth 2.0 package that comes with JWT, Google APIs, Compute Engine and App Engine support.\n* [osin](https://github.com/openshift/osin) - Golang OAuth2 server library.\n* [paseto](https://github.com/o1egl/paseto) - Golang implementation of Platform-Agnostic Security Tokens (PASETO).\n* [permissions2](https://github.com/xyproto/permissions2) - Library for keeping track of users, login states and permissions. Uses secure cookies and bcrypt.\n* [rbac](https://github.com/zpatrick/rbac) - Minimalistic RBAC package for Go applications.\n* [securecookie](https://github.com/chmike/securecookie) - Efficient secure cookie encoding/decoding.\n* [session](https://github.com/icza/session) - Go session management for web servers (including support for Google App Engine - GAE).\n* [sessiongate-go](https://github.com/f0rmiga/sessiongate-go) - Go session management using the SessionGate Redis module.\n* [sessions](https://github.com/adam-hanna/sessions) - Dead simple, highly performant, highly customizable sessions service for go http servers.\n* [signedvalue](https://github.com/sashka/signedvalue) - Signed and timestamped strings compatible with [Tornado's](https://github.com/tornadoweb/tornado) `create_signed_value`, `decode_signed_value`, and therefore `set_secure_cookie` and `get_secure_cookie`.\n\n## Command Line\n\n### Standard CLI\n\n*Libraries for building standard or basic Command Line applications.*\n\n* [argparse](https://github.com/akamensky/argparse) - Command line argument parser inspired by Python's argparse module.\n* [argv](https://github.com/cosiner/argv) - Go library to split command line string as arguments array using the bash syntax.\n* [cli](https://github.com/mkideal/cli) - Feature-rich and easy to use command-line package based on golang struct tags.\n* [cli](https://github.com/teris-io/cli) - Simple and complete API for building command line interfaces in Go.\n* [cli-init](https://github.com/tcnksm/gcli) - The easy way to start building Golang command line applications.\n* [climax](http://github.com/tucnak/climax) - Alternative CLI with \"human face\", in spirit of Go command.\n* [cobra](https://github.com/spf13/cobra) - Commander for modern Go CLI interactions.\n* [commandeer](https://github.com/jaffee/commandeer) - Dev-friendly CLI apps: sets up flags, defaults, and usage based on struct fields and tags.\n* [complete](https://github.com/posener/complete) - Write bash completions in Go + Go command bash completion.\n* [docopt.go](https://github.com/docopt/docopt.go) - Command-line arguments parser that will make you smile.\n* [drive](https://github.com/odeke-em/drive) - Google Drive client for the commandline.\n* [env](https://github.com/codingconcepts/env) - Tag-based environment configuration for structs.\n* [flag](https://github.com/cosiner/flag) - Simple but powerful command line option parsing library for Go supporting subcommand.\n* [flaggy](https://github.com/integrii/flaggy) - A robust and idiomatic flags package with excellent subcommand support.\n* [flagvar](https://github.com/sgreben/flagvar) - A collection of flag argument types for Go's standard `flag` package.\n* [go-arg](https://github.com/alexflint/go-arg) - Struct-based argument parsing in Go.\n* [go-commander](https://github.com/yitsushi/go-commander) - Go library to simplify CLI workflow.\n* [go-flags](https://github.com/jessevdk/go-flags) - go command line option parser.\n* [gocmd](https://github.com/devfacet/gocmd) - Go library for building command line applications.\n* [hiboot cli](https://github.com/hidevopsio/hiboot/tree/master/pkg/app/cli) - cli application framework with auto configuration and dependency injection.\n* [kingpin](https://github.com/alecthomas/kingpin) - Command line and flag parser supporting sub commands.\n* [liner](https://github.com/peterh/liner) - Go readline-like library for command-line interfaces.\n* [mitchellh/cli](https://github.com/mitchellh/cli) - Go library for implementing command-line interfaces.\n* [mow.cli](https://github.com/jawher/mow.cli) - Go library for building CLI applications with sophisticated flag and argument parsing and validation.\n* [pflag](https://github.com/spf13/pflag) - Drop-in replacement for Go's flag package, implementing POSIX/GNU-style --flags.\n* [readline](https://github.com/chzyer/readline) - Pure golang implementation that provides most features in GNU-Readline under MIT license.\n* [sand](https://github.com/Zaba505/sand) - Simple API for creating interpreters and so much more.\n* [sflags](https://github.com/octago/sflags) - Struct based flags generator for flag, urfave/cli, pflag, cobra, kingpin and other libraries.\n* [strumt](https://github.com/antham/strumt) - Library to create prompt chain.\n* [ukautz/clif](https://github.com/ukautz/clif) - Small command line interface framework.\n* [urfave/cli](https://github.com/urfave/cli) - Simple, fast, and fun package for building command line apps in Go (formerly codegangsta/cli).\n* [wlog](https://github.com/dixonwille/wlog) - Simple logging interface that supports cross-platform color and concurrency.\n* [wmenu](https://github.com/dixonwille/wmenu) - Easy to use menu structure for cli applications that prompts users to make choices.\n\n### Advanced Console UIs\n\n*Libraries for building Console Applications and Console User Interfaces.*\n\n* [aurora](https://github.com/logrusorgru/aurora) - ANSI terminal colors that supports fmt.Printf/Sprintf.\n* [cfmt](https://github.com/mingrammer/cfmt) - Contextual fmt inspired by bootstrap color classes.\n* [chalk](https://github.com/ttacon/chalk) - Intuitive package for prettifying terminal/console output.\n* [color](https://github.com/fatih/color) - Versatile package for colored terminal output.\n* [colourize](https://github.com/TreyBastian/colourize) - Go library for ANSI colour text in terminals.\n* [ctc](https://github.com/wzshiming/ctc) - The non-invasive cross-platform terminal color library does not need to modify the Print method.\n* [go-ataman](https://github.com/workanator/go-ataman) - Go library for rendering ANSI colored text templates in terminals.\n* [go-colorable](https://github.com/mattn/go-colorable) - Colorable writer for windows.\n* [go-colortext](https://github.com/daviddengcn/go-colortext) - Go library for color output in terminals.\n* [go-isatty](https://github.com/mattn/go-isatty) - isatty for golang.\n* [go-prompt](https://github.com/c-bata/go-prompt) - Library for building a powerful interactive prompt, inspired by [python-prompt-toolkit](https://github.com/jonathanslenders/python-prompt-toolkit).\n* [gocui](https://github.com/jroimartin/gocui) - Minimalist Go library aimed at creating Console User Interfaces.\n* [gommon/color](https://github.com/labstack/gommon/tree/master/color) - Style terminal text.\n* [gookit/color](https://github.com/gookit/color) - Terminal color rendering tool library, support 16 colors, 256 colors, RGB color rendering output, compatible with Windows.\n* [mpb](https://github.com/vbauerster/mpb) - Multi progress bar for terminal applications.\n* [progressbar](https://github.com/schollz/progressbar) - Basic thread-safe progress bar that works in every OS.\n* [simpletable](https://github.com/alexeyco/simpletable) - Simple tables in terminal with Go.\n* [tabular](https://github.com/InVisionApp/tabular) - Print ASCII tables from command line utilities without the need to pass large sets of data to the API.\n* [termbox-go](https://github.com/nsf/termbox-go) - Termbox is a library for creating cross-platform text-based interfaces.\n* [termtables](https://github.com/apcera/termtables) - Go port of the Ruby library [terminal-tables](https://github.com/tj/terminal-table) for simple ASCII table generation as well as providing markdown and HTML output.\n* [termui](https://github.com/gizak/termui) - Go terminal dashboard based on **termbox-go** and inspired by [blessed-contrib](https://github.com/yaronn/blessed-contrib).\n* [uilive](https://github.com/gosuri/uilive) - Library for updating terminal output in realtime.\n* [uiprogress](https://github.com/gosuri/uiprogress) - Flexible library to render progress bars in terminal applications.\n* [uitable](https://github.com/gosuri/uitable) - Library to improve readability in terminal apps using tabular data.\n\n## Configuration\n\n*Libraries for configuration parsing.*\n\n* [config](https://github.com/olebedev/config) - JSON or YAML configuration wrapper with environment variables and flags parsing.\n* [configure](https://github.com/paked/configure) - Provides configuration through multiple sources, including JSON, flags and environment variables.\n* [confita](https://github.com/heetch/confita) - Load configuration in cascade from multiple backends into a struct.\n* [conflate](https://github.com/miracl/conflate) - Library/tool to merge multiple JSON/YAML/TOML files from arbitrary URLs, validation against a JSON schema, and application of default values defined in the schema.\n* [env](https://github.com/caarlos0/env) - Parse environment variables to Go structs (with defaults).\n* [envcfg](https://github.com/tomazk/envcfg) - Un-marshaling environment variables to Go structs.\n* [envconf](https://github.com/ian-kent/envconf) - Configuration from environment.\n* [envconfig](https://github.com/vrischmann/envconfig) - Read your configuration from environment variables.\n* [envh](https://github.com/antham/envh) - Helpers to manage environment variables.\n* [gcfg](https://github.com/go-gcfg/gcfg) - read INI-style configuration files into Go structs; supports user-defined types and subsections.\n* [go-up](https://github.com/ufoscout/go-up) - A simple configuration library with recursive placeholders resolution and no magic.\n* [goConfig](https://github.com/crgimenes/goConfig) - Parses a struct as input and populates the fields of this struct with parameters from command line, environment variables and configuration file.\n* [godotenv](https://github.com/joho/godotenv) - Go port of Ruby's dotenv library (Loads environment variables from `.env`).\n* [gofigure](https://github.com/ian-kent/gofigure) - Go application configuration made easy.\n* [gone/jconf](https://github.com/One-com/gone/tree/master/jconf) - Modular JSON configuration. Keep you config structs along with the code they configure and delegate parsing to submodules without sacrificing full config serialization.\n* [gookit/config](https://github.com/gookit/config) - application config manage(load,get,set). support JSON, YAML, TOML, INI, HCL. multi file load, data override merge.\n* [hjson](https://github.com/hjson/hjson-go) - Human JSON, a configuration file format for humans. Relaxed syntax, fewer mistakes, more comments.\n* [ingo](https://github.com/schachmat/ingo) - Flags persisted in an ini-like config file.\n* [ini](https://github.com/go-ini/ini) - Go package to read and write INI files.\n* [joshbetz/config](https://github.com/joshbetz/config) - Small configuration library for Go that parses environment variables, JSON files, and reloads automatically on SIGHUP.\n* [kelseyhightower/envconfig](https://github.com/kelseyhightower/envconfig) - Go library for managing configuration data from environment variables.\n* [mini](https://github.com/sasbury/mini) - Golang package for parsing ini-style configuration files.\n* [sprbox](https://github.com/oblq/sprbox) - Build-environment aware toolbox factory and agnostic config parser (YAML, TOML, JSON and Environment vars).\n* [store](https://github.com/tucnak/store) - Lightweight configuration manager for Go.\n* [viper](https://github.com/spf13/viper) - Go configuration with fangs.\n* [xdg](https://github.com/OpenPeeDeeP/xdg) - Cross platform package that follows the [XDG Standard](https://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html).\n\n## Continuous Integration\n\n*Tools for help with continuous integration.*\n\n* [drone](https://github.com/drone/drone) - Drone is a Continuous Integration platform built on Docker, written in Go.\n* [duci](https://github.com/duck8823/duci) - A simple ci server no needs domain specific languages.\n* [gomason](https://github.com/nikogura/gomason) - Test, Build, Sign, and Publish your go binaries from a clean workspace.\n* [goveralls](https://github.com/mattn/goveralls) - Go integration for Coveralls.io continuous code coverage tracking system.\n* [overalls](https://github.com/go-playground/overalls) - Multi-Package go project coverprofile for tools like goveralls.\n* [roveralls](https://github.com/LawrenceWoodman/roveralls) - Recursive coverage testing tool.\n\n## CSS Preprocessors\n\n*Libraries for preprocessing CSS files.*\n\n* [gcss](https://github.com/yosssi/gcss) - Pure Go CSS Preprocessor.\n* [go-libsass](https://github.com/wellington/go-libsass) - Go wrapper to the 100% Sass compatible libsass project.\n\n## Data Structures\n\n*Generic datastructures and algorithms in Go.*\n* [algorithms](https://github.com/shady831213/algorithms) - Algorithms and data structures.CLRS study.\n* [binpacker](https://github.com/zhuangsirui/binpacker) - Binary packer and unpacker helps user build custom binary stream.\n* [bit](https://github.com/yourbasic/bit) - Golang set data structure with bonus bit-twiddling functions.\n* [bitset](https://github.com/willf/bitset) - Go package implementing bitsets.\n* [bloom](https://github.com/zhenjl/bloom) - Bloom filters implemented in Go.\n* [bloom](https://github.com/yourbasic/bloom) - Golang Bloom filter implementation.\n* [boomfilters](https://github.com/tylertreat/BoomFilters) - Probabilistic data structures for processing continuous, unbounded streams.\n* [concurrent-writer](https://github.com/free/concurrent-writer) - Highly concurrent drop-in replacement for `bufio.Writer`.\n* [conjungo](https://github.com/InVisionApp/conjungo) - A small, powerful and flexible merge library.\n* [count-min-log](https://github.com/seiflotfy/count-min-log) - Go implementation Count-Min-Log sketch: Approximately counting with approximate counters (Like Count-Min sketch but using less memory).\n* [cuckoofilter](https://github.com/seiflotfy/cuckoofilter) - Cuckoo filter: a good alternative to a counting bloom filter implemented in Go.\n* [deque](https://github.com/gammazero/deque) - Fast ring-buffer deque (double-ended queue).\n* [encoding](https://github.com/zhenjl/encoding) - Integer Compression Libraries for Go.\n* [go-adaptive-radix-tree](https://github.com/plar/go-adaptive-radix-tree) - Go implementation of Adaptive Radix Tree.\n* [go-datastructures](https://github.com/Workiva/go-datastructures) - Collection of useful, performant, and thread-safe data structures.\n* [go-ef](https://github.com/amallia/go-ef) - A Go implementation of the Elias-Fano encoding.\n* [go-geoindex](https://github.com/hailocab/go-geoindex) - In-memory geo index.\n* [go-mcache](https://github.com/OrlovEvgeny/go-mcache) - Fast in-memory key:value store/cache library. Pointer caches.\n* [go-rquad](https://github.com/aurelien-rainone/go-rquad) - Region quadtrees with efficient point location and neighbour finding.\n* [gods](https://github.com/emirpasic/gods) - Go Data Structures. Containers, Sets, Lists, Stacks, Maps, BidiMaps, Trees, HashSet etc.\n* [golang-set](https://github.com/deckarep/golang-set) - Thread-Safe and Non-Thread-Safe high-performance sets for Go.\n* [goset](https://github.com/zoumo/goset) - A useful Set collection implementation for Go.\n* [goskiplist](https://github.com/ryszard/goskiplist) - Skip list implementation in Go.\n* [gota](https://github.com/kniren/gota) - Implementation of dataframes, series, and data wrangling methods for Go.\n* [hilbert](https://github.com/google/hilbert) - Go package for mapping values to and from space-filling curves, such as Hilbert and Peano curves.\n* [hyperloglog](https://github.com/axiomhq/hyperloglog) - HyperLogLog implementation with Sparse, LogLog-Beta bias correction and TailCut space reduction.\n* [levenshtein](https://github.com/agext/levenshtein) - Levenshtein distance and similarity metrics with customizable edit costs and Winkler-like bonus for common prefix.\n* [levenshtein](https://github.com/agnivade/levenshtein) - Implementation to calculate levenshtein distance in Go.\n* [mafsa](https://github.com/smartystreets/mafsa) - MA-FSA implementation with Minimal Perfect Hashing.\n* [merkletree](https://github.com/cbergoon/merkletree) - Implementation of a merkle tree providing an efficient and secure verification of the contents of data structures.\n* [mspm](https://github.com/BlackRabbitt/mspm) - Multi-String Pattern Matching Algorithm for information retrieval.\n* [pipeline](https://github.com/hyfather/pipeline) - An implementation of pipelines with fan-in and fan-out.\n* [roaring](https://github.com/RoaringBitmap/roaring) - Go package implementing compressed bitsets.\n* [set](https://github.com/StudioSol/set) - Simple set data structure implementation in Go using LinkedHashMap.\n* [skiplist](https://github.com/MauriceGit/skiplist) - Very fast Go Skiplist implementation.\n* [skiplist](https://github.com/gansidui/skiplist) - Skiplist implementation in Go.\n* [trie](https://github.com/derekparker/trie) - Trie implementation in Go.\n* [ttlcache](https://github.com/diegobernardes/ttlcache) - In-memory LRU string-interface{} map with expiration for golang.\n* [willf/bloom](https://github.com/willf/bloom) - Go package implementing Bloom filters.\n\n## Database\n\n*Databases implemented in Go.*\n\n* [badger](https://github.com/dgraph-io/badger) - Fast key-value store in Go.\n* [BigCache](https://github.com/allegro/bigcache) - Efficient key/value cache for gigabytes of data.\n* [bolt](https://github.com/boltdb/bolt) - Low-level key/value database for Go.\n* [buntdb](https://github.com/tidwall/buntdb) - Fast, embeddable, in-memory key/value database for Go with custom indexing and spatial support.\n* [cache2go](https://github.com/muesli/cache2go) - In-memory key:value cache which supports automatic invalidation based on timeouts.\n* [clusteredBigCache](https://github.com/oaStuff/clusteredBigCache) - BigCache with clustering support and individual item expiration.\n* [cockroach](https://github.com/cockroachdb/cockroach) - Scalable, Geo-Replicated, Transactional Datastore.\n* [couchcache](https://github.com/codingsince1985/couchcache) - RESTful caching micro-service backed by Couchbase server.\n* [CovenantSQL](https://github.com/CovenantSQL/CovenantSQL) - CovenantSQL is a SQL database on blockchain.\n* [dgraph](https://github.com/dgraph-io/dgraph) - Scalable, Distributed, Low Latency, High Throughput Graph Database.\n* [diskv](https://github.com/peterbourgon/diskv) - Home-grown disk-backed key-value store.\n* [eliasdb](https://github.com/krotik/eliasdb) - Dependency-free, transactional graph database with REST API, phrase search and SQL-like query language.\n* [fastcache](https://github.com/VictoriaMetrics/fastcache) - fast thread-safe inmemory cache for big number of entries. Minimizes GC overhead.\n* [forestdb](https://github.com/couchbase/goforestdb) - Go bindings for ForestDB.\n* [GCache](https://github.com/bluele/gcache) - Cache library with support for expirable Cache, LFU, LRU and ARC.\n* [go-cache](https://github.com/pmylund/go-cache) - In-memory key:value store/cache (similar to Memcached) library for Go, suitable for single-machine applications.\n* [goleveldb](https://github.com/syndtr/goleveldb) - Implementation of the [LevelDB](https://github.com/google/leveldb) key/value database in Go.\n* [gorocksdb](https://github.com/kapitan-k/gorocksdb) - Gorocksdb is a wrapper for [RocksDB](https://rocksdb.org) written in Go.\n* [groupcache](https://github.com/golang/groupcache) - Groupcache is a caching and cache-filling library, intended as a replacement for memcached in many cases.\n* [influxdb](https://github.com/influxdb/influxdb) - Scalable datastore for metrics, events, and real-time analytics.\n* [ledisdb](https://github.com/siddontang/ledisdb) - Ledisdb is a high performance NoSQL like Redis based on LevelDB.\n* [levigo](https://github.com/jmhodges/levigo) - Levigo is a Go wrapper for LevelDB.\n* [moss](https://github.com/couchbase/moss) - Moss is a simple LSM key-value storage engine written in 100% Go.\n* [piladb](https://github.com/fern4lvarez/piladb) - Lightweight RESTful database engine based on stack data structures.\n* [prometheus](https://github.com/prometheus/prometheus) - Monitoring system and time series database.\n* [rqlite](https://github.com/rqlite/rqlite) - The lightweight, distributed, relational database built on SQLite.\n* [Scribble](https://github.com/nanobox-io/golang-scribble) - Tiny flat file JSON store.\n* [slowpoke](https://github.com/recoilme/slowpoke) - Key-value store with persistence.\n* [tempdb](https://github.com/rafaeljesus/tempdb) - Key-value store for temporary items.\n* [tidb](https://github.com/pingcap/tidb) - TiDB is a distributed SQL database. Inspired by the design of Google F1.\n* [tiedot](https://github.com/HouzuoGuo/tiedot) - Your NoSQL database powered by Golang.\n* [Vasto](https://github.com/chrislusf/vasto) - A distributed high-performance key-value store. On Disk. Eventual consistent. HA. Able to grow or shrink without service interruption.\n\n*Database schema migration.*\n\n* [darwin](https://github.com/GuiaBolso/darwin) - Database schema evolution library for Go.\n* [go-fixtures](https://github.com/RichardKnop/go-fixtures) - Django style fixtures for Golang's excellent built-in database/sql library.\n* [go-pg-migrations](https://github.com/robinjoseph08/go-pg-migrations) - A Go package to help write migrations with go-pg/pg.\n* [gondolier](https://github.com/emvicom/gondolier) - Gondolier is a library to auto migrate database schemas using structs.\n* [goose](https://github.com/steinbacher/goose) - Database migration tool. You can manage your database's evolution by creating incremental SQL or Go scripts.\n* [gormigrate](https://github.com/go-gormigrate/gormigrate) - Database schema migration helper for Gorm ORM.\n* [migrate](https://github.com/golang-migrate/migrate) - Database migrations. CLI and Golang library.\n* [pravasan](https://github.com/pravasan/pravasan) - Simple Migration tool - currently for MySQL but planning to soon support Postgres, SQLite, MongoDB, etc.\n* [soda](https://github.com/gobuffalo/pop/tree/master/soda) - Database migration, creation, ORM, etc... for MySQL, PostgreSQL, and SQLite.\n* [sql-migrate](https://github.com/rubenv/sql-migrate) - Database migration tool. Allows embedding migrations into the application using go-bindata.\n\n*Database tools.*\n\n* [chproxy](https://github.com/Vertamedia/chproxy) - HTTP proxy for ClickHouse database.\n* [clickhouse-bulk](https://github.com/nikepan/clickhouse-bulk) - Collects small insterts and sends big requests to ClickHouse servers.\n* [go-mysql](https://github.com/siddontang/go-mysql) - Go toolset to handle MySQL protocol and replication.\n* [go-mysql-elasticsearch](https://github.com/siddontang/go-mysql-elasticsearch) - Sync your MySQL data into Elasticsearch automatically.\n* [kingshard](https://github.com/flike/kingshard) - kingshard is a high performance proxy for MySQL powered by Golang.\n* [myreplication](https://github.com/2tvenom/myreplication) - MySql binary log replication listener. Supports statement and row based replication.\n* [octillery](https://github.com/knocknote/octillery) - Go package for sharding databases ( Supports every ORM or raw SQL ).\n* [orchestrator](https://github.com/github/orchestrator) - MySQL replication topology manager \u0026 visualizer.\n* [pgweb](https://github.com/sosedoff/pgweb) - Web-based PostgreSQL database browser.\n* [prep](https://github.com/hexdigest/prep) - Use prepared SQL statements without changing your code.\n* [pREST](https://github.com/nuveo/prest) - Serve a RESTful API from any PostgreSQL database.\n* [rwdb](https://github.com/andizzle/rwdb) - rwdb provides read replica capability for multiple database servers setup.\n* [vitess](https://github.com/youtube/vitess) - vitess provides servers and tools which facilitate scaling of MySQL databases for large scale web services.\n\n*SQL query builder, libraries for building and using SQL.*\n\n* [Dotsql](https://github.com/gchaincl/dotsql) - Go library that helps you keep sql files in one place and use them with ease.\n* [gendry](https://github.com/didi/gendry) - Non-invasive SQL builder and powerful data binder.\n* [godbal](https://github.com/xujiajun/godbal) - Database Abstraction Layer (dbal) for go. Support SQL builder and get result easily.\n* [goqu](https://github.com/doug-martin/goqu) - Idiomatic SQL builder and query library.\n* [igor](https://github.com/galeone/igor) - Abstraction layer for PostgreSQL that supports advanced functionality and uses gorm-like syntax.\n* [ormlite](https://github.com/pupizoid/ormlite) - Lightweight package containing some ORM-like features and helpers for sqlite databases.\n* [ozzo-dbx](https://github.com/go-ozzo/ozzo-dbx) - Powerful data retrieval methods as well as DB-agnostic query building capabilities.\n* [scaneo](https://github.com/variadico/scaneo) - Generate Go code to convert database rows into arbitrary structs.\n* [sqrl](https://github.com/elgris/sqrl) - SQL query builder, fork of Squirrel with improved performance.\n* [Squirrel](https://github.com/Masterminds/squirrel) - Go library that helps you build SQL queries.\n* [xo](https://github.com/knq/xo) - Generate idiomatic Go code for databases based on existing schema definitions or custom queries supporting PostgreSQL, MySQL, SQLite, Oracle, and Microsoft SQL Server.\n\n## Database Drivers\n\n*Libraries for connecting and operating databases.*\n\n* Relational Databases\n    * [avatica](https://github.com/apache/calcite-avatica-go) - Apache Avatica/Phoenix SQL driver for database/sql.\n    * [bgc](https://github.com/viant/bgc) - Datastore Connectivity for BigQuery for go.\n    * [firebirdsql](https://github.com/nakagami/firebirdsql) - Firebird RDBMS SQL driver for Go.\n    * [go-adodb](https://github.com/mattn/go-adodb) - Microsoft ActiveX Object DataBase driver for go that uses database/sql.\n    * [go-mssqldb](https://github.com/denisenkom/go-mssqldb) - Microsoft MSSQL driver for Go.\n    * [go-oci8](https://github.com/mattn/go-oci8) - Oracle driver for go that uses database/sql.\n    * [go-sql-driver/mysql](https://github.com/go-sql-driver/mysql) - MySQL driver for Go.\n    * [go-sqlite3](https://github.com/mattn/go-sqlite3) - SQLite3 driver for go that uses database/sql.\n    * [gofreetds](https://github.com/minus5/gofreetds) - Microsoft MSSQL driver. Go wrapper over [FreeTDS](http://www.freetds.org).\n    * [goracle](https://github.com/go-goracle/goracle) - Oracle driver for Go, using the ODPI-C driver.\n    * [pgx](https://github.com/jackc/pgx) - PostgreSQL driver supporting features beyond those exposed by database/sql.\n    * [pq](https://github.com/lib/pq) - Pure Go Postgres driver for database/sql.\n\n* NoSQL Databases\n    * [aerospike-client-go](https://github.com/aerospike/aerospike-client-go) - Aerospike client in Go language.\n    * [arangolite](https://github.com/solher/arangolite) - Lightweight golang driver for ArangoDB.\n    * [asc](https://github.com/viant/asc) - Datastore Connectivity for Aerospike for go.\n    * [cachego](https://github.com/fabiorphp/cachego) - Golang Cache component for multiple drivers.\n    * [cayley](https://github.com/google/cayley) - Graph database with support for multiple backends.\n    * [dsc](https://github.com/viant/dsc) - Datastore connectivity for SQL, NoSQL, structured files.\n    * [dynago](https://github.com/underarmour/dynago) - Dynago is a principle of least surprise client for DynamoDB.\n    * [go-couchbase](https://github.com/couchbase/go-couchbase) - Couchbase client in Go.\n    * [go-couchdb](https://github.com/fjl/go-couchdb) - Yet another CouchDB HTTP API wrapper for Go.\n    * [gocb](https://github.com/couchbase/gocb) - Official Couchbase Go SDK.\n    * [gocql](http://gocql.github.io) - Go language driver for Apache Cassandra.\n    * [godscache](https://github.com/defcronyke/godscache) - A wrapper for the Google Cloud Platform Go Datastore package that adds caching using memcached.\n    * [gomemcache](https://github.com/bradfitz/gomemcache/) - memcache client library for the Go programming language.\n    * [gorethink](https://github.com/dancannon/gorethink) - Go language driver for RethinkDB.\n    * [goriak](https://github.com/zegl/goriak) - Go language driver for Riak KV.\n    * [mgo](https://github.com/globalsign/mgo) - MongoDB driver for the Go language that implements a rich and well tested selection of features under a very simple API following standard Go idioms.\n    * [mongo-go-driver](https://github.com/mongodb/mongo-go-driver) - Official MongoDB driver for the Go language.\n    * [neo4j](https://github.com/cihangir/neo4j) - Neo4j Rest API Bindings for Golang.\n    * [Neo4j-GO](https://github.com/davemeehan/Neo4j-GO) - Neo4j REST Client in golang.\n    * [neoism](https://github.com/jmcvetta/neoism) - Neo4j client for Golang.\n    * [redigo](https://github.com/gomodule/redigo) - Redigo is a Go client for the Redis database.\n    * [redis](https://github.com/go-redis/redis) - Redis client for Golang.\n    * [redis](https://github.com/bsm/redeo) - Redis-protocol compatible TCP servers/services.\n    * [xredis](https://github.com/shomali11/xredis) - Typesafe, customizable, clean \u0026 easy to use Redis client.\n\n* Search and Analytic Databases.\n    * [bleve](https://github.com/blevesearch/bleve) - Modern text indexing library for go.\n    * [elastic](https://github.com/olivere/elastic) - Elasticsearch client for Go.\n    * [elasticsql](https://github.com/cch123/elasticsql) - Convert sql to elasticsearch dsl in Go.\n    * [elastigo](https://github.com/mattbaird/elastigo) - Elasticsearch client library.\n    * [goes](https://github.com/OwnLocal/goes) - Library to interact with Elasticsearch.\n    * [riot](https://github.com/go-ego/riot) - Go Open Source, Distributed, Simple and efficient Search Engine.\n    * [skizze](https://github.com/seiflotfy/skizze) - probabilistic data-structures service and storage.\n\n## Date and Time\n\n*Libraries for working with dates and times.*\n\n* [carbon](https://github.com/uniplaces/carbon) - Simple Time extension with a lot of util methods, ported from PHP Carbon library.\n* [date](https://github.com/rickb777/date) - Augments Time for working with dates, date ranges, time spans, periods, and time-of-day.\n* [dateparse](https://github.com/araddon/dateparse) - Parse date's without knowing format in advance.\n* [durafmt](https://github.com/hako/durafmt) - Time duration formatting library for Go.\n* [feiertage](https://github.com/wlbr/feiertage) - Set of functions to calculate public holidays in Germany, incl. specialization on the states of Germany (Bundesl√§nder). Things like Easter, Pentecost, Thanksgiving...\n* [go-persian-calendar](https://github.com/yaa110/go-persian-calendar) - The implementation of the Persian (Solar Hijri) Calendar in Go (golang).\n* [go-sunrise](https://github.com/nathan-osman/go-sunrise) - Calculate the sunrise and sunset times for a given location.\n* [goweek](https://github.com/grsmv/goweek) - Library for working with week entity in golang.\n* [iso8601](https://github.com/relvacode/iso8601) - Efficiently parse ISO8601 date-times without regex.\n* [Kair](https://github.com/GuilhermeCaruso/Kair) - Date and Time - Golang Formatting Library.\n* [now](https://github.com/jinzhu/now) - Now is a time toolkit for golang.\n* [NullTime](https://github.com/kirillDanshin/nulltime) - Nullable `time.Time`.\n* [strftime](https://github.com/awoodbeck/strftime) - C99-compatible strftime formatter.\n* [timespan](https://github.com/SaidinWoT/timespan) - For interacting with intervals of time, defined as a start time and a duration.\n* [timeutil](https://github.com/leekchan/timeutil) - Useful extensions (Timedelta, Strftime, ...) to the golang's time package.\n* [tuesday](https://github.com/osteele/tuesday) - Ruby-compatible Strftime function.\n\n## Distributed Systems\n\n*Packages that help with building Distributed Systems.*\n\n* [celeriac](https://github.com/svcavallar/celeriac.v1) - Library for adding support for interacting and monitoring Celery workers, tasks and events in Go.\n* [consistent](https://github.com/buraksezer/consistent) - Consistent hashing with bounded loads.\n* [digota](https://github.com/digota/digota) - grpc ecommerce microservice.\n* [doublejump](https://github.com/edwingeng/doublejump) - A revamped Google's jump consistent hash.\n* [drmaa](https://github.com/dgruber/drmaa) - Job submission library for cluster schedulers based on the DRMAA standard.\n* [emitter-io](https://github.com/emitter-io/emitter) - High performance, distributed, secure and low latency publish-subscribe platform built with MQTT, Websockets and love.\n* [flowgraph](https://github.com/vectaport/flowgraph) - flow-based programming package.\n* [gleam](https://github.com/chrislusf/gleam) - Fast and scalable distributed map/reduce system written in pure Go and Luajit, combining Go's high concurrency with Luajit's high performance, runs standalone or distributed.\n* [glow](https://github.com/chrislusf/glow) - Easy-to-Use scalable distributed big data processing, Map-Reduce, DAG execution, all in pure Go.\n* [go-health](https://github.com/InVisionApp/go-health) - Library for enabling asynchronous dependency health checks in your service.\n* [go-jump](https://github.com/dgryski/go-jump) - Port of Google's \"Jump\" Consistent Hash function.\n* [go-kit](https://github.com/go-kit/kit) - Microservice toolkit with support for service discovery, load balancing, pluggable transports, request tracking, etc.\n* [gorpc](https://github.com/valyala/gorpc) - Simple, fast and scalable RPC library for high load.\n* [grpc-go](https://github.com/grpc/grpc-go) - The Go language implementation of gRPC. HTTP/2 based RPC.\n* [hprose](https://github.com/hprose/hprose-golang) - Very newbility RPC Library, support 25+ languages now.\n* [jaeger](https://github.com/jaegertracing/jaeger) - A distributed tracing system.\n* [jsonrpc](https://github.com/osamingo/jsonrpc) - The jsonrpc package helps implement of JSON-RPC 2.0.\n* [jsonrpc](https://github.com/ybbus/jsonrpc) - JSON-RPC 2.0 HTTP client implementation.\n* [KrakenD](https://github.com/devopsfaith/krakend) - Ultra performant API Gateway framework with middlewares.\n* [micro](https://github.com/micro/micro) - Pluggable microservice toolkit and distributed systems platform.\n* [NATS](https://github.com/nats-io/gnatsd) - Lightweight, high performance messaging system for microservices, IoT, and cloud native systems.\n* [raft](https://github.com/hashicorp/raft) - Golang implementation of the Raft consensus protocol, by HashiCorp.\n* [raft](https://github.com/coreos/etcd/tree/master/raft) - Go implementation of the Raft consensus protocol, by CoreOS.\n* [redis-lock](https://github.com/bsm/redis-lock) - Simplified distributed locking implementation using Redis.\n* [ringpop-go](https://github.com/uber/ringpop-go) - Scalable, fault-tolerant application-layer sharding for Go applications.\n* [rpcx](https://github.com/smallnest/rpcx) - Distributed pluggable RPC service framework like alibaba Dubbo.\n* [sleuth](https://github.com/ursiform/sleuth) - Library for master-less p2p auto-discovery and RPC between HTTP services (using [ZeroMQ](https://github.com/zeromq/libzmq)).\n* [tendermint](https://github.com/tendermint/tendermint) - High-performance middleware for transforming a state machine written in any programming language into a Byzantine Fault Tolerant replicated state machine using the Tendermint consensus and blockchain protocols.\n* [torrent](https://github.com/anacrolix/torrent) - BitTorrent client package.\n    * [dht](https://godoc.org/github.com/anacrolix/dht) - BitTorrent Kademlia DHT implementation.\n    * [go-peerflix](https://github.com/Sioro-Neoku/go-peerflix) - Video streaming torrent client.\n\n## Email\n\n*Libraries and tools that implement email creation and sending.*\n\n* [chasquid](https://blitiri.com.ar/p/chasquid) - SMTP server written in Go.\n* [douceur](https://github.com/aymerick/douceur) - CSS inliner for your HTML emails.\n* [email](https://github.com/jordan-wright/email) - A robust and flexible email library for Go.\n* [go-dkim](https://github.com/toorop/go-dkim) - DKIM library, to sign \u0026 verify email.\n* [go-imap](https://github.com/emersion/go-imap) - IMAP library for clients and servers.\n* [go-message](https://github.com/emersion/go-message) - Streaming library for the Internet Message Format and mail messages.\n* [Gomail](https://github.com/go-gomail/gomail/) - Gomail is a very simple and powerful package to send emails.\n* [Hectane](https://github.com/hectane/hectane) - Lightweight SMTP client providing an HTTP API.\n* [hermes](https://github.com/matcornic/hermes) - Golang package that generates clean, responsive HTML e-mails.\n* [MailHog](https://github.com/mailhog/MailHog) - Email and SMTP testing with web and API interface.\n* [SendGrid](https://github.com/sendgrid/sendgrid-go) - SendGrid's Go library for sending email.\n* [smtp](https://github.com/mailhog/smtp) - SMTP server protocol state machine.\n\n## Embeddable Scripting Languages\n\n*Embedding other languages inside your go code.*\n\n* [agora](https://github.com/PuerkitoBio/agora) - Dynamically typed, embeddable programming language in Go.\n* [anko](https://github.com/mattn/anko) - Scriptable interpreter written in Go.\n* [binder](https://github.com/alexeyco/binder) - Go to Lua binding library, based on [gopher-lua](https://github.com/yuin/gopher-lua).\n* [expr](https://github.com/antonmedv/expr) - an engine that can evaluate expressions.\n* [gisp](https://github.com/jcla1/gisp) - Simple LISP in Go.\n* [go-duktape](https://github.com/olebedev/go-duktape) - Duktape JavaScript engine bindings for Go.\n* [go-lua](https://github.com/Shopify/go-lua) - Port of the Lua 5.2 VM to pure Go.\n* [go-php](https://github.com/deuill/go-php) - PHP bindings for Go.\n* [go-python](https://github.com/sbinet/go-python) - naive go bindings to the CPython C-API.\n* [golua](https://github.com/aarzilli/golua) - Go bindings for Lua C API.\n* [gopher-lua](https://github.com/yuin/gopher-lua) - Lua 5.1 VM and compiler written in Go.\n* [ngaro](https://github.com/db47h/ngaro) - Embeddable Ngaro VM implementation enabling scripting in Retro.\n* [otto](https://github.com/robertkrimen/otto) - JavaScript interpreter written in Go.\n* [purl](https://github.com/ian-kent/purl) - Perl 5.18.2 embedded in Go.\n\n## Files\n\n*Libraries for  handling files and file systems.*\n\n* [afero](https://github.com/spf13/afero) - FileSystem Abstraction System for Go.\n* [go-csv-tag](https://github.com/artonge/go-csv-tag) - Load csv file using tag.\n* [go-decent-copy](https://github.com/hugocarreira/go-decent-copy) - Copy files for humans.\n* [go-gtfs](https://github.com/artonge/go-gtfs) - Load gtfs files in go.\n* [notify](https://github.com/rjeczalik/notify) - File system event notification library with simple API, similar to os/signal.\n* [pdfcpu](https://github.com/hhrutter/pdfcpu) - PDF processor.\n* [skywalker](https://github.com/dixonwille/skywalker) - Package to allow one to concurrently go through a filesystem with ease.\n* [tarfs](https://github.com/posener/tarfs) - Implementation of the [`FileSystem` interface](https://godoc.org/github.com/kr/fs#FileSystem) for tar files.\n\n## Financial\n\n*Packages for accounting and finance.*\n\n* [accounting](https://github.com/leekchan/accounting) - money and currency formatting for golang.\n* [decimal](https://github.com/shopspring/decimal) - Arbitrary-precision fixed-point decimal numbers.\n* [go-finance](https://github.com/FlashBoys/go-finance) - Comprehensive financial markets data in Go.\n* [go-finance](https://github.com/alpeb/go-finance) - Library of financial functions for time value of money (annuities), cash flow, interest rate conversions, bonds and depreciation calculations.\n* [go-money](https://github.com/rhymond/go-money) - Implementation of Fowler's Money pattern.\n* [ofxgo](https://github.com/aclindsa/ofxgo) - Query OFX servers and/or parse the responses (with example command-line client).\n* [techan](https://github.com/sdcoffey/techan) - Technical analysis library with advanced market analysis and trading strategies.\n* [transaction](https://github.com/claygod/transaction) - Embedded transactional database of accounts, running in multithreaded mode.\n* [vat](https://github.com/dannyvankooten/vat) - VAT number validation \u0026 EU VAT rates.\n\n## Forms\n\n*Libraries for working with forms.*\n\n* [bind](https://github.com/robfig/bind) - Bind form data to any Go values.\n* [binding](https://github.com/mholt/binding) - Binds form and JSON data from net/http Request to struct.\n* [conform](https://github.com/leebenson/conform) - Keeps user input in check. Trims, sanitizes \u0026 scrubs data based on struct tags.\n* [form](https://github.com/go-playground/form) - Decodes url.Values into Go value(s) and Encodes Go value(s) into url.Values. Dual Array and Full map support.\n* [formam](https://github.com/monoculum/formam) - decode form's values into a struct.\n* [forms](https://github.com/albrow/forms) - Framework-agnostic library for parsing and validating form/JSON data which supports multipart forms and files.\n* [gorilla/csrf](https://github.com/gorilla/csrf) - CSRF protection for Go web applications \u0026 services.\n* [nosurf](https://github.com/justinas/nosurf) - CSRF protection middleware for Go.\n\n## Functional\n\n*Packages to support functional programming in Go.*\n\n* [fpGo](https://github.com/TeaEntityLab/fpGo) - Monad, Functional Programming features for Golang.\n* [fuego](https://github.com/seborama/fuego) - Functional Experiment in Go.\n* [go-underscore](https://github.com/tobyhede/go-underscore) - Useful collection of helpfully functional Go collection utilities.\n\n## Game Development\n\n*Awesome game development libraries.*\n\n* [Azul3D](https://github.com/azul3d/engine) - 3D game engine written in Go.\n* [Ebiten](https://github.com/hajimehoshi/ebiten) - dead simple 2D game library in Go.\n* [engo](https://github.com/EngoEngine/engo) - Engo is an open-source 2D game engine written in Go. It follows the Entity-Component-System paradigm.\n* [g3n](https://github.com/g3n/engine) - Go 3D Game Engine.\n* [GarageEngine](https://github.com/vova616/GarageEngine) - 2d game engine written in Go working on OpenGL.\n* [glop](https://github.com/runningwild/glop) - Glop (Game Library Of Power) is a fairly simple cross-platform game library.\n* [go-astar](https://github.com/beefsack/go-astar) - Go implementation of the A\\* path finding algorithm.\n* [go-collada](https://github.com/GlenKelley/go-collada) - Go package for working with the Collada file format.\n* [go-sdl2](https://github.com/veandco/go-sdl2) - Go bindings for the [Simple DirectMedia Layer](https://www.libsdl.org/).\n* [go3d](https://github.com/ungerik/go3d) - Performance oriented 2D/3D math package for Go.\n* [gonet](https://github.com/xtaci/gonet) - Game server skeleton implemented with golang.\n* [goworld](https://github.com/xiaonanln/goworld) - Scalable game server engine, featuring space-entity framework and hot-swapping.\n* [Leaf](https://github.com/name5566/leaf) - Lightweight game server framework.\n* [nano](https://github.com/lonng/nano) - Lightweight, facility, high performance golang based game server framework.\n* [Oak](https://github.com/oakmound/oak) - Pure Go game engine.\n* [Pitaya](https://github.com/topfreegames/pitaya) - Scalable game server framework with clustering support and client libraries for iOS, Android, Unity and others through the C SDK.\n* [Pixel](https://github.com/faiface/pixel) - Hand-crafted 2D game library in Go.\n* [raylib-go](https://github.com/gen2brain/raylib-go) - Go bindings for [raylib](http://www.raylib.com/), a simple and easy-to-use library to learn videogames programming.\n* [termloop](https://github.com/JoelOtter/termloop) - Terminal-based game engine for Go, built on top of Termbox.\n\n## Generation and Generics\n\n*Tools to enhance the language with features like generics via code generation.*\n\n* [efaceconv](https://github.com/t0pep0/efaceconv) - Code generation tool for high performance conversion from interface{} to immutable type without allocations.\n* [gen](https://github.com/clipperhouse/gen) - Code generation tool for ‚Äògenerics‚Äô-like functionality.\n* [go-enum](https://github.com/abice/go-enum) - Code generation for enums from code comments.\n* [go-linq](https://github.com/ahmetalpbalkan/go-linq) - .NET LINQ-like query methods for Go.\n* [goderive](https://github.com/awalterschulze/goderive) - Derives functions from input types.\n* [GoWrap](https://github.com/hexdigest/gowrap) - Generate decorators for Go interfaces using simple templates.\n* [interfaces](https://github.com/rjeczalik/interfaces) - Command line tool for generating interface definitions.\n* [jennifer](https://github.com/dave/jennifer) - Generate arbitrary Go code without templates.\n* [pkgreflect](https://github.com/ungerik/pkgreflect) - Go preprocessor for package scoped reflection.\n\n## Geographic\n\n*Geographic tools and servers*\n\n* [geocache](https://github.com/melihmucuk/geocache) - In-memory cache that is suitable for geolocation based applications.\n* [geoserver](https://github.com/hishamkaram/geoserver) - geoserver Is a Go Package For Manipulating a GeoServer Instance via the GeoServer REST API.\n* [gismanager](https://github.com/hishamkaram/gismanager) - Publish Your GIS Data(Vector Data) to PostGIS and Geoserver.\n* [osm](https://github.com/paulmach/osm) - Library for reading, writing and working with OpenStreetMap data and APIs.\n* [pbf](https://github.com/maguro/pbf) - OpenStreetMap PBF golang encoder/decoder.\n* [S2 geometry](https://github.com/golang/geo) - S2 geometry library in Go.\n* [Tile38](https://github.com/tidwall/tile38) - Geolocation DB with spatial index and realtime geofencing.\n\n## Go Compilers\n\n*Tools for compiling Go to other languages.*\n\n* [c4go](https://github.com/Konstantin8105/c4go) - Transpile C code to Go code.\n* [f4go](https://github.com/Konstantin8105/f4go) - Transpile FORTRAN 77 code to Go code.\n* [gopherjs](https://github.com/gopherjs/gopherjs) - Compiler from Go to JavaScript.\n* [llgo](https://github.com/go-llvm/llgo) - LLVM-based compiler for Go.\n* [tardisgo](https://github.com/tardisgo/tardisgo) - Golang to Haxe to CPP/CSharp/Java/JavaScript transpiler.\n\n## Goroutines\n\n*Tools for managing and working with Goroutines.*\n\n* [ants](https://github.com/panjf2000/ants) - A high-performance goroutine pool for golang.\n* [artifex](https://github.com/borderstech/artifex) - Simple in-memory job queue for Golang using worker-based dispatching.\n* [async](https://github.com/studiosol/async) - A safe way to execute functions asynchronously, recovering them in case of panic.\n* [cyclicbarrier](https://github.com/marusama/cyclicbarrier) - CyclicBarrier for golang.\n* [go-floc](https://github.com/workanator/go-floc) - Orchestrate goroutines with ease.\n* [go-flow](https://github.com/kamildrazkiewicz/go-flow) - Control goroutines execution order.\n* [go-trylock](https://github.com/subchen/go-trylock) - TryLock support on read-write lock for Golang.\n* [GoSlaves](https://github.com/themester/GoSlaves) - Simple and Asynchronous Goroutine pool library.\n* [goworker](https://github.com/benmanns/goworker) - goworker is a Go-based background worker.\n* [grpool](https://github.com/ivpusic/grpool) - Lightweight Goroutine pool.\n* [parallel-fn](https://github.com/rafaeljesus/parallel-fn) - Run functions in parallel.\n* [pool](https://github.com/go-playground/pool) - Limited consumer goroutine or unlimited goroutine pool for easier goroutine handling and cancellation.\n* [semaphore](https://github.com/kamilsk/semaphore) - Semaphore pattern implementation with timeout of lock/unlock operations based on channel and context.\n* [semaphore](https://github.com/marusama/semaphore) - Fast resizable semaphore implementation based on CAS (faster than channel-based semaphore implementations).\n* [stl](https://github.com/ssgreg/stl) - Software transactional locks based on Software Transactional Memory (STM) concurrency control mechanism.\n* [threadpool](https://github.com/shettyh/threadpool) - Golang threadpool implementation.\n* [tunny](https://github.com/Jeffail/tunny) - Goroutine pool for golang.\n* [worker-pool](https://github.com/vardius/worker-pool) - goworker is a Go simple async worker pool.\n* [workerpool](https://github.com/gammazero/workerpool) - Goroutine pool that limits the concurrency of task execution, not the number of tasks queued.\n\n## GUI\n\n*Libraries for building GUI Applications.*\n\n*Toolkits*\n\n* [app](https://github.com/murlokswarm/app) - Package to create apps with GO, HTML and CSS. Supports: MacOS, Windows in progress.\n* [fyne](https://github.com/fyne-io/fyne) - Cross platform native GUIs designed for Go, rendered using EFL. Supports: Linux, macOS, Windows.\n* [go-astilectron](https://github.com/asticode/go-astilectron) - Build cross platform GUI apps with GO and HTML/JS/CSS (powered by Electron).\n* [go-gtk](http://mattn.github.io/go-gtk/) - Go bindings for GTK.\n* [go-sciter](https://github.com/sciter-sdk/go-sciter) - Go bindings for Sciter: the Embeddable HTML/CSS/script engine for modern desktop UI development. Cross platform.\n* [gotk3](https://github.com/gotk3/gotk3) - Go bindings for GTK3.\n* [gowd](https://github.com/dtylman/gowd) - Rapid and simple desktop UI development with GO, HTML, CSS and NW.js. Cross platform.\n* [qt](https://github.com/therecipe/qt) - Qt binding for Go (support for Windows / macOS / Linux / Android / iOS / Sailfish OS / Raspberry Pi).\n* [ui](https://github.com/andlabs/ui) - Platform-native GUI library for Go. Cross platform.\n* [walk](https://github.com/lxn/walk) - Windows application library kit for Go.\n* [webview](https://github.com/zserge/webview) - Cross-platform webview window with simple two-way JavaScript bindings (Windows / macOS / Linux).\n\n*Interaction*\n\n* [gosx-notifier](https://github.com/deckarep/gosx-notifier) - OSX Desktop Notifications library for Go.\n* [robotgo](https://github.com/go-vgo/robotgo) - Go Native cross-platform GUI system automation. Control the mouse, keyboard and other.\n* [systray](https://github.com/getlantern/systray) - Cross platform Go library to place an icon and menu in the notification area.\n* [trayhost](https://github.com/shurcooL/trayhost) - Cross-platform Go library to place an icon in the host operating system's taskbar.\n\n\n## Hardware\n\n*Libraries, tools, and tutorials for interacting with hardware.*\n\nSee [go-hardware](https://github.com/rakyll/go-hardware) for a comprehensive list.\n\n## Images\n\n*Libraries for manipulating images.*\n\n* [bild](https://github.com/anthonynsimon/bild) - Collection of image processing algorithms in pure Go.\n* [bimg](https://github.com/h2non/bimg) - Small package for fast and efficient image processing using libvips.\n* [cameron](https://github.com/aofei/cameron) - An avatar generator for Go.\n* [geopattern](https://github.com/pravj/geopattern) - Create beautiful generative image patterns from a string.\n* [gg](https://github.com/fogleman/gg) - 2D rendering in pure Go.\n* [gift](https://github.com/disintegration/gift) - Package of image processing filters.\n* [go-cairo](https://github.com/ungerik/go-cairo) - Go binding for the cairo graphics library.\n* [go-gd](https://github.com/bolknote/go-gd) - Go binding for GD library.\n* [go-nude](https://github.com/koyachi/go-nude) - Nudity detection with Go.\n* [go-opencv](https://github.com/lazywei/go-opencv) - Go bindings for OpenCV.\n* [go-webcolors](https://github.com/jyotiska/go-webcolors) - Port of webcolors library from Python to Go.\n* [gocv](https://github.com/hybridgroup/gocv) - Go package for computer vision using OpenCV 3.3+.\n* [goimagehash](https://github.com/corona10/goimagehash) - Go Perceptual image hashing package.\n* [govatar](https://github.com/o1egl/govatar) - Library and CMD tool for generating funny avatars.\n* [image2ascii](https://github.com/qeesung/image2ascii) - Convert image to ASCII.\n* [imagick](https://github.com/gographics/imagick) - Go binding to ImageMagick's MagickWand C API.\n* [imaginary](https://github.com/h2non/imaginary) - Fast and simple HTTP microservice for image resizing.\n* [imaging](https://github.com/disintegration/imaging) - Simple Go image processing package.\n* [img](https://github.com/hawx/img) - Selection of image manipulation tools.\n* [ln](https://github.com/fogleman/ln) - 3D line art rendering in Go.\n* [mergi](https://github.com/noelyahan/mergi) - Tool \u0026 Go library for image manipulation (Merge, Crop, Resize, Watermark, Animate).\n* [mort](https://github.com/aldor007/mort) - Storage and image processing server written in Go.\n* [mpo](https://github.com/donatj/mpo) - Decoder and conversion tool for MPO 3D Photos.\n* [picfit](https://github.com/thoas/picfit) - An image resizing server written in Go.\n* [pt](https://github.com/fogleman/pt) - Path tracing engine written in Go.\n* [resize](https://github.com/nfnt/resize) - Image resizing for Go with common interpolation methods.\n* [rez](https://github.com/bamiaux/rez) - Image resizing in pure Go and SIMD.\n* [smartcrop](https://github.com/muesli/smartcrop) - Finds good crops for arbitrary images and crop sizes.\n* [steganography](https://github.com/auyer/steganography) - Pure Go Library for LSB steganography.\n* [svgo](https://github.com/ajstarks/svgo) - Go Language Library for SVG generation.\n* [tga](https://github.com/ftrvxmtrx/tga) - Package tga is a TARGA image format decoder/encoder.\n\n## IoT (Internet of Things)\n\n*Libraries for programming devices of the IoT.*\n\n* [connectordb](https://github.com/connectordb/connectordb) - Open-Source Platform for Quantified Self \u0026 IoT.\n* [devices](https://github.com/goiot/devices) - Suite of libraries for IoT devices, experimental for x/exp/io.\n* [eywa](https://github.com/xcodersun/eywa) - Project Eywa is essentially a connection manager that keeps track of connected devices.\n* [flogo](https://github.com/tibcosoftware/flogo) - Project Flogo is an Open Source Framework for IoT Edge Apps \u0026 Integration.\n* [gatt](https://github.com/paypal/gatt) - Gatt is a Go package for building Bluetooth Low Energy peripherals.\n* [gobot](https://github.com/hybridgroup/gobot/) - Gobot is a framework for robotics, physical computing, and the Internet of Things.\n* [huego](https://github.com/amimof/huego) - An extensive Philips Hue client library for Go.\n* [iot](https://github.com/vaelen/iot/) - IoT is a simple framework for implementing a Google IoT Core device.\n* [mainflux](https://github.com/Mainflux/mainflux) - Industrial IoT Messaging and Device Management Server.\n* [periph](https://periph.io/) - Peripherals I/O to interface with low-level board facilities.\n* [sensorbee](https://github.com/sensorbee/sensorbee) - Lightweight stream processing engine for IoT.\n\n## Logging\n\n*Libraries for generating and working with log files.*\n\n* [distillog](https://github.com/amoghe/distillog) - distilled levelled logging (think of it as stdlib + log levels).\n* [glg](https://github.com/kpango/glg) - glg is simple and fast leveled logging library for Go.\n* [glog](https://github.com/golang/glog) - Leveled execution logs for Go.\n* [go-cronowriter](https://github.com/utahta/go-cronowriter) - Simple writer that rotate log files automatically based on current date and time, like cronolog.\n* [go-log](https://github.com/subchen/go-log) - Simple and configurable Logging in Go, with level, formatters and writers.\n* [go-log](https://github.com/siddontang/go-log) - Log lib supports level and multi handlers.\n* [go-log](https://github.com/ian-kent/go-log) - Log4j implementation in Go.\n* [go-logger](https://github.com/apsdehal/go-logger) - Simple logger of Go Programs, with level handlers.\n* [gologger](https://github.com/sadlil/gologger) - Simple easy to use log lib for go, logs in Colored Console, Simple Console, File or Elasticsearch.\n* [gomol](https://github.com/aphistic/gomol) - Multiple-output, structured logging for Go with extensible logging outputs.\n* [gone/log](https://github.com/One-com/gone/tree/master/log) - Fast, extendable, full-featured, std-lib source compatible log library.\n* [journald](https://github.com/ssgreg/journald) - Go implementation of systemd Journal's native API for logging.\n* [log](https://github.com/apex/log) - Structured logging package for Go.\n* [log](https://github.com/go-playground/log) - Simple, configurable and scalable Structured Logging for Go.\n* [log](https://github.com/teris-io/log) - Structured log interface for Go cleanly separates logging facade from its implementation.\n* [log-voyage](https://github.com/firstrow/logvoyage) - Full-featured logging saas written in golang.\n* [log15](https://github.com/inconshreveable/log15) - Simple, powerful logging for Go.\n* [logdump](https://github.com/ewwwwwqm/logdump) - Package for multi-level logging.\n* [logex](https://github.com/chzyer/logex) - Golang log lib, supports tracking and level, wrap by standard log lib.\n* [logger](https://github.com/azer/logger) - Minimalistic logging library for Go.\n* [logmatic](https://github.com/borderstech/logmatic) - Colorized logger for Golang with dynamic log level configuration.\n* [logo](https://github.com/mbndr/logo) - Golang logger to different configurable writers.\n* [logrus](https://github.com/Sirupsen/logrus) - Structured logger for Go.\n* [logrusly](https://github.com/sebest/logrusly) - [logrus](https://github.com/sirupsen/logrus) plug-in to send errors to a [Loggly](https://www.loggly.com/).\n* [logutils](https://github.com/hashicorp/logutils) - Utilities for slightly better logging in Go (Golang) extending the standard logger.\n* [logxi](https://github.com/mgutz/logxi) - 12-factor app logger that is fast and makes you happy.\n* [lumberjack](https://github.com/natefinch/lumberjack) - Simple rolling logger, implements io.WriteCloser.\n* [mlog](https://github.com/jbrodriguez/mlog) - Simple logging module for go, with 5 levels, an optional rotating logfile feature and stdout/stderr output.\n* [onelog](https://github.com/francoispqt/onelog) - Onelog is a dead simple but very efficient JSON logger. It is the fastest JSON logger out there in all scenario. Also, it is one of the logger with the lowest allocation.\n* [ozzo-log](https://github.com/go-ozzo/ozzo-log) - High performance logging supporting log severity, categorization, and filtering. Can send filtered log messages to various targets (e.g. console, network, mail).\n* [seelog](https://github.com/cihub/seelog) - Logging functionality with flexible dispatching, filtering, and formatting.\n* [spew](https://github.com/davecgh/go-spew) - Implements a deep pretty printer for Go data structures to aid in debugging.\n* [stdlog](https://github.com/alexcesaro/log) - Stdlog is an object-oriented library providing leveled logging. It is very useful for cron jobs.\n* [tail](https://github.com/hpcloud/tail) - Go package striving to emulate the features of the BSD tail program.\n* [xlog](https://github.com/xfxdev/xlog) - Plugin architecture and flexible log system for Go, with level ctrl, multiple log target and custom log format.\n* [xlog](https://github.com/rs/xlog) - Structured logger for `net/context` aware HTTP handlers with flexible dispatching.\n* [zap](https://github.com/uber-go/zap) - Fast, structured, leveled logging in Go.\n* [zerolog](https://github.com/rs/zerolog) - Zero-allocation JSON logger.\n\n## Machine Learning\n\n*Libraries for Machine Learning.*\n\n* [bayesian](https://github.com/jbrukh/bayesian) - Naive Bayesian Classification for Golang.\n* [CloudForest](https://github.com/ryanbressler/CloudForest) - Fast, flexible, multi-threaded ensembles of decision trees for machine learning in pure Go.\n* [eaopt](https://github.com/MaxHalford/eaopt) - An evolutionary optimization library.\n* [fonet](https://github.com/Fontinalis/fonet) - A Deep Neural Network library written in Go.\n* [go-cluster](https://github.com/e-XpertSolutions/go-cluster) - Go implementation of the k-modes and k-prototypes clustering algorithms.\n* [go-deep](https://github.com/patrikeh/go-deep) - A feature-rich neural network library in Go.\n* [go-fann](https://github.com/white-pony/go-fann) - Go bindings for Fast Artificial Neural Networks(FANN) library.\n* [go-galib](https://github.com/thoj/go-galib) - Genetic Algorithms library written in Go / golang.\n* [go-pr](https://github.com/daviddengcn/go-pr) - Pattern recognition package in Go lang.\n* [gobrain](https://github.com/goml/gobrain) - Neural Networks written in go.\n* [godist](https://github.com/e-dard/godist) - Various probability distributions, and associated methods.\n* [goga](https://github.com/tomcraven/goga) - Genetic algorithm library for Go.\n* [GoLearn](https://github.com/sjwhitworth/golearn) - General Machine Learning library for Go.\n* [golinear](https://github.com/danieldk/golinear) - liblinear bindings for Go.\n* [GoMind](https://github.com/surenderthakran/gomind) - A simplistic Neural Network Library in Go.\n* [goml](https://github.com/cdipaolo/goml) - On-line Machine Learning in Go.\n* [goRecommend](https://github.com/timkaye11/goRecommend) - Recommendation Algorithms library written in Go.\n* [gorgonia](https://github.com/chewxy/gorgonia) - graph-based computational library like Theano for Go that provides primitives for building various machine learning and neural network algorithms.\n* [goscore](https://github.com/asafschers/goscore) - Go Scoring API for PMML.\n* [gosseract](https://github.com/otiai10/gosseract) - Go package for OCR (Optical Character Recognition), by using Tesseract C++ library.\n* [libsvm](https://github.com/datastream/libsvm) - libsvm golang version derived work based on LIBSVM 3.14.\n* [mlgo](https://github.com/NullHypothesis/mlgo) - This project aims to provide minimalistic machine learning algorithms in Go.\n* [neat](https://github.com/jinyeom/neat) - Plug-and-play, parallel Go framework for NeuroEvolution of Augmenting Topologies (NEAT).\n* [neural-go](https://github.com/schuyler/neural-go) - Multilayer perceptron network implemented in Go, with training via backpropagation.\n* [probab](https://github.com/ThePaw/probab) - Probability distribution functions. Bayesian inference. Written in pure Go.\n* [regommend](https://github.com/muesli/regommend) - Recommendation \u0026 collaborative filtering engine.\n* [shield](https://github.com/eaigner/shield) - Bayesian text classifier with flexible tokenizers and storage backends for Go.\n* [tfgo](https://github.com/galeone/tfgo) - Easy to use Tensorflow bindings: simplifies the usage of the official Tensorflow Go bindings. Define computational graphs in Go, load and execute models trained in Python.\n* [Varis](https://github.com/Xamber/Varis) - Golang Neural Network.\n\n## Messaging\n\n*Libraries that implement messaging systems.*\n\n* [APNs2](https://github.com/sideshow/apns2) - HTTP/2 Apple Push Notification provider for Go ‚Äî Send push notifications to iOS, tvOS, Safari and OSX apps.\n* [Benthos](https://github.com/Jeffail/benthos) - A message streaming bridge between a range of protocols.\n* [Centrifugo](https://github.com/centrifugal/centrifugo) - Real-time messaging (Websockets or SockJS) server in Go.\n* [dbus](https://github.com/godbus/dbus) - Native Go bindings for D-Bus.\n* [drone-line](https://github.com/appleboy/drone-line) - Sending [Line](https://at.line.me/en) notifications using a binary, docker or Drone CI.\n* [emitter](https://github.com/olebedev/emitter) - Emits events using Go way, with wildcard, predicates, cancellation possibilities and many other good wins.\n* [event](https://github.com/agoalofalife/event) - Implementation of the pattern observer.\n* [EventBus](https://github.com/asaskevich/EventBus) - The lightweight event bus with async compatibility.\n* [gaurun-client](https://github.com/osamingo/gaurun-client) - Gaurun Client written in Go.\n* [Glue](https://github.com/desertbit/glue) - Robust Go and Javascript Socket Library (Alternative to Socket.io).\n* [go-notify](https://github.com/TheCreeper/go-notify) - Native implementation of the freedesktop notification spec.\n* [go-nsq](https://github.com/nsqio/go-nsq) - the official Go package for NSQ.\n* [go-socket.io](https://github.com/googollee/go-socket.io) - socket.io library for golang, a realtime application framework.\n* [go-vitotrol](https://github.com/maxatome/go-vitotrol) - Client library to Viessmann Vitotrol web service.\n* [Gollum](https://github.com/trivago/gollum) - A n:m multiplexer that gathers messages from different sources and broadcasts them to a set of destinations.\n* [golongpoll](https://github.com/jcuga/golongpoll) - HTTP longpoll server library that makes web pub-sub simple.\n* [goose](https://github.com/ian-kent/goose) - Server Sent Events in Go.\n* [gopush-cluster](https://github.com/Terry-Mao/gopush-cluster) - gopush-cluster is a go push server cluster.\n* [gorush](https://github.com/appleboy/gorush) - Push notification server using [APNs2](https://github.com/sideshow/apns2) and google [GCM](https://github.com/google/go-gcm).\n* [guble](https://github.com/smancke/guble) - Messaging server using push notifications (Google Firebase Cloud Messaging, Apple Push Notification services, SMS) as well as websockets, a REST API, featuring distributed operation and message-persistence.\n* [hub](https://github.com/leandro-lugaresi/hub) - A Message/Event Hub for Go applications, using publish/subscribe pattern with support for alias like rabbitMQ exchanges.\n* [machinery](https://github.com/RichardKnop/machinery) - Asynchronous task queue/job queue based on distributed message passing.\n* [mangos](https://github.com/go-mangos/mangos) - Pure go implementation of the Nanomsg (\"Scalable Protocols\") with transport interoperability.\n* [melody](https://github.com/olahol/melody) - Minimalist framework for dealing with websocket sessions, includes broadcasting and automatic ping/pong handling.\n* [Mercure](https://github.com/dunglas/mercure) - Server and library to dispatch server-sent updates using the Mercure protocol (built on top of Server-Sent Events).\n* [messagebus](https://github.com/vardius/message-bus) - messagebus is a Go simple async message bus, perfect for using as event bus when doing event sourcing, CQRS, DDD.\n* [NATS Go Client](https://github.com/nats-io/nats) - Lightweight and high performance publish-subscribe and distributed queueing messaging system - this is the Go library.\n* [nsq-event-bus](https://github.com/rafaeljesus/nsq-event-bus) - A tiny wrapper around NSQ topic and channel.\n* [oplog](https://github.com/dailymotion/oplog) - Generic oplog/replication system for REST APIs.\n* [pubsub](https://github.com/tuxychandru/pubsub) - Simple pubsub package for go.\n* [rabbus](https://github.com/rafaeljesus/rabbus) - A tiny wrapper over amqp exchanges and queues.\n* [rabtap](https://github.com/jandelgado/rabtap) - RabbitMQ swiss army knife cli app.\n* [RapidMQ](https://github.com/sybrexsys/RapidMQ) - RapidMQ is a lightweight and reliable library for managing of the local messages queue.\n* [sarama](https://github.com/Shopify/sarama) - Go library for Apache Kafka.\n* [Uniqush-Push](https://github.com/uniqush/uniqush-push) - Redis backed unified push service for server-side notifications to mobile devices.\n* [zmq4](https://github.com/pebbe/zmq4) - Go interface to ZeroMQ version 4. Also available for [version 3](https://github.com/pebbe/zmq3) and [version 2](https://github.com/pebbe/zmq2).\n\n## Miscellaneous\n\n*These libraries were placed here because none of the other categories seemed to fit.*\n\n* [alice](https://github.com/magic003/alice) - Additive dependency injection container for Golang.\n* [anagent](https://github.com/mudler/anagent) - Minimalistic, pluggable Golang evloop/timer handler with dependency-injection.\n* [antch](https://github.com/antchfx/antch) - A fast, powerful and extensible web crawling \u0026 scraping framework.\n* [archiver](https://github.com/mholt/archiver) - Library and command for making and extracting .zip and .tar.gz archives.\n* [autoflags](https://github.com/artyom/autoflags) - Go package to automatically define command line flags from struct fields.\n* [avgRating](https://github.com/kirillDanshin/avgRating) - Calculate average score and rating based on Wilson Score Equation.\n* [banner](https://github.com/dimiro1/banner) - Add beautiful banners into your Go applications.\n* [base64Captcha](https://github.com/mojocn/base64Captcha) - Base64captch supports digit, number, alphabet, arithmetic, audio and digit-alphabet captcha.\n* [battery](https://github.com/distatus/battery) - Cross-platform, normalized battery information library.\n* [bitio](https://github.com/icza/bitio) - Highly optimized bit-level Reader and Writer for Go.\n* [browscap_go](https://github.com/digitalcrab/browscap_go) - GoLang Library for [Browser Capabilities Project](http://browscap.org/).\n* [captcha](https://github.com/steambap/captcha) - Package captcha provides an easy to use, unopinionated API for captcha generation.\n* [conv](https://github.com/cstockton/go-conv) - Package conv provides fast and intuitive conversions across Go types.\n* [datacounter](https://github.com/miolini/datacounter) - Go counters for readers/writer/http.ResponseWriter.\n* [errors](https://github.com/pkg/errors) - Package that provides simple error handling primitives.\n* [errorx](https://github.com/joomcode/errorx) - A feature rich error package with stack traces, composition of errors and more.\n* [ffmt](https://github.com/go-ffmt/ffmt) - Beautify data display for Humans.\n* [ghorg](https://github.com/gabrie30/ghorg) - Clone all repos from a GitHub org into a single directory.\n* [go-chat-bot](https://github.com/go-chat-bot/bot) - IRC, Slack \u0026 Telegram bot written in Go.\n* [go-commons-pool](https://github.com/jolestar/go-commons-pool) - Generic object pool for Golang.\n* [go-multierror](https://github.com/hashicorp/go-multierror) - Go (golang) package for representing a list of errors as a single error.\n* [go-openapi](https://github.com/go-openapi) - Collection of packages to parse and utilize open-api schemas.\n* [go-resiliency](https://github.com/eapache/go-resiliency) - Resiliency patterns for golang.\n* [go-sarah](https://github.com/oklahomer/go-sarah) - Framework to build bot for desired chat services including LINE, Slack, Gitter and more.\n* [go-unarr](https://github.com/gen2brain/go-unarr) - Decompression library for RAR, TAR, ZIP and 7z archives.\n* [gofakeit](https://github.com/brianvoe/gofakeit) - Random data generator written in go.\n* [goid](https://github.com/jakehl/goid) - Generate and Parse RFC4122 compliant V4 UUIDs.\n* [gommit](https://github.com/antham/gommit) - Analyze git commit messages to ensure they follow defined patterns.\n* [gopsutil](https://github.com/shirou/gopsutil) - Cross-platform library for retrieving process and system utilization(CPU, Memory, Disks, etc).\n* [gosh](https://github.com/osamingo/gosh) - Provide Go Statistics Handler, Struct, Measure Method.\n* [gosms](https://github.com/haxpax/gosms) - Your own local SMS gateway in Go that can be used to send SMS.\n* [gountries](https://github.com/pariz/gountries) - Package that exposes country and subdivision data.\n* [hanu](https://github.com/sbstjn/hanu) - Framework for writing Slack bots.\n* [health](https://github.com/dimiro1/health) - Easy to use, extensible health check library.\n* [healthcheck](https://github.com/etherlabsio/healthcheck) - An opinionated and concurrent health-check HTTP handler for RESTful services.\n* [hostutils](https://github.com/Wing924/hostutils) - A golang library for packing and unpacking FQDNs list.\n* [indigo](https://github.com/osamingo/indigo) - Distributed unique ID generator of using Sonyflake and encoded by Base58.\n* [jobs](https://github.com/albrow/jobs) - Persistent and flexible background jobs library.\n* [lk](https://github.com/hyperboloide/lk) - A simple licensing library for golang.\n* [llvm](https://github.com/llir/llvm) - Library for interacting with LLVM IR in pure Go.\n* [margelet](https://github.com/zhulik/margelet) - Framework for building Telegram bots.\n* [morse](https://github.com/alwindoss/morse) - Library to convert to and from morse code.\n* [pdfgen](https://github.com/hyperboloide/pdfgen) - HTTP service to generate PDF from Json requests.\n* [persian](https://github.com/mavihq/persian) - Some utilities for Persian language in go.\n* [sandid](https://github.com/aofei/sandid) - Every grain of sand on earth has its own ID.\n* [secdl](https://github.com/xor-gate/secdl) - Lighttpd ModSecDownload algorithm ported to go to secure download urls.\n* [shellwords](https://github.com/Wing924/shellwords) - A Golang library to manipulate strings according to the word parsing rules of the UNIX Bourne shell.\n* [shortid](https://github.com/teris-io/shortid) - Distributed generation of super short, unique, non-sequential, URL friendly IDs.\n* [slacker](https://github.com/shomali11/slacker) - Easy to use framework to create Slack bots.\n* [stats](https://github.com/go-playground/stats) - Monitors Go MemStats + System stats such as Memory, Swap and CPU and sends via UDP anywhere you want for logging etc...\n* [strutil](https://github.com/ozgio/strutil) - String utilities.\n* [turtle](https://github.com/hackebrot/turtle) - Emojis for Go.\n* [url-shortener](https://github.com/pantrif/url-shortener) - A modern, powerful, and robust URL shortener microservice with mysql support.\n* [uuid](https://github.com/agext/uuid) - Generate, encode, and decode UUIDs v1 with fast or cryptographic-quality random node identifier.\n* [uuid](https://github.com/gofrs/uuid) - Implementation of Universally Unique Identifier (UUID). Supports both creation and parsing of UUIDs. Actively maintained fork of satori uuid.\n* [VarHandler](https://github.com/azr/generators/tree/master/varhandler) - Generate boilerplate http input and output handling.\n* [werr](https://github.com/txgruppi/werr) - Error Wrapper creates an wrapper for the error type in Go which captures the File, Line and Stack of where it was called.\n* [wuid](https://github.com/edwingeng/wuid) - An extremely fast unique number generator, 10-135 times faster than UUID.\n* [xdg](https://github.com/rkoesters/xdg) - FreeDesktop.org (xdg) Specs implemented in Go.\n* [xkg](https://github.com/go-xkg/xkg) - X Keyboard Grabber.\n* [xstrings](https://github.com/huandu/xstrings) - Collection of useful string functions ported from other languages.\n\n## Natural Language Processing\n\n*Libraries for working with human languages.*\n\n* [getlang](https://github.com/rylans/getlang) - Fast natural language detection package.\n* [go-eco](https://github.com/ThePaw/go-eco) - Similarity, dissimilarity and distance matrices; diversity, equitability and inequality measures; species richness estimators; coenocline models.\n* [go-i18n](https://github.com/nicksnyder/go-i18n/) - Package and an accompanying tool to work with localized text.\n* [go-mystem](https://github.com/dveselov/mystem) - CGo bindings to Yandex.Mystem - russian morphology analyzer.\n* [go-nlp](https://github.com/nuance/go-nlp) - Utilities for working with discrete probability distributions and other tools useful for doing NLP work.\n* [go-pinyin](https://github.com/mozillazg/go-pinyin) - CN Hanzi to Hanyu Pinyin converter.\n* [go-stem](https://github.com/agonopol/go-stem) - Implementation of the porter stemming algorithm.\n* [go-unidecode](https://github.com/mozillazg/go-unidecode) - ASCII transliterations of Unicode text.\n* [go2vec](https://github.com/danieldk/go2vec) - Reader and utility functions for word2vec embeddings.\n* [gojieba](https://github.com/yanyiwu/gojieba) - This is a Go implementation of [jieba](https://github.com/fxsjy/jieba) which a Chinese word splitting algorithm.\n* [golibstemmer](https://github.com/rjohnsondev/golibstemmer) - Go bindings for the snowball libstemmer library including porter 2.\n* [gotokenizer](https://github.com/xujiajun/gotokenizer) - A tokenizer based on the dictionary and Bigram language models for Golang. (Now only support chinese segmentation)\n* [gounidecode](https://github.com/fiam/gounidecode) - Unicode transliterator (also known as unidecode) for Go.\n* [gse](https://github.com/go-ego/gse) - Go efficient text segmentation; support english, chinese, japanese and other.\n* [icu](https://github.com/goodsign/icu) - Cgo binding for icu4c C library detection and conversion functions. Guaranteed compatibility with version 50.1.\n* [kagome](https://github.com/ikawaha/kagome) - JP morphological analyzer written in pure Go.\n* [libtextcat](https://github.com/goodsign/libtextcat) - Cgo binding for libtextcat C library. Guaranteed compatibility with version 2.2.\n* [MMSEGO](https://github.com/awsong/MMSEGO) - This is a GO implementation of [MMSEG](http://technology.chtsai.org/mmseg/) which a Chinese word splitting algorithm.\n* [nlp](https://github.com/Shixzie/nlp) - Extract values from strings and fill your structs with nlp.\n* [nlp](https://github.com/james-bowman/nlp) - Go Natural Language Processing library supporting LSA (Latent Semantic Analysis).\n* [paicehusk](https://github.com/rookii/paicehusk) - Golang implementation of the Paice/Husk Stemming Algorithm.\n* [petrovich](https://github.com/striker2000/petrovich) - Petrovich is the library which inflects Russian names to given grammatical case.\n* [porter](https://github.com/a2800276/porter) - This is a fairly straightforward port of Martin Porter's C implementation of the Porter stemming algorithm.\n* [porter2](https://github.com/zhenjl/porter2) - Really fast Porter 2 stemmer.\n* [prose](https://github.com/jdkato/prose) - Library for text processing that supports tokenization, part-of-speech tagging, named-entity extraction, and more.\n* [RAKE.go](https://github.com/Obaied/RAKE.go) - Go port of the Rapid Automatic Keyword Extraction Algorithm (RAKE).\n* [segment](https://github.com/blevesearch/segment) - Go library for performing Unicode Text Segmentation as described in [Unicode Standard Annex #29](http://www.unicode.org/reports/tr29/)\n* [sentences](https://github.com/neurosnap/sentences) - Sentence tokenizer:  converts text into a list of sentences.\n* [shamoji](https://github.com/osamingo/shamoji) - The shamoji is word filtering package written in Go.\n* [snowball](https://github.com/goodsign/snowball) - Snowball stemmer port (cgo wrapper) for Go. Provides word stem extraction functionality [Snowball native](http://snowball.tartarus.org/).\n* [stemmer](https://github.com/dchest/stemmer) - Stemmer packages for Go programming language. Includes English and German stemmers.\n* [textcat](https://github.com/pebbe/textcat) - Go package for n-gram based text categorization, with support for utf-8 and raw text.\n* [whatlanggo](https://github.com/abadojack/whatlanggo) - Natural language detection package for Go. Supports 84 languages and 24 scripts (writing systems e.g. Latin, Cyrillic, etc).\n* [when](https://github.com/olebedev/when) - Natural EN and RU language date/time parser with pluggable rules.\n\n## Networking\n\n*Libraries for working with various layers of the network.*\n\n* [arp](https://github.com/mdlayher/arp) - Package arp implements the ARP protocol, as described in RFC 826.\n* [buffstreams](https://github.com/stabbycutyou/buffstreams) - Streaming protocolbuffer data over TCP made easy.\n* [canopus](https://github.com/zubairhamed/canopus) - CoAP Client/Server implementation (RFC 7252).\n* [cidranger](https://github.com/yl2chen/cidranger) - Fast IP to CIDR lookup for Go.\n* [dhcp6](https://github.com/mdlayher/dhcp6) - Package dhcp6 implements a DHCPv6 server, as described in RFC 3315.\n* [dns](https://github.com/miekg/dns) - Go library for working with DNS.\n* [ether](https://github.com/songgao/ether) - Cross-platform Go package for sending and receiving ethernet frames.\n* [ethernet](https://github.com/mdlayher/ethernet) - Package ethernet implements marshaling and unmarshaling of IEEE 802.3 Ethernet II frames and IEEE 802.1Q VLAN tags.\n* [fasthttp](https://github.com/valyala/fasthttp) - Package fasthttp is a fast HTTP implementation for Go, up to 10 times faster than net/http.\n* [fortio](https://github.com/fortio/fortio) - Load testing library and command line tool, advanced echo server and web UI. Allows to specify a set query-per-second load and record latency histograms and other useful stats and graph them. Tcp, Http, gRPC.\n* [ftp](https://github.com/jlaffaye/ftp) - Package ftp implements a FTP client as described in [RFC 959](http://tools.ietf.org/html/rfc959).\n* [gNxI](https://github.com/google/gnxi) - A collection of tools for Network Management that use the gNMI and gNOI protocols.\n* [go-getter](https://github.com/hashicorp/go-getter) - Go library for downloading files or directories from various sources using a URL.\n* [go-stun](https://github.com/ccding/go-stun) - Go implementation of the STUN client (RFC 3489 and RFC 5389).\n* [gobgp](https://github.com/osrg/gobgp) - BGP implemented in the Go Programming Language.\n* [golibwireshark](https://github.com/sunwxg/golibwireshark) - Package golibwireshark use libwireshark library to decode pcap file and analyse dissection data.\n* [gopacket](https://github.com/google/gopacket) - Go library for packet processing with libpcap bindings.\n* [gopcap](https://github.com/akrennmair/gopcap) - Go wrapper for libpcap.\n* [goshark](https://github.com/sunwxg/goshark) - Package goshark use tshark to decode IP packet and create data struct to analyse packet.\n* [gosnmp](https://github.com/soniah/gosnmp) - Native Go library for performing SNMP actions.\n* [gotcp](https://github.com/gansidui/gotcp) - Go package for quickly writing tcp applications.\n* [grab](https://github.com/cavaliercoder/grab) - Go package for managing file downloads.\n* [graval](https://github.com/koofr/graval) - Experimental FTP server framework.\n* [HTTPLab](https://github.com/gchaincl/httplab) - HTTPLabs let you inspect HTTP requests and forge responses.\n* [jazigo](https://github.com/udhos/jazigo) - Jazigo is a tool written in Go for retrieving configuration for multiple network devices.\n* [kcp-go](https://github.com/xtaci/kcp-go) - KCP - Fast and Reliable ARQ Protocol.\n* [kcptun](https://github.com/xtaci/kcptun) - Extremely simple \u0026 fast udp tunnel based on KCP protocol.\n* [lhttp](https://github.com/fanux/lhttp) - Powerful websocket framework, build your IM server more easily.\n* [linkio](https://github.com/ian-kent/linkio) - Network link speed simulation for Reader/Writer interfaces.\n* [llb](https://github.com/kirillDanshin/llb) - It's a very simple but quick backend for proxy servers. Can be useful for fast redirection to predefined domain with zero memory allocation and fast response.\n* [mdns](https://github.com/hashicorp/mdns) - Simple mDNS (Multicast DNS) client/server library in Golang.\n* [mqttPaho](https://eclipse.org/paho/clients/golang/) - The Paho Go Client provides an MQTT client library for connection to MQTT brokers via TCP, TLS or WebSockets.\n* [NFF-Go](https://github.com/intel-go/nff-go) - Framework for rapid development of performant network functions for cloud and bare-metal (former YANFF).\n* [packet](https://github.com/aerogo/packet) - Send packets over TCP and UDP. It can buffer messages and hot-swap connections if needed.\n* [peerdiscovery](https://github.com/schollz/peerdiscovery) - Pure Go library for cross-platform local peer discovery using UDP multicast.\n* [portproxy](https://github.com/aybabtme/portproxy) - Simple TCP proxy which adds CORS support to API's which don't support it.\n* [publicip](https://github.com/polera/publicip) - Package publicip returns your public facing IPv4 address (internet egress).\n* [quic-go](https://github.com/lucas-clemente/quic-go) - An implementation of the QUIC protocol in pure Go.\n* [raw](https://github.com/mdlayher/raw) - Package raw enables reading and writing data at the device driver level for a network interface.\n* [sftp](https://github.com/pkg/sftp) - Package sftp implements the SSH File Transfer Protocol as described in https://filezilla-project.org/specs/draft-ietf-secsh-filexfer-02.txt.\n* [ssh](https://github.com/gliderlabs/ssh) - Higher-level API for building SSH servers (wraps crypto/ssh).\n* [sslb](https://github.com/eduardonunesp/sslb) - It's a Super Simples Load Balancer, just a little project to achieve some kind of performance.\n* [stun](https://github.com/go-rtc/stun) - Go implementation of RFC 5389 STUN protocol.\n* [tcp_server](https://github.com/firstrow/tcp_server) - Go library for building tcp servers faster.\n* [tspool](https://github.com/two/tspool) - A TCP Library use worker pool to improve performance and protect your server. \n* [utp](https://github.com/anacrolix/utp) - Go uTP micro transport protocol implementation.\n* [water](https://github.com/songgao/water) - Simple TUN/TAP library.\n* [winrm](https://github.com/masterzen/winrm) - Go WinRM client to remotely execute commands on Windows machines.\n* [xtcp](https://github.com/xfxdev/xtcp) - TCP Server Framework with simultaneous full duplex communication,graceful shutdown,custom protocol.\n\n### HTTP Clients\n\n*Libraries for making HTTP requests.*\n\n* [gentleman](https://github.com/h2non/gentleman) - Full-featured plugin-driven HTTP client library.\n* [goreq](https://github.com/smallnest/goreq) - Enhanced simplified HTTP client based on gorequest.\n* [grequests](https://github.com/levigross/grequests) - A Go \"clone\" of the great and famous Requests library.\n* [heimdall](https://github.com/gojektech/heimdall) - An enchanced http client with retry and hystrix capabilities.\n* [pester](https://github.com/sethgrid/pester) - Go HTTP client calls with retries, backoff, and concurrency.\n* [rq](https://github.com/ddo/rq) - A nicer interface for golang stdlib HTTP client.\n* [sling](https://github.com/dghubble/sling) - Sling is a Go HTTP client library for creating and sending API requests.\n\n## OpenGL\n\n*Libraries for using OpenGL in Go.*\n\n* [gl](https://github.com/go-gl/gl) - Go bindings for OpenGL (generated via glow).\n* [glfw](https://github.com/go-gl/glfw) - Go bindings for GLFW 3.\n* [goxjs/gl](https://github.com/goxjs/gl) - Go cross-platform OpenGL bindings (OS X, Linux, Windows, browsers, iOS, Android).\n* [goxjs/glfw](https://github.com/goxjs/glfw) - Go cross-platform glfw library for creating an OpenGL context and receiving events.\n* [mathgl](https://github.com/go-gl/mathgl) - Pure Go math package specialized for 3D math, with inspiration from GLM.\n\n## ORM\n\n*Libraries that implement Object-Relational Mapping or datamapping techniques.*\n\n* [beego orm](https://github.com/astaxie/beego/tree/master/orm) - Powerful orm framework for go. Support: pq/mysql/sqlite3.\n* [go-pg](https://github.com/go-pg/pg) - PostgreSQL ORM with focus on PostgreSQL specific features and performance.\n* [go-queryset](https://github.com/jirfag/go-queryset) - 100% type-safe ORM with code generation and MySQL, PostgreSQL, Sqlite3, SQL Server support based on GORM.\n* [go-sqlbuilder](https://github.com/huandu/go-sqlbuilder) - A flexible and powerful SQL string builder library plus a zero-config ORM.\n* [go-store](https://github.com/gosuri/go-store) - Simple and fast Redis backed key-value store library for Go.\n* [gomodel](https://github.com/cosiner/gomodel) - Lightweight, fast, orm-like library helps interactive with database.\n* [GORM](https://github.com/jinzhu/gorm) - The fantastic ORM library for Golang, aims to be developer friendly.\n* [gorp](https://github.com/go-gorp/gorp) - Go Relational Persistence, ORM-ish library for Go.\n* [grimoire](https://github.com/Fs02/grimoire) - Grimoire is a database access layer and validation for golang. (Support: MySQL, PostgreSQL and SQLite3).\n* [lore](https://github.com/abrahambotros/lore) - Simple and lightweight pseudo-ORM/pseudo-struct-mapping environment for Go.\n* [Marlow](https://github.com/dadleyy/marlow) - Generated ORM from project structs for compile time safety assurances.\n* [pop/soda](https://github.com/gobuffalo/pop) - Database migration, creation, ORM, etc... for MySQL, PostgreSQL, and SQLite.\n* [QBS](https://github.com/coocood/qbs) - Stands for Query By Struct. A Go ORM.\n* [reform](https://github.com/go-reform/reform) - Better ORM for Go, based on non-empty interfaces and code generation.\n* [SQLBoiler](https://github.com/volatiletech/sqlboiler) - ORM generator. Generate a featureful and blazing-fast ORM tailored to your database schema.\n* [upper.io/db](https://github.com/upper/db) - Single interface for interacting with different data sources through the use of adapters that wrap mature database drivers.\n* [Xorm](https://github.com/go-xorm/xorm) - Simple and powerful ORM for Go.\n* [Zoom](https://github.com/albrow/zoom) - Blazing-fast datastore and querying engine built on Redis.\n\n## Package Management\n\n*Official tooling for package management*\n\n* [dep](https://github.com/golang/dep) - Go dependency tool.\n* [vgo](https://go.googlesource.com/vgo/) - Versioned Go.\n\n*Unofficial libraries for package and dependency management.*\n\n* [gigo](https://github.com/LyricalSecurity/gigo) - PIP-like dependency tool for golang, with support for private repositories and hashes.\n* [glide](https://github.com/Masterminds/glide) - Manage your golang vendor and vendored packages with ease. Inspired by tools like Maven, Bundler, and Pip.\n* [godep](https://github.com/tools/godep) - dependency tool for go, godep helps build packages reproducibly by fixing their dependencies.\n* [gom](https://github.com/mattn/gom) - Go Manager - bundle for go.\n* [goop](https://github.com/nitrous-io/goop) - Simple dependency manager for Go (golang), inspired by Bundler.\n* [gop](https://github.com/lunny/gop) - Build and manage your Go applications out of GOPATH.\n* [gopm](https://github.com/gpmgo/gopm) - Go Package Manager.\n* [govendor](https://github.com/kardianos/govendor) - Go Package Manager. Go vendor tool that works with the standard vendor file.\n* [gpm](https://github.com/pote/gpm) - Barebones dependency manager for Go.\n* [johnny-deps](https://github.com/VividCortex/johnny-deps) - Minimal dependency version using Git.\n* [nut](https://github.com/jingweno/nut) - Vendor Go dependencies.\n* [VenGO](https://github.com/DamnWidget/VenGO) - create and manage exportable isolated go virtual environments.\n\n## Query Language\n\n* [gojsonq](https://github.com/thedevsaddam/gojsonq) - A simple Go package to Query over JSON Data.\n* [graphql](https://github.com/tmc/graphql) - graphql parser + utilities.\n* [graphql](https://github.com/neelance/graphql-go) - GraphQL server with a focus on ease of use.\n* [graphql-go](https://github.com/graphql-go/graphql) - Implementation of GraphQL for Go.\n* [jsonql](https://github.com/elgs/jsonql) - JSON query expression library in Golang.\n* [jsonslice](https://github.com/bhmj/jsonslice) - Jsonpath queries with advanced filters.\n* [rql](https://github.com/a8m/rql) - Resource Query Language for REST API.\n\n## Resource Embedding\n\n* [esc](https://github.com/mjibson/esc) - Embeds files into Go programs and provides http.FileSystem interfaces to them.\n* [fileb0x](https://github.com/UnnoTed/fileb0x) - Simple tool to embed files in go with focus on \"customization\" and ease to use.\n* [go-embed](https://github.com/pyros2097/go-embed) - Generates go code to embed resource files into your library or executable.\n* [go-resources](https://github.com/omeid/go-resources) - Unfancy resources embedding with Go.\n* [go.rice](https://github.com/GeertJohan/go.rice) - go.rice is a Go package that makes working with resources such as html,js,css,images and templates very easy.\n* [packr](https://github.com/gobuffalo/packr) - The simple and easy way to embed static files into Go binaries.\n* [statics](https://github.com/go-playground/statics) - Embeds static resources into go files for single binary compilation + works with http.FileSystem + symlinks.\n* [statik](https://github.com/rakyll/statik) - Embeds static files into a Go executable.\n* [templify](https://github.com/wlbr/templify) - Embed external template files into Go code to create single file binaries.\n* [vfsgen](https://github.com/shurcooL/vfsgen) - Generates a vfsdata.go file that statically implements the given virtual filesystem.\n\n## Science and Data Analysis\n\n*Libraries for scientific computing and data analyzing.*\n\n* [chart](https://github.com/vdobler/chart) - Simple Chart Plotting library for Go. Supports many graphs types.\n* [dataframe-go](https://github.com/rocketlaunchr/dataframe-go) - Dataframes for Go for machine-learning and statistics (similar to pandas).\n* [evaler](https://github.com/soniah/evaler) - Simple floating point arithmetic expression evaluator.\n* [ewma](https://github.com/VividCortex/ewma) - Exponentially-weighted moving averages.\n* [geom](https://github.com/skelterjohn/geom) - 2D geometry for golang.\n* [go-dsp](https://github.com/mjibson/go-dsp) - Digital Signal Processing for Go.\n* [go-fn](https://github.com/ematvey/go-fn) - Mathematical functions written in Go language, that are not covered by math pkg.\n* [go-gt](https://github.com/ThePaw/go-gt) - Graph theory algorithms written in \"Go\" language.\n* [gocomplex](https://github.com/varver/gocomplex) - Complex number library for the Go programming language.\n* [goent](https://github.com/kzahedi/goent) - GO Implementation of Entropy Measures.\n* [gohistogram](https://github.com/VividCortex/gohistogram) - Approximate histograms for data streams.\n* [gonum](https://github.com/gonum/gonum) - Gonum is a set of numeric libraries for the Go programming language. It contains libraries for matrices, statistics, optimization, and more.\n* [gonum/plot](https://github.com/gonum/plot) - gonum/plot provides an API for building and drawing plots in Go.\n* [goraph](https://github.com/gyuho/goraph) - Pure Go graph theory library(data structure, algorith visualization).\n* [gosl](https://github.com/cpmech/gosl) - Go scientific library for linear algebra, FFT, geometry, NURBS, numerical methods, probabilities, optimisation, differential equations, and more.\n* [GoStats](https://github.com/OGFris/GoStats) - GoStats is an Open Source GoLang library for math statistics mostly used in Machine Learning domains, it covers most of the Statistical measures functions.\n* [graph](https://github.com/yourbasic/graph) - Library of basic graph algorithms.\n* [ode](https://github.com/ChristopherRabotin/ode) - Ordinary differential equation (ODE) solver which supports extended states and channel-based iteration stop conditions.\n* [orb](https://github.com/paulmach/orb) - 2D geometry types with clipping, GeoJSON and Mapbox Vector Tile support.\n* [pagerank](https://github.com/alixaxel/pagerank) - Weighted PageRank algorithm implemented in Go.\n* [piecewiselinear](https://github.com/sgreben/piecewiselinear) - Tiny linear interpolation library.\n* [PiHex](https://github.com/claygod/PiHex) - Implementation of the \"Bailey-Borwein-Plouffe\" algorithm for the hexadecimal number Pi.\n* [sparse](https://github.com/james-bowman/sparse) - Go Sparse matrix formats for linear algebra supporting scientific and machine learning applications, compatible with gonum matrix libraries.\n* [stats](https://github.com/montanaflynn/stats) - Statistics package with common functions missing from the Golang standard library.\n* [streamtools](https://github.com/nytlabs/streamtools) - general purpose, graphical tool for dealing with streams of data.\n* [TextRank](https://github.com/DavidBelicza/TextRank) - TextRank implementation in Golang with extendable features (summarization, weighting, phrase extraction) and multithreading (goroutine) support.\n* [triangolatte](https://github.com/tchayen/triangolatte) - 2D triangulation library. Allows translating lines and polygons (both based on points) to the language of GPUs.\n\n## Security\n\n*Libraries that are used to help make your application more secure.*\n\n* [acmetool](https://github.com/hlandau/acme) - ACME (Let's Encrypt) client tool with automatic renewal.\n* [acra](https://github.com/cossacklabs/acra) - Network encryption proxy to protect database-based applications from data leaks: strong selective encryption, SQL injections prevention, intrusion detection system.\n* [argon2pw](https://github.com/raja/argon2pw) - Argon2 password hash generation with constant-time password comparison.\n* [autocert](https://godoc.org/golang.org/x/crypto/acme/autocert) - Auto provision Let's Encrypt certificates and start a TLS server.\n* [BadActor](https://github.com/jaredfolkins/badactor) - In-memory, application-driven jailer built in the spirit of fail2ban.\n* [Cameradar](https://github.com/Ullaakut/cameradar) - Tool and library to remotely hack RTSP streams from surveillance cameras.\n* [go-yara](https://github.com/hillu/go-yara) - Go Bindings for [YARA](https://github.com/plusvic/yara), the \"pattern matching swiss knife for malware researchers (and everyone else)\".\n* [goArgonPass](https://github.com/dwin/goArgonPass) - Argon2 password hash and verification designed to be compatible with existing Python and PHP implementations.\n* [goSecretBoxPassword](https://github.com/dwin/goSecretBoxPassword) - A probably paranoid package for securely hashing and encrypting passwords.\n* [lego](https://github.com/xenolf/lego) - Pure Go ACME client library and CLI tool (for use with Let's Encrypt).\n* [memguard](https://github.com/awnumar/memguard) - A pure Go library for handling sensitive values in memory.\n* [nacl](https://github.com/kevinburke/nacl) - Go implementation of the NaCL set of API's.\n* [passlib](https://github.com/hlandau/passlib) - Futureproof password hashing library.\n* [secure](https://github.com/unrolled/secure) - HTTP middleware for Go that facilitates some quick security wins.\n* [simple-scrypt](https://github.com/elithrar/simple-scrypt) - Scrypt package with a simple, obvious API and automatic cost calibration built-in.\n* [ssh-vault](https://github.com/ssh-vault/ssh-vault) - encrypt/decrypt using ssh keys.\n\n## Serialization\n\n*Libraries and tools for binary serialization.*\n\n* [asn1](https://github.com/PromonLogicalis/asn1) - Asn.1 BER and DER encoding library for golang.\n* [bambam](https://github.com/glycerine/bambam) - generator for Cap'n Proto schemas from go.\n* [colfer](https://github.com/pascaldekloe/colfer) - Code generation for the Colfer binary format.\n* [csvutil](https://github.com/jszwec/csvutil) - High Performance, idiomatic CSV record encoding and decoding to native Go structures.\n* [fwencoder](https://github.com/o1egl/fwencoder) - Fixed width file parser (encoding and decoding library) for Go.\n* [go-capnproto](https://github.com/glycerine/go-capnproto) - Cap'n Proto library and parser for go.\n* [go-codec](https://github.com/ugorji/go) - High Performance, feature-Rich, idiomatic encode, decode and rpc library for msgpack, cbor and json, with runtime-based OR code-generation support.\n* [gogoprotobuf](https://github.com/gogo/protobuf) - Protocol Buffers for Go with Gadgets.\n* [goprotobuf](https://github.com/golang/protobuf) - Go support, in the form of a library and protocol compiler plugin, for Google's protocol buffers.\n* [jsoniter](https://github.com/json-iterator/go) - High-performance 100% compatible drop-in replacement of \"encoding/json\".\n* [mapstructure](https://github.com/mitchellh/mapstructure) - Go library for decoding generic map values into native Go structures.\n* [php_session_decoder](https://github.com/yvasiyarov/php_session_decoder) - GoLang library for working with PHP session format and PHP Serialize/Unserialize functions.\n* [structomap](https://github.com/tuvistavie/structomap) - Library to easily and dynamically generate maps from static structures.\n\n## Server Applications\n\n* [algernon](https://github.com/xyproto/algernon) - HTTP/2 web server with built-in support for Lua, Markdown, GCSS and Amber.\n* [Caddy](https://github.com/mholt/caddy) - Caddy is an alternative, HTTP/2 web server that's easy to configure and use.\n* [consul](https://www.consul.io/) - Consul is a tool for service discovery, monitoring and configuration.\n* [devd](https://github.com/cortesi/devd) - Local webserver for developers.\n* [discovery](https://github.com/Bilibili/discovery) - A registry for resilient mid-tier load balancing and failover.\n* [etcd](https://github.com/coreos/etcd) - Highly-available key value store for shared configuration and service discovery.\n* [Fider](https://github.com/getfider/fider) - Fider is an open platform to collect and organize customer feedback.\n* [Flagr](https://github.com/checkr/flagr) - Flagr is an open-source feature flagging and A/B testing service.\n* [jackal](https://github.com/ortuman/jackal) - An XMPP server written in Go.\n* [minio](https://github.com/minio/minio) - Minio is a distributed object storage server.\n* [nsq](http://nsq.io/) - A realtime distributed messaging platform.\n* [RoadRunner](https://github.com/spiral/roadrunner) - High-performance PHP application server, load-balancer and process manager.\n* [yakvs](https://git.sci4me.com/sci4me/yakvs) - Small, networked, in-memory key-value store.\n\n## Template Engines\n\n*Libraries and tools for templating and lexing.*\n\n* [ace](https://github.com/yosssi/ace) - Ace is an HTML template engine for Go, inspired by Slim and Jade. Ace is a refinement of Gold.\n* [amber](https://github.com/eknkc/amber) - Amber is an elegant templating engine for Go Programming Language It is inspired from HAML and Jade.\n* [damsel](https://github.com/dskinner/damsel) - Markup language featuring html outlining via css-selectors, extensible via pkg html/template and others.\n* [ego](https://github.com/benbjohnson/ego) - Lightweight templating language that lets you write templates in Go. Templates are translated into Go and compiled.\n* [extemplate](https://github.com/dannyvankooten/extemplate) - Tiny wrapper around html/template to allow for easy file-based template inheritance.\n* [fasttemplate](https://github.com/valyala/fasttemplate) - Simple and fast template engine. Substitutes template placeholders up to 10x faster than [text/template](http://golang.org/pkg/text/template/).\n* [gofpdf](https://github.com/jung-kurt/gofpdf) - PDF document generator with high level support for text, drawing and images.\n* [hero](https://github.com/shiyanhui/hero) - Hero is a handy, fast and powerful go template engine.\n* [jet](https://github.com/CloudyKit/jet) - Jet template engine.\n* [kasia.go](https://github.com/ziutek/kasia.go) - Templating system for HTML and other text documents - go implementation.\n* [liquid](https://github.com/osteele/liquid) - Go implementation of Shopify Liquid templates.\n* [mustache](https://github.com/hoisie/mustache) - Go implementation of the Mustache template language.\n* [pongo2](https://github.com/flosch/pongo2) - Django-like template-engine for Go.\n* [quicktemplate](https://github.com/valyala/quicktemplate) - Fast, powerful, yet easy to use template engine. Converts templates into Go code and then compiles it.\n* [raymond](https://github.com/aymerick/raymond) - Complete handlebars implementation in Go.\n* [Razor](https://github.com/sipin/gorazor) - Razor view engine for Golang.\n* [Soy](https://github.com/robfig/soy) - Closure templates (aka Soy templates) for Go, following the [official spec](https://developers.google.com/closure/templates/).\n* [velvet](https://github.com/gobuffalo/velvet) - Complete handlebars implementation in Go.\n\n## Testing\n\n*Libraries for testing codebases and generating test data.*\n\n* Testing Frameworks\n    * [assert](https://github.com/go-playground/assert) - Basic Assertion Library used along side native go testing, with building blocks for custom assertions.\n    * [badio](https://github.com/cavaliercoder/badio) - Extensions to Go's `testing/iotest` package.\n    * [baloo](https://github.com/h2non/baloo) - Expressive and versatile end-to-end HTTP API testing made easy.\n    * [biff](https://github.com/fulldump/biff) - Bifurcation testing framework, BDD compatible.\n    * [bro](https://github.com/marioidival/bro) - Watch files in directory and run tests for them.\n    * [charlatan](https://github.com/percolate/charlatan) - Tool to generate fake interface implementations for tests.\n    * [cupaloy](https://github.com/bradleyjkemp/cupaloy) - Simple snapshot testing addon for your test framework.\n    * [dbcleaner](https://github.com/khaiql/dbcleaner) - Clean database for testing purpose, inspired by `database_cleaner` in Ruby.\n    * [dsunit](https://github.com/viant/dsunit) - Datastore testing for SQL, NoSQL, structured files.\n    * [endly](https://github.com/viant/endly) - Declarative end to end functional testing.\n    * [frisby](https://github.com/verdverm/frisby) - REST API testing framework.\n    * [ginkgo](http://onsi.github.io/ginkgo/) - BDD Testing Framework for Go.\n    * [go-carpet](https://github.com/msoap/go-carpet) - Tool for viewing test coverage in terminal.\n    * [go-cmp](https://github.com/google/go-cmp) - Package for comparing Go values in tests.\n    * [go-mutesting](https://github.com/zimmski/go-mutesting) - Mutation testing for Go source code.\n    * [go-testdeep](https://github.com/maxatome/go-testdeep) - Extremely flexible golang deep comparison, extends the go testing package.\n    * [go-vcr](https://github.com/dnaeon/go-vcr) - Record and replay your HTTP interactions for fast, deterministic and accurate tests.\n    * [goblin](https://github.com/franela/goblin) - Mocha like testing framework fo Go.\n    * [gocheck](http://labix.org/gocheck) - More advanced testing framework alternative to gotest.\n    * [GoConvey](https://github.com/smartystreets/goconvey/) - BDD-style framework with web UI and live reload.\n    * [gocrest](https://github.com/corbym/gocrest) - Composable hamcrest-like matchers for Go assertions.\n    * [godog](https://github.com/DATA-DOG/godog) - Cucumber or Behat like BDD framework for Go.\n    * [gofight](https://github.com/appleboy/gofight) - API Handler Testing for Golang Router framework.\n    * [gogiven](https://github.com/corbym/gogiven) - YATSPEC-like BDD testing framework for Go.\n    * [gomega](http://onsi.github.io/gomega/) - Rspec like matcher/assertion library.\n    * [GoSpec](https://github.com/orfjackal/gospec) - BDD-style testing framework for the Go programming language.\n    * [gospecify](https://github.com/stesla/gospecify) - This provides a BDD syntax for testing your Go code. It should be familiar to anybody who has used libraries such as rspec.\n    * [gosuite](https://github.com/pavlo/gosuite) - Brings lightweight test suites with setup/teardown facilities to `testing` by leveraging Go1.7's Subtests.\n    * [gotest.tools](https://github.com/gotestyourself/gotest.tools) - A collection of packages to augment the go testing package and support common patterns.\n    * [Hamcrest](https://github.com/rdrdr/hamcrest) - fluent framework for declarative Matcher objects that, when applied to input values, produce self-describing results.\n    * [httpexpect](https://github.com/gavv/httpexpect) - Concise, declarative, and easy to use end-to-end HTTP and REST API testing.\n    * [restit](https://github.com/yookoala/restit) - Go micro framework to help writing RESTful API integration test.\n    * [testfixtures](https://github.com/go-testfixtures/testfixtures) - A helper for Rails' like test fixtures to test database applications.\n    * [Testify](https://github.com/stretchr/testify) - Sacred extension to the standard go testing package.\n    * [testsql](https://github.com/zhulongcheng/testsql) - Generate test data from SQL files before testing and clear it after finished.\n    * [Tt](https://github.com/vcaesar/tt) - Simple and colorful test tools.\n    * [wstest](https://github.com/posener/wstest) - Websocket client for unit-testing a websocket http.Handler.\n\n* Mock\n    * [counterfeiter](https://github.com/maxbrunsfeld/counterfeiter) - Tool for generating self-contained mock objects.\n    * [go-sqlmock](https://github.com/DATA-DOG/go-sqlmock) - Mock SQL driver for testing database interactions.\n    * [go-txdb](https://github.com/DATA-DOG/go-txdb) - Single transaction based database driver mainly for testing purposes.\n    * [gock](https://github.com/h2non/gock) - Versatile HTTP mocking made easy.\n    * [gomock](https://github.com/golang/mock) - Mocking framework for the Go programming language.\n    * [govcr](https://github.com/seborama/govcr) - HTTP mock for Golang: record and replay HTTP interactions for offline testing.\n    * [hoverfly](https://github.com/SpectoLabs/hoverfly) - HTTP(S) proxy for recording and simulating REST/SOAP APIs with extensible middleware and easy-to-use CLI. \n    * [minimock](https://github.com/gojuno/minimock) - Mock generator for Go interfaces.\n    * [mockhttp](https://github.com/tv42/mockhttp) - Mock object for Go http.ResponseWriter.\n\n* Fuzzing and delta-debugging/reducing/shrinking.\n    * [go-fuzz](https://github.com/dvyukov/go-fuzz) - Randomized testing system.\n    * [gofuzz](https://github.com/google/gofuzz) - Library for populating go objects with random values.\n    * [Tavor](https://github.com/zimmski/tavor) - Generic fuzzing and delta-debugging framework.\n\n* Selenium and browser control tools.\n    * [cdp](https://github.com/mafredri/cdp) - Type-safe bindings for the Chrome Debugging Protocol that can be used with browsers or other debug targets that implement it.\n    * [chromedp](https://github.com/knq/chromedp) - a way to drive/test Chrome, Safari, Edge, Android Webviews, and other browsers supporting the Chrome Debugging Protocol.\n    * [ggr](https://github.com/aerokube/ggr) - a lightweight server that routes and proxies Selenium Wedriver requests to multiple Selenium hubs.\n    * [selenoid](https://github.com/aerokube/selenoid) - alternative Selenium hub server that launches browsers within containers.\n\n## Text Processing\n\n*Libraries for parsing and manipulating texts.*\n\n* Specific Formats\n    * [align](https://github.com/Guitarbum722/align) - A general purpose application that aligns text.\n    * [allot](https://github.com/sbstjn/allot) - Placeholder and wildcard text parsing for CLI tools and bots.\n    * [bbConvert](https://github.com/CalebQ42/bbConvert) - Converts bbCode to HTML that allows you to add support for custom bbCode tags.\n    * [blackfriday](https://github.com/russross/blackfriday) - Markdown processor in Go.\n    * [bluemonday](https://github.com/microcosm-cc/bluemonday) - HTML Sanitizer.\n    * [colly](https://github.com/asciimoo/colly) - Fast and Elegant Scraping Framework for Gophers.\n    * [commonregex](https://github.com/mingrammer/commonregex) - A collection of common regular expressions for Go.\n    * [dataflowkit](https://github.com/slotix/dataflowkit) - Web scraping Framework to turn websites into structured data.\n    * [did](https://github.com/ockam-network/did) - DID (Decentralized Identifiers) Parser and Stringer in Go.\n    * [doi](https://github.com/hscells/doi) - Document object identifier (doi) parser in Go.\n    * [editorconfig-core-go](https://github.com/editorconfig/editorconfig-core-go) - Editorconfig file parser and manipulator for Go.\n    * [enca](https://github.com/endeveit/enca) - Minimal cgo bindings for [libenca](http://cihar.com/software/enca/).\n    * [encdec](https://github.com/mickep76/encdec) - Package provides a generic interface to encoders and decodersa.\n    * [genex](https://github.com/alixaxel/genex) - Count and expand Regular Expressions into all matching Strings.\n    * [github_flavored_markdown](https://godoc.org/github.com/shurcooL/github_flavored_markdown) - GitHub Flavored Markdown renderer (using blackfriday) with fenced code block highlighting, clickable header anchor links.\n    * [go-fixedwidth](https://github.com/ianlopshire/go-fixedwidth) - Fixed-width text formatting (encoder/decoder with reflection).\n    * [go-humanize](https://github.com/dustin/go-humanize) - Formatters for time, numbers, and memory size to human readable format.\n    * [go-nmea](https://github.com/adrianmo/go-nmea) - NMEA parser library for the Go language.\n    * [go-runewidth](https://github.com/mattn/go-runewidth) - Functions to get fixed width of the character or string.\n    * [go-slugify](https://github.com/mozillazg/go-slugify) - Make pretty slug with multiple languages support.\n    * [go-vcard](https://github.com/emersion/go-vcard) - Parse and format vCard.\n    * [go-zero-width](https://github.com/trubitsyn/go-zero-width) - Zero-width character detection and removal for Go.\n    * [gofeed](https://github.com/mmcdole/gofeed) - Parse RSS and Atom feeds in Go.\n    * [gographviz](https://github.com/awalterschulze/gographviz) - Parses the Graphviz DOT language.\n    * [gommon/bytes](https://github.com/labstack/gommon/tree/master/bytes) - Format bytes to string.\n    * [gonameparts](https://github.com/polera/gonameparts) - Parses human names into individual name parts.\n    * [goq](https://github.com/andrewstuart/goq) - Declarative unmarshaling of HTML using struct tags with jQuery syntax (uses GoQuery).\n    * [GoQuery](https://github.com/PuerkitoBio/goquery) - GoQuery brings a syntax and a set of features similar to jQuery to the Go language.\n    * [goregen](https://github.com/zach-klippenstein/goregen) - Library for generating random strings from regular expressions.\n    * [gotext](https://github.com/leonelquinteros/gotext) - GNU gettext utilities for Go.\n    * [guesslanguage](https://github.com/endeveit/guesslanguage) - Functions to determine the natural language of a unicode text.\n    * [htmlquery](https://github.com/antchfx/htmlquery) - An XPath query package for HTML, lets you extract data or evaluate from HTML documents by an XPath expression.\n    * [inject](https://github.com/facebookgo/inject) - Package inject provides a reflect based injector.\n    * [mxj](https://github.com/clbanning/mxj) - Encode / decode XML as JSON or map[string]interface{}; extract values with dot-notation paths and wildcards. Replaces x2j and j2x packages.\n    * [sdp](https://github.com/gortc/sdp) - SDP: Session Description Protocol [[RFC 4566](https://tools.ietf.org/html/rfc4566)].\n    * [sh](https://github.com/mvdan/sh) - Shell parser and formatter.\n    * [slug](https://github.com/gosimple/slug) - URL-friendly slugify with multiple languages support.\n    * [Slugify](https://github.com/avelino/slugify) - Go slugify application that handles string.\n    * [syndfeed](https://github.com/zhengchun/syndfeed) - A syndication feed for Atom 1.0 and RSS 2.0.\n    * [toml](https://github.com/BurntSushi/toml) - TOML configuration format (encoder/decoder with reflection).\n* Utility\n    * [gofuckyourself](https://github.com/JoshuaDoes/gofuckyourself) - A sanitization-based swear filter for Go.\n    * [gotabulate](https://github.com/bndr/gotabulate) - Easily pretty-print your tabular data with Go.\n    * [kace](https://github.com/codemodus/kace) - Common case conversions covering common initialisms.\n    * [parseargs-go](https://github.com/nproc/parseargs-go) - string argument parser that understands quotes and backslashes.\n    * [parth](https://github.com/codemodus/parth) - URL path segmentation parsing.\n    * [radix](https://github.com/yourbasic/radix) - fast string sorting algorithm.\n    * [xj2go](https://github.com/stackerzzq/xj2go) - Convert xml or json to go struct.\n    * [xurls](https://github.com/mvdan/xurls) - Extract urls from text.\n\n## Third-party APIs\n\n*Libraries for accessing third party APIs.*\n\n* [amazon-product-advertising-api](https://github.com/ngs/go-amazon-product-advertising-api) - Go Client Library for [Amazon Product Advertising API](https://affiliate-program.amazon.com/gp/advertising/api/detail/main.html).\n* [anaconda](https://github.com/ChimeraCoder/anaconda) - Go client library for the Twitter 1.1 API.\n* [aws-sdk-go](https://github.com/aws/aws-sdk-go) - The official AWS SDK for the Go programming language.\n* [brewerydb](https://github.com/naegelejd/brewerydb) - Go library for accessing the BreweryDB API.\n* [cachet](https://github.com/andygrunwald/cachet) - Go client library for [Cachet (open source status page system)](https://cachethq.io/).\n* [circleci](https://github.com/jszwedko/go-circleci) - Go client library for interacting with CircleCI's API.\n* [clarifai](https://github.com/samuelcouch/clarifai) - Go client library for interfacing with the Clarifai API.\n* [codeship-go](https://github.com/codeship/codeship-go) - Go client library for interacting with Codeship's API v2.\n* [coinpaprika-go](https://github.com/coinpaprika/coinpaprika-api-go-client) - Go client library for interacting with Coinpaprika's API.\n* [discordgo](https://github.com/bwmarrin/discordgo) - Go bindings for the Discord Chat API.\n* [ethrpc](https://github.com/onrik/ethrpc) - Go bindings for Ethereum JSON RPC API.\n* [facebook](https://github.com/huandu/facebook) - Go Library that supports the Facebook Graph API.\n* [fcm](https://github.com/maddevsio/fcm) - Go library for Firebase Cloud Messaging.\n* [gads](https://github.com/emiddleton/gads) - Google Adwords Unofficial API.\n* [gami](https://github.com/bit4bit/gami) - Go library for Asterisk Manager Interface.\n* [gcm](https://github.com/Aorioli/gcm) - Go library for Google Cloud Messaging.\n* [geo-golang](https://github.com/codingsince1985/geo-golang) - Go Library to access [Google Maps](https://developers.google.com/maps/documentation/geocoding/intro), [MapQuest](http://open.mapquestapi.com/geocoding/), [Nominatim](https://developer.mapquest.com/documentation/open/nominatim-search), [OpenCage](http://geocoder.opencagedata.com/api.html), [Bing](https://msdn.microsoft.com/en-us/library/ff701715.aspx), [Mapbox](https://www.mapbox.com/developers/api/geocoding/), and [OpenStreetMap](https://wiki.openstreetmap.org/wiki/Nominatim) geocoding / reverse geocoding APIs.\n* [github](https://github.com/google/go-github) - Go library for accessing the GitHub REST API v3.\n* [githubql](https://github.com/shurcooL/githubql) - Go library for accessing the GitHub GraphQL API v4.\n* [go-chronos](https://github.com/axelspringer/go-chronos) - Go library for interacting with the [Chronos](https://mesos.github.io/chronos/) Job Scheduler\n* [go-hacknews](https://github.com/PaulRosset/go-hacknews) - Tiny Go client for HackerNews API.\n* [go-imgur](https://github.com/koffeinsource/go-imgur) - Go client library for [imgur](https://imgur.com)\n* [go-jira](https://github.com/andygrunwald/go-jira) - Go client library for [Atlassian JIRA](https://www.atlassian.com/software/jira)\n* [go-marathon](https://github.com/gambol99/go-marathon) - Go library for interacting with Mesosphere's Marathon PAAS.\n* [go-myanimelist](https://github.com/nstratos/go-myanimelist) - Go client library for accessing the [MyAnimeList API](http://myanimelist.net/modules.php?go=api).\n* [go-sophos](https://github.com/esurdam/go-sophos) - Go client library for the [Sophos UTM REST API](https://www.sophos.com/en-us/medialibrary/PDFs/documentation/UTMonAWS/Sophos-UTM-RESTful-API.pdf?la=en) with zero dependencies.\n* [go-sptrans](https://github.com/sergioaugrod/go-sptrans) - Go client library for the SPTrans Olho Vivo API.\n* [go-telegraph](https://gitlab.com/toby3d/telegraph) - Telegraph publishing platform API client.\n* [go-tgbot](https://github.com/olebedev/go-tgbot) - Pure Golang Telegram Bot API wrapper, generated from swagger file, session-based router and middleware.\n* [go-trending](https://github.com/andygrunwald/go-trending) - Go library for accessing [trending repositories](https://github.com/trending) and [developers](https://github.com/trending/developers) at Github.\n* [go-twitch](https://github.com/knspriggs/go-twitch) - Go client for interacting with the Twitch v3 API.\n* [go-twitter](https://github.com/dghubble/go-twitter) - Go client library for the Twitter v1.1 APIs.\n* [go-unsplash](https://github.com/hbagdi/go-unsplash) - Go client library for the [Unsplash.com](https://unsplash.com) API.\n* [go-xkcd](https://github.com/nishanths/go-xkcd) - Go client for the xkcd API.\n* [golyrics](https://github.com/mamal72/golyrics) - Golyrics is a Go library to fetch music lyrics data from the Wikia website.\n* [GoMusicBrainz](https://github.com/michiwend/gomusicbrainz) - Go MusicBrainz WS2 client library.\n* [google](https://github.com/google/google-api-go-client) - Auto-generated Google APIs for Go.\n* [google-analytics](https://github.com/chonthu/go-google-analytics) - Simple wrapper for easy google analytics reporting.\n* [google-cloud](https://github.com/GoogleCloudPlatform/gcloud-golang) - Google Cloud APIs Go Client Library.\n* [google-email-audit-api](https://github.com/ngs/go-google-email-audit-api) - Go client library for [Google G Suite Email Audit API](https://developers.google.com/admin-sdk/email-audit/).\n* [gostorm](https://github.com/jsgilmore/gostorm) - GoStorm is a Go library that implements the communications protocol required to write Storm spouts and Bolts in Go that communicate with the Storm shells.\n* [govkbot](https://github.com/nikepan/govkbot) - Simple Go [VK](https://vk.com) bot library.\n* [hipchat](https://github.com/andybons/hipchat) - This project implements a golang client library for the Hipchat API.\n* [hipchat (xmpp)](https://github.com/daneharrigan/hipchat) - A golang package to communicate with HipChat over XMPP.\n* [igdb](https://github.com/Henry-Sarabia/igdb) - Go client for the [Internet Game Database API](https://api.igdb.com/).\n* [Medium](https://github.com/Medium/medium-sdk-go) - Golang SDK for Medium's OAuth2 API.\n* [megos](https://github.com/andygrunwald/megos) - Client library for accessing an [Apache Mesos](http://mesos.apache.org/) cluster.\n* [micha](https://github.com/onrik/micha) - Go Library for Telegram bot api.\n* [minio-go](https://github.com/minio/minio-go) - Minio Go Library for Amazon S3 compatible cloud storage.\n* [mixpanel](https://github.com/dukex/mixpanel) - Mixpanel is a library for tracking events and sending Mixpanel profile updates to Mixpanel from your go applications.\n* [patreon-go](https://github.com/mxpv/patreon-go) - Go library for Patreon API.\n* [paypal](https://github.com/logpacker/PayPal-Go-SDK) - Wrapper for PayPal payment API.\n* [playlyfe](https://github.com/playlyfe/playlyfe-go-sdk) - The Playlyfe Rest API Go SDK.\n* [pushover](https://github.com/gregdel/pushover) - Go wrapper for the Pushover API.\n* [rrdaclient](https://github.com/Omie/rrdaclient) - Go Library to access statdns.com API, which is in turn RRDA API. DNS Queries over HTTP.\n* [shopify](https://github.com/rapito/go-shopify) - Go Library to make CRUD request to the Shopify API.\n* [slack](https://github.com/nlopes/slack) - Slack API in Go.\n* [smite](https://github.com/sergiotapia/smitego) - Go package to wraps access to the Smite game API.\n* [spotify](https://github.com/rapito/go-spotify) - Go Library to access Spotify WEB API.\n* [steam](https://github.com/sostronk/go-steam) - Go Library to interact with Steam game servers.\n* [stripe](https://github.com/stripe/stripe-go) - Go client for the Stripe API.\n* [tbot](https://github.com/yanzay/tbot) - Telegram bot server with API similar to net/http.\n* [telebot](https://github.com/tucnak/telebot) - Telegram bot framework written in Go.\n* [telegram-bot-api](https://github.com/Syfaro/telegram-bot-api) - Simple and clean Telegram bot client.\n* [textbelt](https://github.com/dietsche/textbelt) - Go client for the textbelt.com txt messaging API.\n* [TheMovieDb](https://github.com/jbrodriguez/go-tmdb) - Simple golang package to communicate with [themoviedb.org](https://themoviedb.org).\n* [translate](https://github.com/poorny/translate) - Go online translation package.\n* [Trello](https://github.com/adlio/trello) - Go wrapper for the Trello API.\n* [tumblr](https://github.com/mattcunningham/gumblr) - Go wrapper for the Tumblr v2 API.\n* [uptimerobot](https://github.com/bitfield/uptimerobot) - Go wrapper and command-line client for the Uptime Robot v2 API.\n* [webhooks](https://github.com/go-playground/webhooks) - Webhook receiver for GitHub and Bitbucket.\n* [wit-go](https://github.com/wit-ai/wit-go) - Go client for wit.ai HTTP API.\n* [ynab](https://github.com/brunomvsouza/ynab.go) - Go wrapper for the YNAB API.\n* [zooz](https://github.com/gojuno/go-zooz) - Go client for the Zooz API.\n\n## Utilities\n\n*General utilities and tools to make your life easier.*\n\n* [abutil](https://github.com/bahlo/abutil) - Collection of often-used Golang helpers.\n* [apm](https://github.com/topfreegames/apm) - Process manager for Golang applications with an HTTP API.\n* [backscanner](https://github.com/icza/backscanner) - A scanner similar to bufio.Scanner, but it reads and returns lines in reverse order, starting at a given position and going backward.\n* [boilr](https://github.com/tmrts/boilr) - Blazingly fast CLI tool for creating projects from boilerplate templates.\n* [chyle](https://github.com/antham/chyle) - Changelog generator using a git repository with multiple configuration possibilities.\n* [circuit](https://github.com/cep21/circuit) - An efficient and feature complete Hystrix like Go implementation of the circuit breaker pattern.\n* [circuitbreaker](https://github.com/rubyist/circuitbreaker) - Circuit Breakers in Go.\n* [clockwerk](http://github.com/onatm/clockwerk) - Go package to schedule periodic jobs using a simple, fluent syntax.\n* [clockwork](https://github.com/whiteShtef/clockwork) - Simple and intuitive job scheduling library in Go.\n* [command](https://github.com/txgruppi/command) - Command pattern for Go with thread safe serial and parallel dispatcher.\n* [copy-pasta](https://github.com/jutkko/copy-pasta) - Universal multi-workstation clipboard that uses S3 like backend for the storage.\n* [ctop](https://github.com/bcicen/ctop) - [Top-like](http://ctop.sh) interface (e.g. htop) for container metrics.\n* [ctxutil](https://github.com/posener/ctxutil) - A collection of utility functions for contexts.\n* [Death](https://github.com/vrecan/death) - Managing go application shutdown with signals.\n* [Deepcopier](https://github.com/ulule/deepcopier) - Simple struct copying for Go.\n* [delve](https://github.com/derekparker/delve) - Go debugger.\n* [dlog](https://github.com/kirillDanshin/dlog) - Compile-time controlled logger to make your release smaller without removing debug calls.\n* [ergo](https://github.com/cristianoliveira/ergo) - The management of multiple local services running over different ports made easy.\n* [evaluator](https://github.com/nullne/evaluator) - Evaluate an expression dynamicly based on s-expression. It's simple and easy to extend.\n* [excelize](https://github.com/360EntSecGroup-Skylar/excelize) - Golang library for reading and writing Microsoft Excel‚Ñ¢ (XLSX) files.\n* [fastlz](https://github.com/digitalcrab/fastlz) - Wrap over [FastLz](http://fastlz.org/) (free, open-source, portable real-time compression library) for GoLang.\n* [filetype](https://github.com/h2non/filetype) - Small package to infer the file type checking the magic numbers signature.\n* [filler](https://github.com/yaronsumel/filler) - small utility to fill structs using \"fill\" tag.\n* [filter](https://github.com/gookit/filter) - provide filtering, sanitizing, and conversion of Go data.\n* [fzf](https://github.com/junegunn/fzf) - Command-line fuzzy finder written in Go.\n* [gaper](https://github.com/maxcnunes/gaper) - Builds and restarts a Go project when it crashes or some watched file changes.\n* [generate](https://github.com/go-playground/generate) - runs go generate recursively on a specified path or environment variable and can filter by regex.\n* [git-time-metric](https://github.com/git-time-metric/gtm) - Simple, seamless, lightweight time tracking for Git.\n* [GJSON](https://github.com/tidwall/gjson) - Get a JSON value with one line of code.\n* [go-astitodo](https://github.com/asticode/go-astitodo) - Parse TODOs in your GO code.\n* [go-bind-plugin](https://github.com/wendigo/go-bind-plugin) - go:generate tool for wrapping symbols exported by golang plugins (1.8 only).\n* [go-cron](https://github.com/rk/go-cron) - Simple Cron library for go that can execute closures or functions at varying intervals, from once a second to once a year on a specific date and time. Primarily for web applications and long running daemons.\n* [go-dry](https://github.com/ungerik/go-dry) - DRY (don't repeat yourself) package for Go.\n* [go-excel](https://github.com/szyhf/go-excel) - A simple and light reader to read a relate-db-like excel as a table.\n* [go-funk](https://github.com/thoas/go-funk) - Modern Go utility library which provides helpers (map, find, contains, filter, chunk, reverse, ...).\n* [go-health](https://github.com/Talento90/go-health) - Health package simplifies the way you add health check to your services.\n* [go-httpheader](https://github.com/mozillazg/go-httpheader) - Go library for encoding structs into Header fields.\n* [go-rate](https://github.com/beefsack/go-rate) - Timed rate limiter for Go.\n* [go-respond](https://github.com/nicklaw5/go-respond) - Go package for handling common HTTP JSON responses.\n* [go-sitemap-generator](https://github.com/ikeikeikeike/go-sitemap-generator) - XML Sitemap generator written in Go.\n* [go-torch](https://github.com/uber/go-torch) - Stochastic flame graph profiler for Go programs.\n* [go-trigger](https://github.com/sadlil/go-trigger) - Go-lang global event triggerer, Register Events with an id and trigger the event from anywhere from your project.\n* [goback](https://github.com/carlescere/goback) - Go simple exponential backoff package.\n* [godaemon](https://github.com/VividCortex/godaemon) - Utility to write daemons.\n* [godropbox](https://github.com/dropbox/godropbox) - Common libraries for writing Go services/applications from Dropbox.\n* [gohper](https://github.com/cosiner/gohper) - Various tools/modules help for development.\n* [gojq](https://github.com/elgs/gojq) - JSON query in Golang.\n* [gojson](https://github.com/ChimeraCoder/gojson) - Automatically generate Go (golang) struct definitions from example JSON.\n* [golarm](https://github.com/msempere/golarm) - Fire alarms with system events.\n* [golog](https://github.com/mlimaloureiro/golog) - Easy and lightweight CLI tool to time track your tasks.\n* [gopencils](https://github.com/bndr/gopencils) - Small and simple package to easily consume REST APIs.\n* [goplaceholder](https://github.com/michiwend/goplaceholder) - a small golang lib to generate placeholder images.\n* [goreleaser](https://github.com/goreleaser/goreleaser) - Deliver Go binaries as fast and easily as possible.\n* [goreporter](https://github.com/wgliang/goreporter) - Golang tool that does static analysis, unit testing, code review and generate code quality report.\n* [goseaweedfs](https://github.com/linxGnu/goseaweedfs) - SeaweedFS client library with almost full features.\n* [gotenv](https://github.com/subosito/gotenv) - Load environment variables from `.env` or any `io.Reader` in Go.\n* [goxlsxwriter](https://github.com/fterrag/goxlsxwriter) - Golang bindings for libxlsxwriter for writing XLSX (Microsoft Excel) files.\n* [gpath](https://github.com/tenntenn/gpath) - Library to simplify access struct fields with Go's expression in reflection.\n* [gron](https://github.com/roylee0704/gron) - Define time-based tasks using a simple Go API and Gron‚Äôs scheduler will run them accordingly.\n* [gubrak](https://gubrak.github.io/) - Golang utility library with syntactic sugar. It's like lodash, but for golang.\n* [htcat](https://github.com/htcat/htcat) - Parallel and Pipelined HTTP GET Utility.\n* [hub](https://github.com/github/hub) - wrap git commands with additional functionality to interact with github from the terminal.\n* [hystrix-go](https://github.com/afex/hystrix-go) - Implements Hystrix patterns of programmer-defined fallbacks aka circuit breaker.\n* [immortal](https://github.com/immortal/immortal) - \\*nix cross-platform (OS agnostic) supervisor.\n* [intrinsic](https://github.com/mengzhuo/intrinsic) - Use x86 SIMD without writing any assembly code.\n* [JobRunner](https://github.com/bamzi/jobrunner) - Smart and featureful cron job scheduler with job queuing and live monitoring built in.\n* [jsonapi-errors](https://github.com/AmuzaTkts/jsonapi-errors) - Go bindings based on the JSON API errors reference.\n* [jsonf](https://github.com/miolini/jsonf) - Console tool for highlighted formatting and struct query fetching JSON.\n* [jsongo](https://github.com/ricardolonga/jsongo) - Fluent API to make it easier to create Json objects.\n* [jsonhal](https://github.com/RichardKnop/jsonhal) - Simple Go package to make custom structs marshal into HAL compatible JSON responses.\n* [kazaam](https://github.com/Qntfy/kazaam) - API for arbitrary transformation of JSON documents.\n* [koazee](https://github.com/wesovilabs/koazee) - Library inspired in Lazy evaluation and functional programming that takes the hassle out of working with arrays.\n* [leprechaun](https://github.com/kilgaloon/leprechaun) - Job scheduler that supports webhooks, crons and classic scheduling.\n* [lrserver](https://github.com/jaschaephraim/lrserver) - LiveReload server for Go.\n* [mc](https://github.com/minio/mc) - Minio Client provides minimal tools to work with Amazon S3 compatible cloud storage and filesystems.\n* [mergo](https://github.com/imdario/mergo) - Helper to merge structs and maps in Golang. Useful for configuration default values, avoiding messy if-statements.\n* [mimemagic](https://github.com/zRedShift/mimemagic) - Pure Go ultra performant MIME sniffing library/utility.\n* [mimetype](https://github.com/gabriel-vasile/mimetype) - Package for MIME type detection based on magic numbers.\n* [minify](https://github.com/tdewolff/minify) - Fast minifiers for HTML, CSS, JS, XML, JSON and SVG file formats.\n* [minquery](https://github.com/icza/minquery) - MongoDB / mgo.v2 query that supports efficient pagination (cursors to continue listing documents where we left off).\n* [mmake](https://github.com/tj/mmake) - Modern Make.\n* [moldova](https://github.com/StabbyCutyou/moldova) - Utility for generating random data based on an input template.\n* [mole](https://github.com/davrodpin/mole) - cli app to easily create ssh tunnels.\n* [mp](https://github.com/sanbornm/mp) - Simple cli email parser. It currently takes stdin and outputs JSON.\n* [mssqlx](https://github.com/linxGnu/mssqlx) - Database client library, proxy for any master slave, master master structures. Lightweight and auto balancing in mind.\n* [multitick](https://github.com/VividCortex/multitick) - Multiplexor for aligned tickers.\n* [myhttp](https://github.com/inancgumus/myhttp) - Simple API to make HTTP GET requests with timeout support.\n* [netbug](https://github.com/e-dard/netbug) - Easy remote profiling of your services.\n* [okrun](https://github.com/xta/okrun) - go run error steamroller.\n* [onecache](https://github.com/adelowo/onecache) - Caching library with support for multiple backend stores (Redis, Memcached, filesystem etc).\n* [panicparse](https://github.com/maruel/panicparse) - Groups similar goroutines and colorizes stack dump.\n* [peco](https://github.com/peco/peco) - Simplistic interactive filtering tool.\n* [pm](https://github.com/VividCortex/pm) - Process (i.e. goroutine) manager with an HTTP API.\n* [profile](https://github.com/pkg/profile) - Simple profiling support package for Go.\n* [rclient](https://github.com/zpatrick/rclient) - Readable, flexible, simple-to-use client for REST APIs.\n* [realize](https://github.com/tockins/realize) - Go build system with file watchers and live reload. Run, build and watch file changes with custom paths.\n* [repeat](https://github.com/ssgreg/repeat) - Go implementation of different backoff strategies useful for retrying operations and heartbeating.\n* [request](https://github.com/mozillazg/request) - Go HTTP Requests for Humans‚Ñ¢.\n* [rerate](https://github.com/abo/rerate) - Redis-based rate counter and rate limiter for Go.\n* [rerun](https://github.com/ivpusic/rerun) - Recompiling and rerunning go apps when source changes.\n* [resty](https://github.com/go-resty/resty) - Simple HTTP and REST client for Go inspired by Ruby rest-client.\n* [retry](https://github.com/kamilsk/retry) - Functional mechanism based on context to perform actions repetitively until successful.\n* [retry](https://github.com/percolate/retry) - A simple but highly configurable retry package for Go.\n* [retry](https://github.com/thedevsaddam/retry) - Simple and easy retry mechanism package for Go.\n* [retry](https://github.com/shafreeck/retry) - A pretty simple library to ensure your work to be done.\n* [retry-go](https://github.com/rafaeljesus/retry-go) - Retrying made simple and easy for golang.\n* [robustly](https://github.com/VividCortex/robustly) - Runs functions resiliently, catching and restarting panics.\n* [scheduler](https://github.com/carlescere/scheduler) - Cronjobs scheduling made easy.\n* [spinner](https://github.com/briandowns/spinner) - Go package to easily provide a terminal spinner with options.\n* [sqlx](https://github.com/jmoiron/sqlx) - provides a set of extensions on top of the excellent built-in database/sql package.\n* [sslice](https://github.com/yaa110/sslice) - Create a slice which is always sorted.\n* [Storm](https://github.com/asdine/storm) - Simple and powerful toolkit for BoltDB.\n* [structs](https://github.com/PumpkinSeed/structs) - Implement simple functions to manipulate structs.\n* [Task](https://github.com/go-task/task) - simple \"Make\" alternative.\n* [toolbox](https://github.com/viant/toolbox) - Slice, map, multimap, struct, function, data conversion utilities. Service router, macro evaluator, tokenizer.\n* [ugo](https://github.com/alxrm/ugo) - ugo is slice toolbox with concise syntax for Go.\n* [UNIS](https://github.com/esemplastic/unis) - Common Architecture‚Ñ¢ for String Utilities in Go.\n* [usql](https://github.com/knq/usql) - usql is a universal command-line interface for SQL databases.\n* [util](https://github.com/shomali11/util) - Collection of useful utility functions. (strings, concurrency, manipulations, ...).\n* [wuzz](https://github.com/asciimoo/wuzz) - Interactive cli tool for HTTP inspection.\n* [xferspdy](https://github.com/monmohan/xferspdy) - Xferspdy provides binary diff and patch library in golang.\n* [xlsx](https://github.com/tealeg/xlsx) - Library to simplify reading the XML format used by recent version of Microsoft Excel in Go programs.\n* [xlsx](https://github.com/plandem/xlsx) - Fast and safe way to read/update your existing Microsoft Excel files in Go programs.\n\n## Validation\n\n*Libraries for validation.*\n\n* [govalidator](https://github.com/asaskevich/govalidator) - Validators and sanitizers for strings, numerics, slices and structs.\n* [govalidator](https://github.com/thedevsaddam/govalidator) - Validate Golang request data with simple rules. Highly inspired by Laravel's request validation.\n* [ozzo-validation](https://github.com/go-ozzo/ozzo-validation) - Supports validation of various data types (structs, strings, maps, slices, etc.) with configurable and extensible validation rules specified in usual code constructs instead of struct tags.\n* [validate](https://github.com/gookit/validate) - Go package for data validation and filtering. support validate Map, Struct, Request(Form, JSON, url.Values, Uploaded Files) data and more features.\n* [validate](https://github.com/gobuffalo/validate) - This package provides a framework for writing validations for Go applications.\n* [validator](https://github.com/go-playground/validator) - Go Struct and Field validation, including Cross Field, Cross Struct, Map, Slice and Array diving.\n\n## Version Control\n\n*Libraries for version control.*\n\n* [gh](https://github.com/rjeczalik/gh) - Scriptable server and net/http middleware for GitHub Webhooks.\n* [git2go](https://github.com/libgit2/git2go) - Go bindings for libgit2.\n* [go-vcs](https://github.com/sourcegraph/go-vcs) - manipulate and inspect VCS repositories in Go.\n* [hgo](https://github.com/beyang/hgo) - Hgo is a collection of Go packages providing read-access to local Mercurial repositories.\n\n## Video\n\n*Libraries for manipulating video.*\n\n* [gmf](https://github.com/3d0c/gmf) - Go bindings for FFmpeg av\\* libraries.\n* [go-astisub](https://github.com/asticode/go-astisub) - Manipulate subtitles in GO (.srt, .stl, .ttml, .webvtt, .ssa/.ass, teletext, .smi, etc.).\n* [go-astits](https://github.com/asticode/go-astits) - Parse and demux MPEG Transport Streams (.ts) natively in GO.\n* [go-m3u8](https://github.com/quangngotan95/go-m3u8) - Parser and generator library for Apple m3u8 playlists.\n* [goav](https://github.com/giorgisio/goav) - Comphrensive Go bindings for FFmpeg.\n* [gst](https://github.com/ziutek/gst) - Go bindings for GStreamer.\n* [libgosubs](https://github.com/wargarblgarbl/libgosubs) - Subtitle format support for go. Supports .srt, .ttml, and .ass.\n* [libvlc-go](https://github.com/adrg/libvlc-go) - Go bindings for libvlc 2.X/3.X/4.X (used by the VLC media player).\n* [v4l](https://github.com/korandiz/v4l) - Video capture library for Linux, written in Go.\n\n## Web Frameworks\n\n*Full stack web frameworks.*\n\n* [aah](https://aahframework.org) - Scalable, performant, rapid development Web framework for Go.\n* [Aero](https://github.com/aerogo/aero) - High-performance web framework for Go, reaches top scores in Lighthouse.\n* [Air](https://github.com/aofei/air) - An ideally refined web framework for Go.\n* [Banjo](https://github.com/nsheremet/banjo) - Very simple and fast web framework for Go.\n* [Beego](https://github.com/astaxie/beego) - beego is an open-source, high-performance web framework for the Go programming language.\n* [Buffalo](http://gobuffalo.io) - Bringing the productivity of Rails to Go!\n* [Echo](https://github.com/labstack/echo) - High performance, minimalist Go web framework.\n* [Fireball](https://github.com/zpatrick/fireball) - More \"natural\" feeling web framework.\n* [Gem](https://github.com/go-gem/gem) - Simple and fast web framework, friendly to REST API.\n* [Gin](https://github.com/gin-gonic/gin) - Gin is a web framework written in Go! It features a martini-like API with much better performance, up to 40 times faster. If you need performance and good productivity.\n* [Gizmo](https://github.com/NYTimes/gizmo) - Microservice toolkit used by the New York Times.\n* [go-json-rest](https://github.com/ant0ine/go-json-rest) - Quick and easy way to setup a RESTful JSON API.\n* [go-rest](https://github.com/ungerik/go-rest) - Small and evil REST framework for Go.\n* [goa](https://github.com/raphael/goa) - Framework for developing microservices based on the design of Ruby's Praxis.\n* [Golax](https://github.com/fulldump/golax) - A non Sinatra fast HTTP framework with support for Google custom methods, deep interceptors, recursion and more.\n* [Golf](https://github.com/dinever/golf) - Golf is a fast, simple and lightweight micro-web framework for Go. It comes with powerful features and has no dependencies other than the Go Standard Library.\n* [Gondola](https://github.com/rainycape/gondola) - The web framework for writing faster sites, faster.\n* [gongular](https://github.com/mustafaakin/gongular) - Fast Go web framework with input mapping/validation and (DI) Dependency Injection.\n* [hiboot](https://github.com/hidevopsio/hiboot) - hiboot is a high performance web application framework with auto configuration and dependency injection support.\n* [Macaron](https://github.com/go-macaron/macaron) - Macaron is a high productive and modular design web framework in Go.\n* [mango](https://github.com/paulbellamy/mango) - Mango is a modular web-application framework for Go, inspired by Rack, and PEP333.\n* [Microservice](https://github.com/claygod/microservice) - The framework for the creation of microservices, written in Golang.\n* [neo](https://github.com/ivpusic/neo) - Neo is minimal and fast Go Web Framework with extremely simple API.\n* [Resoursea](https://github.com/resoursea/api) - REST framework for quickly writing resource based services.\n* [REST Layer](http://rest-layer.io) - Framework to build REST/GraphQL API on top of databases with mostly configuration over code.\n* [Revel](https://github.com/revel/revel) - High-productivity web framework for the Go language.\n* [rex](https://github.com/goanywhere/rex) - Rex is a library for modular development built upon gorilla/mux, fully compatible with `net/http`.\n* [sawsij](https://github.com/jaybill/sawsij) - lightweight, open-source web framework for building high-performance, data-driven web applications.\n* [tango](https://github.com/lunny/tango) - Micro \u0026 pluggable web framework for Go.\n* [tigertonic](https://github.com/rcrowley/go-tigertonic) - Go framework for building JSON web services inspired by Dropwizard.\n* [traffic](https://github.com/pilu/traffic) - Sinatra inspired regexp/pattern mux and web framework for Go.\n* [utron](https://github.com/gernest/utron) - Lightweight MVC framework for Go(Golang).\n* [vox](https://github.com/aisk/vox) - A golang web framework for humans, inspired by Koa heavily.\n* [WebGo](https://github.com/bnkamalesh/webgo) - A micro-framework to build web apps; with handler chaining, middleware and context injection. With standard library compliant HTTP handlers(i.e. http.HandlerFunc).\n* [YARF](https://github.com/yarf-framework/yarf) - Fast micro-framework designed to build REST APIs and web services in a fast and simple way.\n* [Zerver](https://github.com/cosiner/zerver) - Zerver is an expressive, modular, feature completed RESTful framework.\n\n### Middlewares\n\n#### Actual middlewares\n\n* [client-timing](https://github.com/posener/client-timing) - An HTTP client for Server-Timing header.\n* [CORS](https://github.com/rs/cors) - Easily add CORS capabilities to your API.\n* [formjson](https://github.com/rs/formjson) - Transparently handle JSON input as a standard form POST.\n* [go-server-timing](https://github.com/mitchellh/go-server-timing) - Add/parse Server-Timing header.\n* [Limiter](https://github.com/ulule/limiter) - Dead simple rate limit middleware for Go.\n* [ln-paywall](https://github.com/philippgille/ln-paywall) - Go middleware for monetizing APIs on a per-request basis with the Lightning Network (Bitcoin)\n* [Tollbooth](https://github.com/didip/tollbooth) - Rate limit HTTP request handler.\n* [XFF](https://github.com/sebest/xff) - Handle `X-Forwarded-For` header and friends.\n\n#### Libraries for creating HTTP middlewares\n\n* [alice](https://github.com/justinas/alice) - Painless middleware chaining for Go.\n* [catena](https://github.com/codemodus/catena) - http.Handler wrapper catenation (same API as \"chain\").\n* [chain](https://github.com/codemodus/chain) - Handler wrapper chaining with scoped data (net/context-based \"middleware\").\n* [go-wrap](https://github.com/go-on/wrap) - Small middlewares package for net/http.\n* [gores](https://github.com/alioygur/gores) - Go package that handles HTML, JSON, XML and etc. responses. Useful for RESTful APIs.\n* [interpose](https://github.com/carbocation/interpose) - Minimalist net/http middleware for golang.\n* [muxchain](https://github.com/stephens2424/muxchain) - Lightweight middleware for net/http.\n* [negroni](https://github.com/urfave/negroni) - Idiomatic HTTP middleware for Golang.\n* [render](https://github.com/unrolled/render) - Go package for easily rendering JSON, XML, and HTML template responses.\n* [renderer](https://github.com/thedevsaddam/renderer) - Simple, lightweight and faster response (JSON, JSONP, XML, YAML, HTML, File) rendering package for Go.\n* [rye](https://github.com/InVisionApp/rye) - Tiny Go middleware library (with canned Middlewares) that supports JWT, CORS, Statsd, and Go 1.7 context.\n* [stats](https://github.com/thoas/stats) - Go middleware that stores various information about your web application.\n\n### Routers\n\n* [alien](https://github.com/gernest/alien) - Lightweight and fast http router from outer space.\n* [Bone](https://github.com/go-zoo/bone) - Lightning Fast HTTP Multiplexer.\n* [Bxog](https://github.com/claygod/Bxog) - Simple and fast HTTP router for Go. It works with routes of varying difficulty, length and nesting. And he knows how to create a URL from the received parameters.\n* [chi](https://github.com/go-chi/chi) - Small, fast and expressive HTTP router built on net/context.\n* [fasthttprouter](https://github.com/buaazp/fasthttprouter) - High performance router forked from `httprouter`. The first router fit for `fasthttp`.\n* [FastRouter](https://github.com/razonyang/fastrouter) - a fast, flexible HTTP router written in Go.\n* [gocraft/web](https://github.com/gocraft/web) - Mux and middleware package in Go.\n* [Goji](https://github.com/goji/goji) - Goji is a minimalistic and flexible HTTP request multiplexer with support for `net/context`.\n* [GoRouter](https://github.com/vardius/gorouter) - GoRouter is a Server/API micro framwework, HTTP request router, multiplexer, mux that provides request router with middleware supporting `net/context`.\n* [gowww/router](https://github.com/gowww/router) - Lightning fast HTTP router fully compatible with the net/http.Handler interface.\n* [httprouter](https://github.com/julienschmidt/httprouter) - High performance router. Use this and the standard http handlers to form a very high performance web framework.\n* [httptreemux](https://github.com/dimfeld/httptreemux) - High-speed, flexible tree-based HTTP router for Go. Inspiration from httprouter.\n* [lars](https://github.com/go-playground/lars) - Is a lightweight, fast and extensible zero allocation HTTP router for Go used to create customizable frameworks.\n* [mux](https://github.com/gorilla/mux) - Powerful URL router and dispatcher for golang.\n* [ozzo-routing](https://github.com/go-ozzo/ozzo-routing) - An extremely fast Go (golang) HTTP router that supports regular expression route matching. Comes with full support for building RESTful APIs.\n* [pure](https://github.com/go-playground/pure) - Is a lightweight HTTP router that sticks to the std \"net/http\" implementation.\n* [Siesta](https://github.com/VividCortex/siesta) - Composable framework to write middleware and handlers.\n* [vestigo](https://github.com/husobee/vestigo) - Performant, stand-alone, HTTP compliant URL Router for go web applications.\n* [violetear](https://github.com/nbari/violetear) - Go HTTP router.\n* [xmux](https://github.com/rs/xmux) - High performance muxer based on `httprouter` with `net/context` support.\n* [xujiajun/gorouter](https://github.com/xujiajun/gorouter) - A simple and fast HTTP router for Go.\n\n## Windows\n\n* [d3d9](https://github.com/gonutz/d3d9) - Go bindings for Direct3D9.\n* [go-ole](https://github.com/go-ole/go-ole) - Win32 OLE implementation for golang.\n\n## XML\n\n*Libraries and tools for manipulating XML.*\n\n* [XML-Comp](https://github.com/xml-comp/xml-comp) - Simple command line XML comparer that generates diffs of folders, files and tags.\n* [xmlwriter](https://github.com/shabbyrobe/xmlwriter) - Procedural XML generation API based on libxml2's xmlwriter module.\n* [xpath](https://github.com/antchfx/xpath) - XPath package for Go.\n* [xquery](https://github.com/antchfx/xquery) - XQuery lets you extract data from HTML/XML documents using XPath expression.\n* [xml2map](https://github.com/sbabiv/xml2map) - XML to MAP converter written Golang.\n# Tools\n\n*Go software and plugins.*\n\n## Code Analysis\n\n* [apicompat](https://github.com/bradleyfalzon/apicompat) - Checks recent changes to a Go project for backwards incompatible changes.\n* [dupl](https://github.com/mibk/dupl) - Tool for code clone detection.\n* [errcheck](https://github.com/kisielk/errcheck) - Errcheck is a program for checking for unchecked errors in Go programs.\n* [gcvis](https://github.com/davecheney/gcvis) - Visualise Go program GC trace data in real time.\n* [Go Metalinter](https://github.com/alecthomas/gometalinter) - Metalinter is a tool to automatically apply all static analysis tool and report their output in normalized form.\n* [go-checkstyle](https://github.com/qiniu/checkstyle) - checkstyle is a style check tool like java checkstyle. This tool inspired by java checkstyle, golint. The style refered to some points in Go Code Review Comments.\n* [go-cleanarch](https://github.com/roblaszczak/go-cleanarch) - go-cleanarch was created to validate Clean Architecture rules, like a The Dependency Rule and interaction between packages in your Go projects.\n* [go-critic](https://github.com/go-critic/go-critic) - source code linter that brings checks that are currently not implemented in other linters.\n* [go-outdated](https://github.com/firstrow/go-outdated) - Console application that displays outdated packages.\n* [goast-viewer](https://github.com/yuroyoro/goast-viewer) - Web based Golang AST visualizer.\n* [GoCover.io](http://gocover.io/) - GoCover.io offers the code coverage of any golang package as a service.\n* [goimports](https://godoc.org/golang.org/x/tools/cmd/goimports) - Tool to fix (add, remove) your Go imports automatically.\n* [GolangCI](https://golangci.com/) - GolangCI is an automated Golang code review service for GitHub pull requests. Service is open source and it's free for open source projects.\n* [GoLint](https://github.com/golang/lint) - Golint is a linter for Go source code.\n* [Golint online](http://go-lint.appspot.com/) - Lints online Go source files on GitHub, Bitbucket and Google Project Hosting using the golint package.\n* [goreturns](https://sourcegraph.com/github.com/sqs/goreturns) - Adds zero-value return statements to match the func return types.\n* [gosimple](https://github.com/dominikh/go-tools/tree/master/cmd/gosimple) - gosimple is a linter for Go source code that specialises on simplifying code.\n* [gostatus](https://github.com/shurcooL/gostatus) - Command line tool, shows the status of repositories that contain Go packages.\n* [lint](https://github.com/surullabs/lint) - Run linters as part of go test.\n* [php-parser](https://github.com/z7zmey/php-parser) - A Parser for PHP written in Go.\n* [staticcheck](https://github.com/dominikh/go-tools/tree/master/cmd/staticcheck) - staticcheck is `go vet` on steroids, applying a ton of static analysis checks you might be used to from tools like ReSharper for C#.\n* [tarp](https://github.com/verygoodsoftwarenotvirus/tarp) - tarp finds functions and methods without direct unit tests in Go source code.\n* [unconvert](https://github.com/mdempsky/unconvert) - Remove unnecessary type conversions from Go source.\n* [unused](https://github.com/dominikh/go-tools/tree/master/cmd/unused) - unused checks Go code for unused constants, variables, functions and types.\n* [validate](https://github.com/mccoyst/validate) - Automatically validates struct fields with tags.\n\n## Editor Plugins\n\n* [Go plugin for JetBrains IDEs](https://plugins.jetbrains.com/plugin/9568-go) - Go plugin for JetBrains IDEs.\n* [go-language-server](https://github.com/theia-ide/go-language-server) - A wrapper to turn the VSCode go extension into a language server supporting the language-server-protocol.\n* [go-mode](https://github.com/dominikh/go-mode.el) - Go mode for GNU/Emacs.\n* [go-plus](https://github.com/joefitzgerald/go-plus) - Go (Golang) Package For Atom That Adds Autocomplete, Formatting, Syntax Checking, Linting and Vetting.\n* [gocode](https://github.com/nsf/gocode) - Autocompletion daemon for the Go programming language.\n* [GoSublime](https://github.com/DisposaBoy/GoSublime) - Golang plugin collection for the text editor SublimeText 3 providing code completion and other IDE-like features.\n* [gounit-vim](https://github.com/hexdigest/gounit-vim) - Vim plugin for generating Go tests based on the function's or method's signature.\n* [theia-go-extension](https://github.com/theia-ide/theia-go-extension) - Go language support for the Theia IDE.\n* [velour](https://github.com/velour/velour) - IRC client for the acme editor.\n* [vim-compiler-go](https://github.com/rjohnsondev/vim-compiler-go) - Vim plugin to highlight syntax errors on save.\n* [vim-go](https://github.com/fatih/vim-go) - Go development plugin for Vim.\n* [vscode-go](https://github.com/Microsoft/vscode-go) - Extension for Visual Studio Code (VS Code) which provides support for the Go language.\n* [Watch](https://github.com/eaburns/Watch) - Runs a command in an acme win on file changes.\n\n## Go Generate Tools\n\n* [generic](https://github.com/usk81/generic) - flexible data type for Go.\n* [genny](https://github.com/cheekybits/genny) - Elegant generics for Go.\n* [gocontracts](https://github.com/Parquery/gocontracts) - brings design-by-contract to Go by synchronizing the code with the documentation.\n* [gonerics](http://github.com/bouk/gonerics) - Idiomatic Generics in Go.\n* [gotests](https://github.com/cweill/gotests) - Generate Go tests from your source code.\n* [gounit](https://github.com/hexdigest/gounit) - Generate Go tests using your own templates.\n* [re2dfa](https://github.com/opennota/re2dfa) - Transform regular expressions into finite state machines and output Go source code.\n\n## Go Tools\n\n* [colorgo](https://github.com/songgao/colorgo) - Wrapper around `go` command for colorized `go build` output.\n* [depth](https://github.com/KyleBanks/depth) - Visualize dependency trees of any package by analyzing imports.\n* [gb](https://getgb.io/) - An easy to use project based build tool for the Go programming language.\n* [generator-go-lang](https://github.com/axelspringer/generator-go-lang) - A [Yeoman](http://yeoman.io) generator to get new Go projects started.\n* [go-callvis](https://github.com/TrueFurby/go-callvis) - Visualize call graph of your Go program using dot format.\n* [go-pkg-complete](https://github.com/skelterjohn/go-pkg-complete) - Bash completion for go and wgo.\n* [go-swagger](https://github.com/go-swagger/go-swagger) - Swagger 2.0 implementation for go. Swagger is a simple yet powerful representation of your RESTful API.\n* [JSON-to-Go](https://mholt.github.io/json-to-go/) - Convert JSON to Go struct.\n* [OctoLinker](https://github.com/OctoLinker/browser-extension) - Navigate through go files efficiently with the OctoLinker browser extension for GitHub.\n* [richgo](https://github.com/kyoh86/richgo) - Enrich `go test` outputs with text decorations.\n* [rts](https://github.com/galeone/rts) - RTS: response to struct. Generates Go structs from server responses.\n\n## Software Packages\n\n*Software written in Go.*\n\n### DevOps Tools\n\n* [aptly](https://github.com/smira/aptly) - aptly is a Debian repository management tool.\n* [aurora](https://github.com/xuri/aurora) - Cross-platform web-based Beanstalkd queue server console.\n* [awsenv](https://github.com/soniah/awsenv) - Small binary that loads Amazon (AWS) environment variables for a profile.\n* [Banshee](https://github.com/eleme/banshee) - Anomalies detection system for periodic metrics.\n* [Blast](https://github.com/dave/blast) - A simple tool for API load testing and batch jobs.\n* [bombardier](https://github.com/codesenberg/bombardier) - Fast cross-platform HTTP benchmarking tool.\n* [bosun](https://github.com/bosun-monitor/bosun) - Time Series Alerting Framework.\n* [DepCharge](https://github.com/centerorbit/depcharge) - Helps orchestrating the execution of commands across the many dependencies in larger projects.\n* [dogo](https://github.com/liudng/dogo) - Monitoring changes in the source file and automatically compile and run (restart).\n* [drone-jenkins](https://github.com/appleboy/drone-jenkins) - Trigger downstream Jenkins jobs using a binary, docker or Drone CI.\n* [drone-scp](https://github.com/appleboy/drone-scp) - Copy files and artifacts via SSH using a binary, docker or Drone CI.\n* [Dropship](https://github.com/chrismckenzie/dropship) - Tool for deploying code via cdn.\n* [easyssh-proxy](https://github.com/appleboy/easyssh-proxy) - Golang package for easy remote execution through SSH and SCP downloading via `ProxyCommand`.\n* [fac](https://github.com/mkchoi212/fac) - Command-line user interface to fix git merge conflicts.\n* [gaia](https://github.com/gaia-pipeline/gaia) - Build powerful pipelines in any programming language.\n* [Gitea](https://github.com/go-gitea/gitea) - Fork of Gogs, entirely community driven.\n* [gitea-github-migrator](https://git.jonasfranz.software/JonasFranzDEV/gitea-github-migrator) - Migrate all your GitHub repositories, issues, milestones and labels to your Gitea instance.\n* [go-furnace](https://github.com/go-furnace/go-furnace) - Hosting solution written in Go. Deploy your Application with ease on AWS, GCP or DigitalOcean.\n* [go-selfupdate](https://github.com/sanbornm/go-selfupdate) - Enable your Go applications to self update.\n* [gobrew](https://github.com/cryptojuice/gobrew) - gobrew lets you easily switch between multiple versions of go.\n* [godbg](https://github.com/sirnewton01/godbg) - Web-based gdb front-end application.\n* [Gogs](https://gogs.io/) - A Self Hosted Git Service in the Go Programming Language.\n* [gonative](https://github.com/inconshreveable/gonative) - Tool which creates a build of Go that can cross compile to all platforms while still using the Cgo-enabled versions of the stdlib packages.\n* [govvv](https://github.com/ahmetalpbalkan/govvv) - ‚Äúgo build‚Äù wrapper to easily add version information into Go binaries.\n* [gox](https://github.com/mitchellh/gox) - Dead simple, no frills Go cross compile tool.\n* [goxc](https://github.com/laher/goxc) - build tool for Go, with a focus on cross-compiling and packaging.\n* [grapes](https://github.com/yaronsumel/grapes) - Lightweight tool designed to distribute commands over ssh with ease.\n* [GVM](https://github.com/moovweb/gvm) - GVM provides an interface to manage Go versions.\n* [Hey](https://github.com/rakyll/hey) - Hey is a tiny program that sends some load to a web application.\n* [kala](https://github.com/ajvb/kala) - Simplistic, modern, and performant job scheduler.\n* [kcli](https://github.com/cswank/kcli) - Command line tool for inspecting kafka topics/partitions/messages.\n* [kubernetes](https://github.com/kubernetes/kubernetes) - Container Cluster Manager from Google.\n* [lstags](https://github.com/ivanilves/lstags) - Tool and API to sync Docker images across different registries.\n* [lwc](https://github.com/timdp/lwc) - A live-updating version of the UNIX wc command.\n* [manssh](https://github.com/xwjdsh/manssh) - manssh is a command line tool for managing your ssh alias config easily.\n* [Moby](https://github.com/moby/moby) - Collaborative project for the container ecosystem to assemble container-based systems.\n* [Mora](https://github.com/emicklei/mora) - REST server for accessing MongoDB documents and meta data.\n* [ostent](https://github.com/ostrost/ostent) - collects and displays system metrics and optionally relays to Graphite and/or InfluxDB.\n* [Packer](https://github.com/mitchellh/packer) - Packer is a tool for creating identical machine images for multiple platforms from a single source configuration.\n* [Pewpew](https://github.com/bengadbois/pewpew) - Flexible HTTP command line stress tester.\n* [Rodent](https://github.com/alouche/rodent) - Rodent helps you manage Go versions, projects and track dependencies.\n* [s3gof3r](https://github.com/rlmcpherson/s3gof3r) - Small utility/library optimized for high speed transfer of large objects into and out of Amazon S3.\n* [Scaleway-cli](https://github.com/scaleway/scaleway-cli) - Manage BareMetal Servers from Command Line (as easily as with Docker).\n* [sg](https://github.com/ChristopherRabotin/sg) - Benchmarks a set of HTTP endpoints (like ab), with possibility to use the response code and data between each call for specific server stress based on its previous response.\n* [skm](https://github.com/TimothyYe/skm) - SKM is a simple and powerful SSH Keys Manager, it helps you to manage your multiple SSH keys easily!\n* [StatusOK](https://github.com/sanathp/statusok) - Monitor your Website and REST APIs.Get Notified through Slack, E-mail when your server is down or response time is more than expected.\n* [traefik](https://github.com/containous/traefik) - Reverse proxy and load balancer with support for multiple backends.\n* [Vegeta](https://github.com/tsenart/vegeta) - HTTP load testing tool and library. It's over 9000!\n* [webhook](https://github.com/adnanh/webhook) - Tool which allows user to create HTTP endpoints (hooks) that execute commands on the server.\n* [Wide](https://wide.b3log.org/login) - Web-based IDE for Teams using Golang.\n* [winrm-cli](https://github.com/masterzen/winrm-cli) - Cli tool to remotely execute commands on Windows machines.\n\n### Other Software\n* [borg](https://github.com/crufter/borg) - Terminal based search engine for bash snippets.\n* [boxed](https://github.com/tejo/boxed) - Dropbox based blog engine.\n* [Cherry](https://github.com/rafael-santiago/cherry) - Tiny webchat server in Go.\n* [Circuit](https://github.com/gocircuit/circuit) - Circuit is a programmable platform-as-a-service (PaaS) and/or Infrastructure-as-a-Service (IaaS), for management, discovery, synchronization and orchestration of services and hosts comprising cloud applications.\n* [Comcast](https://github.com/tylertreat/Comcast) - Simulate bad network connections.\n* [confd](https://github.com/kelseyhightower/confd) - Manage local application configuration files using templates and data from etcd or consul.\n* [DDNS](https://github.com/skibish/ddns) - Personal DDNS client with Digital Ocean Networking DNS as backend.\n* [Docker](http://www.docker.com/) - Open platform for distributed applications for developers and sysadmins.\n* [Documize](https://github.com/documize/community) - Modern wiki software that integrates data from SaaS tools.\n* [Duplicacy](https://github.com/gilbertchen/duplicacy) - A cross-platform network and cloud backup tool based on the idea of lock-free deduplication.\n* [Go Package Store](https://github.com/shurcooL/Go-Package-Store) - App that displays updates for the Go packages in your GOPATH.\n* [GoBoy](https://github.com/Humpheh/goboy) - Nintendo Game Boy Color emulator written in Go.\n* [gocc](https://github.com/goccmack/gocc) - Gocc is a compiler kit for Go written in Go.\n* [GoDNS](https://github.com/timothyye/godns) - A dynamic DNS client tool, supports DNSPod \u0026 HE.net, written in Go.\n* [GoDocTooltip](https://github.com/diankong/GoDocTooltip) - Chrome extension for Go Doc sites, which shows function description as tooltip at function list.\n* [GoLand](https://jetbrains.com/go) - Full featured cross-platform Go IDE.\n* [Gor](https://github.com/buger/gor) - Http traffic replication tool, for replaying traffic from production to stage/dev environments in real-time.\n* [hugo](http://gohugo.io/) - Fast and Modern Static Website Engine.\n* [ide](https://github.com/thestrukture/ide) - Browser accessible IDE. Designed for Go with Go.\n* [ipe](https://github.com/dimiro1/ipe) - Open source Pusher server implementation compatible with Pusher client libraries written in GO.\n* [JayDiff](https://github.com/yazgazan/jaydiff) - JSON diff utility written in Go.\n* [joincap](https://github.com/assafmo/joincap) - Command-line utility for merging multiple pcap files together.\n* [Juju](https://jujucharms.com/) - Cloud-agnostic service deployment and orchestration - supports EC2, Azure, Openstack, MAAS and more.\n* [Leaps](https://github.com/jeffail/leaps) - Pair programming service using Operational Transforms.\n* [lgo](https://github.com/yunabe/lgo) - Interactive Go programming with Jupyter. It supports code completion, code inspection and 100% Go compatibility.\n* [limetext](http://limetext.org/) - Lime Text is a powerful and elegant text editor primarily developed in Go that aims to be a Free and open-source software successor to Sublime Text.\n* [LiteIDE](https://github.com/visualfc/liteide) - LiteIDE is a simple, open source, cross-platform Go IDE.\n* [mockingjay](https://github.com/quii/mockingjay-server) - Fake HTTP servers and consumer driven contracts from one configuration file. You can also make the server randomly misbehave to help do more realistic performance tests.\n* [myLG](https://github.com/mehrdadrad/mylg) - Command Line Network Diagnostic tool written in Go.\n* [naclpipe](https://github.com/unix4fun/naclpipe) - Simple NaCL EC25519 based crypto pipe tool written in Go.\n* [nes](https://github.com/fogleman/nes) - Nintendo Entertainment System (NES) emulator written in Go.\n* [orange-cat](https://github.com/noraesae/orange-cat) - Markdown previewer written in Go.\n* [Orbit](https://github.com/gulien/orbit) - A simple tool for running commands and generating files from templates.\n* [peg](https://github.com/pointlander/peg) - Peg, Parsing Expression Grammar, is an implementation of a Packrat parser generator.\n* [Pipe](https://github.com/b3log/pipe) - A small and beautiful blogging platform.\n* [restic](https://github.com/restic/restic) - De-duplicating backup program.\n* [rkt](https://github.com/coreos/rkt) - App Container runtime that integrates with init systems, is compatible with other container formats like Docker, and supports alternative execution engines like KVM.\n* [Seaweed File System](https://github.com/chrislusf/seaweedfs) - Fast, Simple and Scalable Distributed File System with O(1) disk seek.\n* [shell2http](https://github.com/msoap/shell2http) - Executing shell commands via http server (for prototyping or remote control).\n* [snap](https://github.com/intelsdi-x/snap) - Powerful telemetry framework.\n* [Snitch](https://github.com/lucasgomide/snitch) - Simple way to notify your team and many tools when someone has deployed any application via Tsuru.\n* [Stack Up](https://github.com/pressly/sup) - Stack Up, a super simple deployment tool - just Unix - think of it like 'make' for a network of servers.\n* [syncthing](https://syncthing.net/) - Open, decentralized file synchronization tool and protocol.\n* [Tenyks](https://github.com/kyleterry/tenyks) - Service oriented IRC bot using Redis and JSON for messaging.\n* [term-quiz](https://github.com/crazcalm/term-quiz) - Quizzes for your terminal.\n* [toxiproxy](https://github.com/shopify/toxiproxy) - Proxy to simulate network and system conditions for automated tests.\n* [tsuru](https://tsuru.io/) - Extensible and open source Platform as a Service software.\n* [vFlow](https://github.com/VerizonDigital/vflow) - High-performance, scalable and reliable IPFIX, sFlow and Netflow collector.\n* [wellington](https://github.com/wellington/wellington) - Sass project management tool, extends the language with sprite functions (like Compass).\n\n# Resources\n\n*Where to discover new Go libraries.*\n\n## Benchmarks\n\n* [autobench](https://github.com/davecheney/autobench) - Framework to compare the performance between different Go versions.\n* [go-benchmark-app](https://github.com/mrLSD/go-benchmark-app) - Powerful HTTP-benchmark tool mixed with –êb, Wrk, Siege tools. Gathering statistics and various parameters for benchmarks and comparison results.\n* [go-benchmarks](https://github.com/tylertreat/go-benchmarks) - Few miscellaneous Go microbenchmarks. Compare some language features to alternative approaches.\n* [go-http-routing-benchmark](https://github.com/julienschmidt/go-http-routing-benchmark) - Go HTTP request router benchmark and comparison.\n* [go-type-assertion-benchmark](https://github.com/hgfischer/go-type-assertion-benchmark) - Naive performance test of two ways to do type assertion in Go.\n* [go-web-framework-benchmark](https://github.com/smallnest/go-web-framework-benchmark) - Go web framework benchmark.\n* [go_serialization_benchmarks](https://github.com/alecthomas/go_serialization_benchmarks) - Benchmarks of Go serialization methods.\n* [gocostmodel](https://github.com/PuerkitoBio/gocostmodel) - Benchmarks of common basic operations for the Go language.\n* [golang-micro-benchmarks](https://github.com/amscanne/golang-micro-benchmarks) - Tiny collection of Go micro benchmarks. The intent is to compare some language features to others.\n* [golang-sql-benchmark](https://github.com/tyler-smith/golang-sql-benchmark) - Collection of benchmarks for popular Go database/SQL utilities.\n* [gospeed](https://github.com/feyeleanor/GoSpeed) - Go micro-benchmarks for calculating the speed of language constructs.\n* [kvbench](https://github.com/jimrobinson/kvbench) - Key/Value database benchmark.\n* [skynet](https://github.com/atemerev/skynet) - Skynet 1M threads microbenchmark.\n* [speedtest-resize](https://github.com/fawick/speedtest-resize) - Compare various Image resize algorithms for the Go language.\n\n## Conferences\n\n* [Capital Go](http://www.capitalgolang.com) - Washington, D.C., USA.\n* [dotGo](http://www.dotgo.eu) - Paris, France.\n* [GoCon](http://gocon.connpass.com/) - Tokyo, Japan.\n* [GoDays](https://www.godays.io/) - Berlin, Germany.\n* [GoLab](http://golab.io/) - Florence, Italy.\n* [GolangUK](http://golanguk.com/) - London, UK.\n* [GopherChina](http://gopherchina.org) - Shanghai, China.\n* [GopherCon](http://www.gophercon.com/) - Denver, USA.\n* [GopherCon Brazil](https://gopherconbr.org) - Florian√≥polis, BR.\n* [GopherCon Europe](https://gophercon.is/) - Reykjavik, Iceland.\n* [GopherCon India](https://www.gophercon.in/) - Pune, India.\n* [GopherCon Israel](https://www.gophercon.org.il/) - Tel Aviv, Israel.\n* [GopherCon Russia](https://www.gophercon-russia.ru) - Moscow, Russia.\n* [GopherCon Singapore](https://gophercon.sg) - Mapletree Business City, Singapore.\n* [GothamGo](http://gothamgo.com/) - New York City, USA.\n* [GoWayFest](https://goway.io/) - Minsk, Belarus.\n\n## E-Books\n\n* [A Go Developer's Notebook](https://leanpub.com/GoNotebook/read)\n* [An Introduction to Programming in Go](http://www.golang-book.com/)\n* [Build Web Application with Golang](https://www.gitbook.com/book/astaxie/build-web-application-with-golang/details)\n* [Building Web Apps With Go](https://www.gitbook.com/book/codegangsta/building-web-apps-with-go/details)\n* [Go 101](https://go101.org) - A book focusing on Go syntax/semantics and all kinds of details.\n* [Go Bootcamp](http://golangbootcamp.com)\n* [GoBooks](https://github.com/dariubs/GoBooks) - A curated list of Go books.\n* [Learning Go](https://www.miek.nl/downloads/Go/Learning-Go-latest.pdf)\n* [Network Programming With Go](https://jan.newmarch.name/go/)\n* [The Go Programming Language](http://www.gopl.io/)\n* [Web Application with Go the Anti-Textbook](https://github.com/thewhitetulip/web-dev-golang-anti-textbook/)\n* [Writing A Compiler In Go](https://compilerbook.com)\n* [Writing An Interpreter In Go](https://interpreterbook.com)\n\n## Gophers\n\n* [Go-gopher-Vector](https://github.com/keygx/Go-gopher-Vector) - Go gopher Vector Data [.ai, .svg].\n* [gopher-logos](https://github.com/GolangUA/gopher-logos) - adorable gopher logos.\n* [gopher-stickers](https://github.com/tenntenn/gopher-stickers)\n* [gopher-vector](https://github.com/golang-samples/gopher-vector)\n* [gophericons](https://github.com/shalakhin/gophericons)\n* [gopherize.me](https://github.com/matryer/gopherize.me) - Gopherize yourself.\n* [gophers](https://github.com/ashleymcnamara/gophers) - Gopher artworks by Ashley McNamara.\n* [gophers](https://github.com/egonelbre/gophers) - Free gophers.\n* [gophers](https://github.com/rogeralsing/gophers) - random gopher graphics.\n* [gophers](https://github.com/sillecelik/go-gopher) - Gopher amigurumi toy pattern.\n\n## Meetups\n\n* [Go Language NYC](https://www.meetup.com/golanguagenewyork/)\n* [Go London User Group](https://www.meetup.com/Go-London-User-Group/)\n* [Go Toronto](https://www.meetup.com/go-toronto/)\n* [Go User Group Atlanta](https://www.meetup.com/Go-Users-Group-Atlanta/)\n* [GoBridge, San Francisco, CA](https://www.meetup.com/gobridge/)\n* [GoJakarta](https://www.meetup.com/GoJakarta/)\n* [Golang Amsterdam](https://www.meetup.com/golang-amsterdam/)\n* [Golang Argentina](https://www.meetup.com/Golang-Argentina/)\n* [Golang Bangalore](https://www.meetup.com/Golang-Bangalore/)\n* [Golang Belo Horizonte - Brazil](https://www.meetup.com/go-belo-horizonte/)\n* [Golang Boston](https://www.meetup.com/bostongo/)\n* [Golang Bulgaria](https://www.meetup.com/Golang-Bulgaria/)\n* [Golang Cardiff, UK](https://www.meetup.com/Cardiff-Go-Meetup/)\n* [Golang Copenhagen](https://www.meetup.com/Go-Cph/)\n* [Golang DC, Arlington, VA](https://www.meetup.com/Golang-DC/)\n* [Golang Dorset, UK](https://www.meetup.com/golang-dorset/)\n* [Golang Hamburg - Germany](https://www.meetup.com/Go-User-Group-Hamburg/)\n* [Golang Israel](https://www.meetup.com/Go-Israel/)\n* [Golang Joinville - Brazil](https://www.meetup.com/Joinville-Go-Meetup/)\n* [Golang Lima - Peru](https://www.meetup.com/Golang-Peru/)\n* [Golang Lyon](https://www.meetup.com/Golang-Lyon/)\n* [Golang Melbourne](https://www.meetup.com/golang-mel/)\n* [Golang Mountain View](https://www.meetup.com/Golang-Mountain-View/)\n* [Golang New York](https://www.meetup.com/nycgolang/)\n* [Golang Paris](https://www.meetup.com/Golang-Paris/)\n* [Golang Pune](https://www.meetup.com/Golang-Pune/)\n* [Golang Singapore](https://www.meetup.com/golangsg/)\n* [Golang Stockholm](https://www.meetup.com/Go-Stockholm/)\n* [Golang Sydney, AU](https://www.meetup.com/golang-syd/)\n* [Golang S√£o Paulo - Brazil](https://www.meetup.com/golangbr/)\n* [Golang Vancouver, BC](https://www.meetup.com/golangvan/)\n* [Golang –ú–æ—Å–∫–≤–∞](https://www.meetup.com/Golang-Moscow/)\n* [Golang –ü–∏—Ç–µ—Ä](https://www.meetup.com/Golang-Peter/)\n* [Istanbul Golang](https://www.meetup.com/Istanbul-Golang/)\n* [Seattle Go Programmers](https://www.meetup.com/golang/)\n* [Ukrainian Golang User Groups](https://www.meetup.com/uagolang/)\n* [Utah Go User Group](https://www.meetup.com/utahgophers/)\n* [Women Who Go - San Francisco, CA](https://www.meetup.com/Women-Who-Go/)\n\n*Add the group of your city/country here (send **PR**)*\n\n## Twitter\n\n* [@golang](https://twitter.com/golang)\n* [@golang_news](https://twitter.com/golang_news)\n* [@golangch](https://twitter.com/golangch)\n* [@golangflow](https://twitter.com/golangflow)\n* [@golangweekly](https://twitter.com/golangweekly)\n\n## Websites\n\n* [Awesome Go @LibHunt](https://go.libhunt.com) - Your go-to Go Toolbox.\n* [Awesome Remote Job](https://github.com/lukasz-madon/awesome-remote-job) - Curated list of awesome remote jobs. A lot of them are looking for Go hackers.\n* [awesome-awesomeness](https://github.com/bayandin/awesome-awesomeness) - List of other amazingly awesome lists.\n* [CodinGame](https://www.codingame.com/) - Learn Go by solving interactive tasks using small games as practical examples.\n* [Go Blog](http://blog.golang.org) - The official Go blog.\n* [Go Challenge](http://golang-challenge.org/) - Learn Go by solving problems and getting feedback from Go experts.\n* [Go Forum](https://forum.golangbridge.org) - Forum to discuss Go.\n* [Go In 5 Minutes](https://www.goin5minutes.com/) - 5 minute screencasts focused on getting one thing done.\n* [Go Projects](https://github.com/golang/go/wiki/Projects) - List of projects on the Go community wiki.\n* [Go Report Card](https://goreportcard.com) - A report card for your Go package.\n* [gocryforhelp](https://github.com/ninedraft/gocryforhelp) - Collection of Go projects that needs help. Good place to start your open-source way in Go.\n* [godoc.org](https://godoc.org/) - Documentation for open source Go packages.\n* [Golang Flow](https://golangflow.io) - Post Updates, News, Packages and more.\n* [Golang News](https://golangnews.com) - Links and news about Go programming.\n* [golang-graphics](https://github.com/mholt/golang-graphics) - Collection of Go images, graphics, and art.\n* [golang-nuts](https://groups.google.com/forum/#!forum/golang-nuts) - Go mailing list.\n* [Google Plus Community](https://plus.google.com/communities/114112804251407510571) - The Google+ community for #golang enthusiasts.\n* [Gopher Community Chat](https://invite.slack.golangbridge.org) - Join Our New Slack Community For Gophers ([Understand how it came](https://blog.gopheracademy.com/gophers-slack-community/)).\n* [gowalker.org](https://gowalker.org) - Go Project API documentation.\n* [justforfunc](https://www.youtube.com/c/justforfunc) - Youtube channel dedicated to Go programming language tips and tricks, hosted by  Francesc Campoy [@francesc](https://twitter.com/francesc).\n* [r/Golang](https://www.reddit.com/r/golang) - News about Go.\n* [Trending Go repositories on GitHub today](https://github.com/trending?l=go) - Good place to find new Go libraries.\n* [TutorialEdge - Golang](https://tutorialedge.net/course/golang/)\n\n### Tutorials\n\n* [50 Shades of Go](http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/) - Traps, Gotchas, and Common Mistakes for New Golang Devs.\n* [A Tour of Go](http://tour.golang.org/) - Interactive tour of Go.\n* [Build web application with Golang](https://github.com/astaxie/build-web-application-with-golang) - Golang ebook intro how to build a web app with golang.\n* [Building Go Web Applications and Microservices Using Gin](https://semaphoreci.com/community/tutorials/building-go-web-applications-and-microservices-using-gin) - Get familiar with Gin and find out how it can help you reduce boilerplate code and build a request handling pipeline.\n* [Canceling MySQL](https://medium.com/@rocketlaunchr.cloud/canceling-mysql-in-go-827ed8f83b30) - How to cancel MySQL queries.\n* [Games With Go](http://gameswithgo.org/) - A video series teaching programming and game development.\n* [Go By Example](https://gobyexample.com/) - Hands-on introduction to Go using annotated example programs.\n* [Go Cheat Sheet](https://github.com/a8m/go-lang-cheat-sheet) - Go's reference card.\n* [Go database/sql tutorial](http://go-database-sql.org/) - Introduction to database/sql.\n* [Go Playground for iOS](https://itunes.apple.com/us/app/go-playground/id1437518275?ls=1\u0026mt=8) - Interactively edit \u0026 play Go snippets on your mobile device.\n* [Go WebAssembly Tutorial - Building a Simple Calculator](https://tutorialedge.net/golang/go-webassembly-tutorial/)\n* [Golangbot](https://golangbot.com/learn-golang-series/) - Tutorials to get started with programming in Go.\n* [Hackr.io](https://hackr.io/tutorials/learn-golang) - Learn Go from the best online golang tutorials submitted \u0026 voted by the golang programming community.\n* [How to Use Godog for Behavior-driven Development in Go](https://semaphoreci.com/community/tutorials/how-to-use-godog-for-behavior-driven-development-in-go) - Get started with Godog ‚Äî a Behavior-driven development framework for building and testing Go applications.\n* [Learn Go with TDD](https://github.com/quii/learn-go-with-tests) - Learn Go with test-driven development.\n* [package main](https://www.youtube.com/packagemain) - YouTube channel about Programming in Go.\n* [Working with Go](https://github.com/mkaz/working-with-go) - Intro to go for experienced programmers.\n* [Your basic Go](http://yourbasic.org/golang) - Huge collection of tutorials and how to's.\n"
  },
  {
    "repo": "gohugoio/hugo",
    "content": "![Hugo](https://raw.githubusercontent.com/gohugoio/hugoDocs/master/static/img/hugo-logo.png)\n\nA Fast and Flexible Static Site Generator built with love by [bep](https://github.com/bep), [spf13](http://spf13.com/) and [friends](https://github.com/gohugoio/hugo/graphs/contributors) in [Go][].\n\n[Website](https://gohugo.io) |\n[Forum](https://discourse.gohugo.io) |\n[Developer Chat (no support)](https://gitter.im/spf13/hugo) |\n[Documentation](https://gohugo.io/getting-started/) |\n[Installation Guide](https://gohugo.io/getting-started/installing/) |\n[Contribution Guide](CONTRIBUTING.md) |\n[Twitter](https://twitter.com/gohugoio)\n\n[![GoDoc](https://godoc.org/github.com/gohugoio/hugo?status.svg)](https://godoc.org/github.com/gohugoio/hugo)\n[![Linux and macOS Build Status](https://api.travis-ci.org/gohugoio/hugo.svg?branch=master\u0026label=Windows+and+Linux+and+macOS+build \"Windows, Linux and macOS Build Status\")](https://travis-ci.org/gohugoio/hugo)\n[![Dev chat at https://gitter.im/spf13/hugo](https://img.shields.io/badge/gitter-developer_chat-46bc99.svg)](https://gitter.im/spf13/hugo?utm_source=badge\u0026utm_medium=badge\u0026utm_campaign=pr-badge\u0026utm_content=badge)\n[![Go Report Card](https://goreportcard.com/badge/github.com/gohugoio/hugo)](https://goreportcard.com/report/github.com/gohugoio/hugo)\n\n## Overview\n\nHugo is a static HTML and CSS website generator written in [Go][].\nIt is optimized for speed, ease of use, and configurability.\nHugo takes a directory with content and templates and renders them into a full HTML website.\n\nHugo relies on Markdown files with front matter for metadata, and you can run Hugo from any directory.\nThis works well for shared hosts and other systems where you don‚Äôt have a privileged account.\n\nHugo renders a typical website of moderate size in a fraction of a second.\nA good rule of thumb is that each piece of content renders in around 1 millisecond.\n\nHugo is designed to work well for any kind of website including blogs, tumbles, and docs.\n\n#### Supported Architectures\n\nCurrently, we provide pre-built Hugo binaries for Windows, Linux, FreeBSD, NetBSD, macOS (Darwin), and [Android](https://gist.github.com/bep/a0d8a26cf6b4f8bc992729b8e50b480b) for x64, i386 and ARM architectures.\n\nHugo may also be compiled from source wherever the Go compiler tool chain can run, e.g. for other operating systems including DragonFly BSD, OpenBSD, Plan 9, and Solaris.\n\n**Complete documentation is available at [Hugo Documentation](https://gohugo.io/getting-started/).**\n\n## Choose How to Install\n\nIf you want to use Hugo as your site generator, simply install the Hugo binaries.\nThe Hugo binaries have no external dependencies.\n\nTo contribute to the Hugo source code or documentation, you should [fork the Hugo GitHub project](https://github.com/gohugoio/hugo#fork-destination-box) and clone it to your local machine.\n\nFinally, you can install the Hugo source code with `go`, build the binaries yourself, and run Hugo that way.\nBuilding the binaries is an easy task for an experienced `go` getter.\n\n### Install Hugo as Your Site Generator (Binary Install)\n\nUse the [installation instructions in the Hugo documentation](https://gohugo.io/getting-started/installing/).\n\n### Build and Install the Binaries from Source (Advanced Install)\n\n#### Prerequisite Tools\n\n* [Git](https://git-scm.com/)\n* [Go (at least Go 1.11)](https://golang.org/dl/)\n\n#### Fetch from GitHub\n\nSince Hugo 0.48, Hugo uses the Go Modules support built into Go 1.11 to build. The easiest is to clone Hugo in a directory outside of `GOPATH`, as in the following example:\n\n```bash\nmkdir $HOME/src\ncd $HOME/src\ngit clone https://github.com/gohugoio/hugo.git\ncd hugo\ngo install\n```\n\n**If you are a Windows user, substitute the `$HOME` environment variable above with `%USERPROFILE%`.**\n\t\n## The Hugo Documentation\n\nThe Hugo documentation now lives in its own repository, see https://github.com/gohugoio/hugoDocs. But we do keep a version of that documentation as a `git subtree` in this repository. To build the sub folder `/docs` as a Hugo site, you need to clone this repo:\n\n```bash\ngit clone git@github.com:gohugoio/hugo.git\n```\n## Contributing to Hugo\n\nFor a complete guide to contributing to Hugo, see the [Contribution Guide](CONTRIBUTING.md).\n\nWe welcome contributions to Hugo of any kind including documentation, themes,\norganization, tutorials, blog posts, bug reports, issues, feature requests,\nfeature implementations, pull requests, answering questions on the forum,\nhelping to manage issues, etc.\n\nThe Hugo community and maintainers are [very active](https://github.com/gohugoio/hugo/pulse/monthly) and helpful, and the project benefits greatly from this activity.\n\n### Asking Support Questions\n\nWe have an active [discussion forum](https://discourse.gohugo.io) where users and developers can ask questions.\nPlease don't use the GitHub issue tracker to ask questions.\n\n### Reporting Issues\n\nIf you believe you have found a defect in Hugo or its documentation, use\nthe GitHub issue tracker to report the problem to the Hugo maintainers.\nIf you're not sure if it's a bug or not, start by asking in the [discussion forum](https://discourse.gohugo.io).\nWhen reporting the issue, please provide the version of Hugo in use (`hugo version`).\n\n### Submitting Patches\n\nThe Hugo project welcomes all contributors and contributions regardless of skill or experience level.\nIf you are interested in helping with the project, we will help you with your contribution.\nHugo is a very active project with many contributions happening daily.\n\nBecause we want to create the best possible product for our users and the best contribution experience for our developers,\nwe have a set of guidelines which ensure that all contributions are acceptable.\nThe guidelines are not intended as a filter or barrier to participation.\nIf you are unfamiliar with the contribution process, the Hugo team will help you and teach you how to bring your contribution in accordance with the guidelines.\n\nFor a complete guide to contributing code to Hugo, see the [Contribution Guide](CONTRIBUTING.md).\n\n[![Analytics](https://ga-beacon.appspot.com/UA-7131036-6/hugo/readme)](https://github.com/igrigorik/ga-beacon)\n\n[Go]: https://golang.org/\n[Hugo Documentation]: https://gohugo.io/overview/introduction/\n\n## Dependencies\n\nHugo stands on the shoulder of many great open source libraries, in lexical order:\n\n | Dependency  | License |\n | :------------- | :------------- |\n | [github.com/BurntSushi/locker](https://github.com/BurntSushi/locker) | The Unlicense |\n | [github.com/BurntSushi/toml](https://github.com/BurntSushi/toml) | MIT License |\n | [github.com/PuerkitoBio/purell](https://github.com/PuerkitoBio/purell) | BSD 3-Clause \"New\" or \"Revised\" License |\n | [github.com/PuerkitoBio/urlesc](https://github.com/PuerkitoBio/urlesc) | BSD 3-Clause \"New\" or \"Revised\" License |\n | [github.com/alecthomas/chroma](https://github.com/alecthomas/chroma) |  MIT License |\n | [github.com/bep/debounce](https://github.com/bep/debounce) |    MIT License |\n | [github.com/bep/gitmap](https://github.com/bep/gitmap) |  MIT License |\n | [github.com/bep/go-tocss](https://github.com/bep/go-tocss) | MIT License |\n | [github.com/chaseadamsio/goorgeous](https://github.com/chaseadamsio/goorgeous) | MIT License |\n | [github.com/cpuguy83/go-md2man](https://github.com/cpuguy83/go-md2man) | MIT License |\n | [github.com/danwakefield/fnmatch](https://github.com/danwakefield/fnmatch) | BSD 2-Clause \"Simplified\" License |\n | [github.com/disintegration/imaging](https://github.com/disintegration/imaging) |  MIT License |\n | [github.com/dlclark/regexp2](https://github.com/dlclark/regexp2) | MIT License |\n | [github.com/eknkc/amber](https://github.com/eknkc/amber) | MIT License |\n | [github.com/fsnotify/fsnotify](https://github.com/fsnotify/fsnotify) |  BSD 3-Clause \"New\" or \"Revised\" License |\n | [github.com/gobwas/glob](https://github.com/gobwas/glob) | MIT License |\n | [github.com/gorilla/websocket](https://github.com/gorilla/websocket) |  BSD 2-Clause \"Simplified\" License |\n | [github.com/hashicorp/go-immutable-radix](https://github.com/hashicorp/go-immutable-radix) | Mozilla Public License 2.0 |\n | [github.com/hashicorp/golang-lru](https://github.com/hashicorp/golang-lru) | Mozilla Public License 2.0 |\n | [github.com/hashicorp/hcl](https://github.com/hashicorp/hcl) |   Mozilla Public License 2.0 |\n | [github.com/jdkato/prose](https://github.com/jdkato/prose) |    MIT License |\n | [github.com/kyokomi/emoji](https://github.com/kyokomi/emoji) |   MIT License |\n | [github.com/magiconair/properties](https://github.com/magiconair/properties) | BSD 2-Clause \"Simplified\" License |\n | [github.com/markbates/inflect](https://github.com/markbates/inflect) |  MIT License |\n | [github.com/mattn/go-isatty](https://github.com/mattn/go-isatty) | MIT License |\n | [github.com/mattn/go-runewidth](https://github.com/mattn/go-runewidth) | MIT License |\n | [github.com/miekg/mmark](https://github.com/miekg/mmark) | Simplified BSD License |\n | [github.com/mitchellh/hashstructure](https://github.com/mitchellh/hashstructure) | MIT License |\n | [github.com/mitchellh/mapstructure](https://github.com/mitchellh/mapstructure) | MIT License |\n | [github.com/muesli/smartcrop](https://github.com/muesli/smartcrop) |   MIT License |\n | [github.com/nicksnyder/go-i18n](https://github.com/nicksnyder/go-i18n) | MIT License |\n | [github.com/olekukonko/tablewriter](https://github.com/olekukonko/tablewriter) | MIT License |\n | [github.com/pelletier/go-toml](https://github.com/pelletier/go-toml) |  MIT License |\n | [github.com/pkg/errors](https://github.com/pkg/errors) |  BSD 2-Clause \"Simplified\" License |\n | [github.com/russross/blackfriday](https://github.com/russross/blackfriday)  | Simplified BSD License |\n | [github.com/shurcooL/sanitized_anchor_name](https://github.com/shurcooL/sanitized_anchor_name) | MIT License |\n | [github.com/spf13/afero](https://github.com/spf13/afero) | Apache License 2.0 |\n | [github.com/spf13/cast](https://github.com/spf13/cast) |  MIT License |\n | [github.com/spf13/cobra](https://github.com/spf13/cobra) | Apache License 2.0 |\n | [github.com/spf13/fsync](https://github.com/spf13/fsync) | MIT License |\n | [github.com/spf13/jwalterweatherman](https://github.com/spf13/jwalterweatherman) | MIT License |\n | [github.com/spf13/nitro](https://github.com/spf13/nitro) | Apache License 2.0 |\n | [github.com/spf13/pflag](https://github.com/spf13/pflag) | BSD 3-Clause \"New\" or \"Revised\" License |\n | [github.com/spf13/viper](https://github.com/spf13/viper) | MIT License |\n | [github.com/tdewolff/minify](https://github.com/tdewolff/minify) | MIT License |\n | [github.com/tdewolff/parse](https://github.com/tdewolff/parse) | MIT License |\n | [github.com/wellington/go-libsass](https://github.com/wellington/go-libsass) | Apache License 2.0 |\n | [github.com/yosssi/ace](https://github.com/yosssi/ace) |  MIT License |\n | [golang.org/x/image](https://golang.org/x/image) | BSD 3-Clause \"New\" or \"Revised\" License |\n | [golang.org/x/net](https://golang.org/x/net) | BSD 3-Clause \"New\" or \"Revised\" License |\n | [golang.org/x/sync](https://golang.org/x/sync) | BSD 3-Clause \"New\" or \"Revised\" License |\n | [golang.org/x/sys](https://golang.org/x/sys) | BSD 3-Clause \"New\" or \"Revised\" License |\n | [golang.org/x/text](https://golang.org/x/text) | BSD 3-Clause \"New\" or \"Revised\" License\n | [gopkg.in/yaml.v2](https://gopkg.in/yaml.v2) |    Apache License 2.0 |\n\n  \n \n  \n \n \n \n"
  },
  {
    "repo": "gogs/gogs",
    "content": "Gogs [![Build Status](https://travis-ci.org/gogs/gogs.svg?branch=master)](https://travis-ci.org/gogs/gogs) [![Build status](https://ci.appveyor.com/api/projects/status/b9uu5ejl933e2wlt/branch/master?svg=true)](https://ci.appveyor.com/project/Unknwon/gogs/branch/master) [![Crowdin](https://d322cqt584bo4o.cloudfront.net/gogs/localized.svg)](https://crowdin.com/project/gogs) [![Discord](https://img.shields.io/discord/382595433060499458.svg)](https://discord.gg/9aqdHU7)\n=====================\n\n![](https://github.com/gogs/gogs/blob/master/public/img/gogs-large-resize.png?raw=true)\n\n##### Current tip version: [`.VERSION`](templates/.VERSION) (see [Releases](https://github.com/gogs/gogs/releases) for binary versions)\n\n| Web | UI  | Preview  |\n|:-------------:|:-------:|:-------:|\n|![Dashboard](https://gogs.io/img/screenshots/1.png)|![Repository](https://gogs.io/img/screenshots/2.png)|![Editor](https://gogs.io/img/screenshots/3.png)|\n|![Profile](https://gogs.io/img/screenshots/4.png)|![Diff](https://gogs.io/img/screenshots/5.png)|![Repository Settings](https://gogs.io/img/screenshots/6.png?ts=20170322)|\n|![Webhook](https://gogs.io/img/screenshots/7.png)|![Organization](https://gogs.io/img/screenshots/8.png)|![Admin Dashboard](https://gogs.io/img/screenshots/9.png)|\n\n### Important Notes\n\n1. **YOU MUST READ [Contributing Code](https://github.com/gogs/gogs/wiki/Contributing-Code) BEFORE STARTING TO WORK ON A PULL REQUEST**.\n2. Due to testing purpose, data of [try.gogs.io](https://try.gogs.io) was reset in **Jan 28, 2015** and will reset multiple times after. Please do **NOT** put your important data on the site.\n3. The demo site [try.gogs.io](https://try.gogs.io) is running under `develop` branch.\n4. If you think there are vulnerabilities in the project, please talk privately to **u@gogs.io**, and the name you want to be credited as. Thanks!\n5. If you're interested in using APIs, we have experimental support with [documentation](https://github.com/gogs/go-gogs-client/wiki).\n6. If your team/company is using Gogs and would like to put your logo on [our website](https://gogs.io), contact us by any means.\n\n[ÁÆÄ‰Ωì‰∏≠Êñá](README_ZH.md)\n\n## Vision\n\nThis project aims to build a simple, stable and extensible self-hosted Git service that can be setup in the most painless way. With Go, this can be done with an independent binary distribution across **ALL platforms** that Go supports, including Linux, macOS, Windows and ARM.\n\n## Overview\n\n- Please see the [Documentation](https://gogs.io/docs/intro) for common usages and change log.\n- Want to try it before doing anything else? Do it [online](https://try.gogs.io/gogs/gogs)!\n- Having trouble? Get help with [Troubleshooting](https://gogs.io/docs/intro/troubleshooting.html) or [User Forum](https://discuss.gogs.io/).\n- Want to help with localization? Check out the [guide](https://gogs.io/docs/features/i18n.html)!\n\n## Features\n\n- Activity timeline\n- SSH and HTTP/HTTPS protocols\n- SMTP/LDAP/Reverse proxy authentication\n- Reverse proxy with sub-path\n- Account/Organization/Repository management\n- Add/Remove repository collaborators\n- Repository/Organization webhooks (including Slack and Discord)\n- Repository Git hooks/deploy keys\n- Repository issues, pull requests, wiki and protected branches\n- Migrate and mirror repository and its wiki\n- Web editor for repository files and wiki\n- Jupyter Notebook\n- Two-factor authentication\n- Gravatar and Federated avatar with custom source\n- Mail service\n- Administration panel\n- Supports MySQL, PostgreSQL, SQLite3, MSSQL and [TiDB](https://github.com/pingcap/tidb) (via MySQL protocol)\n- Multi-language support ([29 languages](https://crowdin.com/project/gogs))\n\n## Hardware Requirements\n\n- A Raspberry Pi or $5 Digital Ocean Droplet is more than enough to get you started. Some even use 64MB RAM Docker [CaaS](https://blog.docker.com/2016/02/containers-as-a-service-caas/).\n- 2 CPU cores and 512MB RAM would be the baseline for teamwork.\n- Increase CPU cores when your team size gets significantly larger, memory footprint remains low.\n\n## Browser Support\n\n- Please see [Semantic UI](https://github.com/Semantic-Org/Semantic-UI#browser-support) for specific versions of supported browsers.\n- The smallest resolution officially supported is **1024*768**, however the UI may still look right in smaller resolutions, but no promises or fixes.\n\n## Installation\n\nMake sure you install the [prerequisites](https://gogs.io/docs/installation) first.\n\nThere are 5 ways to install Gogs:\n\n- [Install from binary](https://gogs.io/docs/installation/install_from_binary.html)\n- [Install from source](https://gogs.io/docs/installation/install_from_source.html)\n- [Install from packages](https://gogs.io/docs/installation/install_from_packages.html)\n- [Ship with Docker](https://github.com/gogs/gogs/tree/master/docker)\n- [Install with Vagrant](https://github.com/geerlingguy/ansible-vagrant-examples/tree/master/gogs)\n\n### Tutorials\n\n- [How To Set Up Gogs on Ubuntu 14.04](https://www.digitalocean.com/community/tutorials/how-to-set-up-gogs-on-ubuntu-14-04)\n- [Run your own GitHub-like service with the help of Docker](http://blog.hypriot.com/post/run-your-own-github-like-service-with-docker/)\n- [Dockerized Gogs git server and alpine postgres in 20 minutes or less](http://garthwaite.org/docker-gogs.html)\n- [Host Your Own Private GitHub with Gogs](https://eladnava.com/host-your-own-private-github-with-gogs-io/)\n- [‰ΩøÁî® Gogs Êê≠Âª∫Ëá™Â∑±ÁöÑ Git ÊúçÂä°Âô®](https://mynook.info/blog/post/host-your-own-git-server-using-gogs) (Chinese)\n- [ÈòøÈáå‰∫ë‰∏ä Ubuntu 14.04 64 ‰ΩçÂÆâË£Ö Gogs](http://my.oschina.net/luyao/blog/375654) (Chinese)\n- [Installing Gogs on FreeBSD](https://www.codejam.info/2015/03/installing-gogs-on-freebsd.html)\n- [Gogs on Raspberry Pi](http://blog.meinside.pe.kr/Gogs-on-Raspberry-Pi/)\n- [Cloudflare Full SSL with Gogs using NGINX](http://www.listekconsulting.com/articles/cloudflare-full-ssl-with-gogs-go-git-service-using-nginx/)\n\n### Screencasts\n\n- [How to install Gogs on a Linux Server (DigitalOcean)](https://www.youtube.com/watch?v=deSfX0gqefE)\n- [Instalando Gogs no Ubuntu](https://www.youtube.com/watch?v=4UkHAR1F7ZA) (Portugu√™s)\n\n### Deploy to Cloud\n\n- [OpenShift](https://github.com/tkisme/gogs-openshift)\n- [Cloudron](https://cloudron.io/appstore.html#io.gogs.cloudronapp)\n- [Scaleway](https://www.scaleway.com/imagehub/gogs/)\n- [Sandstorm](https://github.com/cem/gogs-sandstorm)\n- [sloppy.io](https://github.com/sloppyio/quickstarters/tree/master/gogs)\n- [YunoHost](https://github.com/YunoHost-Apps/gogs_ynh)\n- [DPlatform](https://github.com/j8r/DPlatform)\n\n## Software and Service Support\n\n- [Drone](https://github.com/drone/drone) (CI)\n- [Jenkins](https://wiki.jenkins-ci.org/display/JENKINS/Gogs+Webhook+Plugin) (CI)\n- [Fabric8](http://fabric8.io/) (DevOps)\n- [Taiga](https://taiga.io/) (Project Management)\n- [Puppet](https://forge.puppetlabs.com/Siteminds/gogs) (IT)\n- [Kanboard](http://kanboard.net/plugin/gogs-webhook) (Project Management)\n- [BearyChat](https://bearychat.com/) (Team Communication)\n- [HiWork](http://www.hiwork.cc/) (Team Communication)\n- [GitPitch](https://gitpitch.com/) (Markdown Presentations)\n\n### Product Support\n\n- [Synology](https://www.synology.com) (Docker)\n- [One Space](http://www.onespace.cc) (App Store)\n\n## Acknowledgments\n\n- Thanks [Egon Elbre](https://twitter.com/egonelbre) for designing logo.\n- Thanks [Crowdin](https://crowdin.com/project/gogs) for sponsoring open source translation plan.\n- Thanks [DigitalOcean](https://www.digitalocean.com) and [VPSServer](https://www.vpsserver.com/) for sponsoring VPS service.\n- Thanks [KeyCDN](https://www.keycdn.com/) for sponsoring CDN service.\n\n## Contributors\n\n- See [contributors page](https://github.com/gogs/gogs/graphs/contributors) for top 100 contributors.\n- See [TRANSLATORS](conf/locale/TRANSLATORS) for public list of translators.\n\n## License\n\nThis project is under the MIT License. See the [LICENSE](https://github.com/gogs/gogs/blob/master/LICENSE) file for the full license text.\n\n[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Fgogs%2Fgogs.svg?type=small)](https://app.fossa.io/projects/git%2Bgithub.com%2Fgogs%2Fgogs?ref=badge_small)\n"
  },
  {
    "repo": "astaxie/build-web-application-with-golang",
    "content": "# Multiple Language Versions\r\n\r\n* [Deutsch](de/preface.md)\r\n* [English](en/preface.md)\r\n* [Espa√±ol](es/preface.md)\r\n* [Fran√ßais](fr/preface.md)\r\n* [Portugu√™s - Brasil](pt-br/preface.md)\r\n* [–†—É—Å—Å–∫–∏–π](ru/preface.md)\r\n* [T√ºrk√ße](tr/preface.md)\r\n* [‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ](bn/preface.md)\r\n* [Êó•Êú¨Ë™û](ja/preface.md)\r\n* [‰∏≠Êñá](zh/preface.md)\r\n* [Ÿæÿßÿ±ÿ≥€å](fa/preface.md)\r\n\r\n# Donate\r\n\r\nAliPay: \u003cimg src=\"zh/images/alipay.png\" alt=\"alipay\" width=\"100\" height=\"100\"\u003e\r\n\r\nEnglish Donate:[donate](http://beego.me/donate)\r\n\r\n## Community\r\nQQÁæ§Ôºö148647580\r\n\r\nBBSÔºö[http://gocn.io/](http://gocn.io/)\r\n\r\n## Contributors\r\n\r\n- See [contributors page](https://github.com/astaxie/build-web-application-with-golang/graphs/contributors) for full list of contributors.\r\n\r\n## Acknowledgments\r\n\r\n - [ÂõõÊúà‰ªΩÂπ≥Ê∞ë](https://plus.google.com/110445767383269817959) (review‰ª£Á†Å)\r\n - [Hong Ruiqi](https://github.com/hongruiqi) (review‰ª£Á†Å)\r\n - [BianJiang](https://github.com/border) (ÁºñÂÜôgoÂºÄÂèëÂ∑•ÂÖ∑VimÂíåEmacsÁöÑËÆæÁΩÆ)\r\n - [Oling Cat](https://github.com/OlingCat)(review‰ª£Á†Å)\r\n - [Wenlei Wu](mailto:spadesacn@gmail.com)(Êèê‰æõ‰∏Ä‰∫õÂõæÁâáÂ±ïÁ§∫)\r\n - [polaris](https://github.com/polaris1119)(review‰π¶)\r\n - [Èõ®Áóï](https://github.com/qyuhen)(reviewÁ¨¨‰∫åÁ´†)\r\n\r\n## License\r\nBook License: [CC BY-SA 3.0 License](http://creativecommons.org/licenses/by-sa/3.0/)\r\n\r\nCode License: [BSD 3-Clause License](\u003chttps://github.com/astaxie/build-web-application-with-golang/blob/master/LICENSE.md\u003e)\r\n"
  },
  {
    "repo": "syncthing/syncthing",
    "content": "[![Syncthing][14]][15]\n\n---\n\n[![Latest Downloads](https://img.shields.io/badge/latest-downloads-brightgreen.svg?style=flat-square)](https://build.syncthing.net/latest/)\n[![Latest Linux \u0026 Cross Build](https://img.shields.io/teamcity/https/build.syncthing.net/s/Syncthing_BuildLinuxCross.svg?style=flat-square\u0026label=linux+%26+cross+build)](https://build.syncthing.net/viewType.html?buildTypeId=Syncthing_BuildLinuxCross\u0026guest=1)\n[![Latest Windows Build](https://img.shields.io/teamcity/https/build.syncthing.net/s/Syncthing_BuildWindows.svg?style=flat-square\u0026label=windows+build)](https://build.syncthing.net/viewType.html?buildTypeId=Syncthing_BuildWindows\u0026guest=1)\n[![Latest Mac Build](https://img.shields.io/teamcity/https/build.syncthing.net/s/Syncthing_BuildMac.svg?style=flat-square\u0026label=mac+build)](https://build.syncthing.net/viewType.html?buildTypeId=Syncthing_BuildMac\u0026guest=1)\n[![MPLv2 License](https://img.shields.io/badge/license-MPLv2-blue.svg?style=flat-square)](https://www.mozilla.org/MPL/2.0/)\n[![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/88/badge)](https://bestpractices.coreinfrastructure.org/projects/88)\n[![Go Report Card](https://goreportcard.com/badge/github.com/syncthing/syncthing)](https://goreportcard.com/report/github.com/syncthing/syncthing)\n\n## Goals\n\nSyncthing is a **continuous file synchronization program**. It synchronizes\nfiles between two or more computers. We strive to fulfill the goals below.\nThe goals are listed in order of importance, the most important one being\nthe first. This is the summary version of the goal list - for more\ncommentary, see the full [Goals document][13].\n\nSyncthing should be:\n\n1. **Safe From Data Loss**\n\n   Protecting the user's data is paramount. We take every reasonable\n   precaution to avoid corrupting the user's files.\n\n2. **Secure Against Attackers**\n\n   Again, protecting the user's data is paramount. Regardless of our other\n   goals we must never allow the user's data to be susceptible to\n   eavesdropping or modification by unauthorized parties.\n\n3. **Easy to Use**\n\n   Syncthing should be approachable, understandable and inclusive.\n\n4. **Automatic**\n\n   User interaction should be required only when absolutely necessary.\n\n5. **Universally Available**\n\n   Syncthing should run on every common computer. We are mindful that the\n   latest technology is not always available to any given individual.\n\n6. **For Individuals**\n\n   Syncthing is primarily about empowering the individual user with safe,\n   secure and easy to use file synchronization.\n\n7. **Everything Else**\n\n   There are many things we care about that don't make it on to the list. It\n   is fine to optimize for these values, as long as they are not in conflict\n   with the stated goals above.\n\n## Getting Started\n\nTake a look at the [getting started guide][2].\n\nThere are a few examples for keeping Syncthing running in the background\non your system in [the etc directory][3]. There are also several [GUI\nimplementations][11] for Windows, Mac and Linux.\n\n## Vote on features/bugs\n\nWe'd like to encourage you to [vote][12] on issues that matter to you.\nThis helps the team understand what are the biggest pain points for our users, and could potentially influence what is being worked on next.\n\n## Getting in Touch\n\nThe first and best point of contact is the [Forum][8]. There is also an IRC\nchannel, `#syncthing` on [freenode][4] (with a [web client][9]), for talking\ndirectly to developers and users. If you've found something that is clearly a\nbug, feel free to report it in the [GitHub issue tracker][10].\n\n## Building\n\nBuilding Syncthing from source is easy, and there's a [guide][5]\nthat describes it for both Unix and Windows systems.\n\n## Signed Releases\n\nAs of v0.10.15 and onwards release binaries are GPG signed with the key\nD26E6ED000654A3E, available from https://syncthing.net/security.html and\nmost key servers.\n\nThere is also a built in automatic upgrade mechanism (disabled in some\ndistribution channels) which uses a compiled in ECDSA signature. macOS\nbinaries are also properly code signed.\n\n## Documentation\n\nPlease see the [Syncthing documentation site][6].\n\nAll code is licensed under the [MPLv2 License][7].\n\n[1]: https://docs.syncthing.net/specs/bep-v1.html\n[2]: https://docs.syncthing.net/intro/getting-started.html\n[3]: https://github.com/syncthing/syncthing/blob/master/etc\n[4]: https://www.freenode.net/\n[5]: https://docs.syncthing.net/dev/building.html\n[6]: https://docs.syncthing.net/\n[7]: https://github.com/syncthing/syncthing/blob/master/LICENSE\n[8]: https://forum.syncthing.net/\n[9]: https://kiwiirc.com/client/irc.freenode.net/#syncthing\n[10]: https://github.com/syncthing/syncthing/issues\n[11]: https://docs.syncthing.net/users/contrib.html#gui-wrappers\n[12]: https://www.bountysource.com/teams/syncthing/issues\n[13]: https://github.com/syncthing/syncthing/blob/master/GOALS.md\n[14]: assets/logo-text-128.png\n[15]: https://syncthing.net/\n\n"
  },
  {
    "repo": "gin-gonic/gin",
    "content": "# Gin Web Framework\n\n\u003cimg align=\"right\" width=\"159px\" src=\"https://raw.githubusercontent.com/gin-gonic/logo/master/color.png\"\u003e\n\n[![Build Status](https://travis-ci.org/gin-gonic/gin.svg)](https://travis-ci.org/gin-gonic/gin)\n[![codecov](https://codecov.io/gh/gin-gonic/gin/branch/master/graph/badge.svg)](https://codecov.io/gh/gin-gonic/gin)\n[![Go Report Card](https://goreportcard.com/badge/github.com/gin-gonic/gin)](https://goreportcard.com/report/github.com/gin-gonic/gin)\n[![GoDoc](https://godoc.org/github.com/gin-gonic/gin?status.svg)](https://godoc.org/github.com/gin-gonic/gin)\n[![Join the chat at https://gitter.im/gin-gonic/gin](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/gin-gonic/gin?utm_source=badge\u0026utm_medium=badge\u0026utm_campaign=pr-badge\u0026utm_content=badge)\n[![Sourcegraph](https://sourcegraph.com/github.com/gin-gonic/gin/-/badge.svg)](https://sourcegraph.com/github.com/gin-gonic/gin?badge)\n[![Open Source Helpers](https://www.codetriage.com/gin-gonic/gin/badges/users.svg)](https://www.codetriage.com/gin-gonic/gin)\n[![Release](https://img.shields.io/github/release/gin-gonic/gin.svg?style=flat-square)](https://github.com/gin-gonic/gin/releases)\n\nGin is a web framework written in Go (Golang). It features a martini-like API with much better performance, up to 40 times faster thanks to [httprouter](https://github.com/julienschmidt/httprouter). If you need performance and good productivity, you will love Gin.\n\n![Gin console logger](https://gin-gonic.github.io/gin/other/console.png)\n\n## Contents\n\n- [Installation](#installation)\n- [Prerequisite](#prerequisite)\n- [Quick start](#quick-start)\n- [Benchmarks](#benchmarks)\n- [Gin v1.stable](#gin-v1-stable)\n- [Build with jsoniter](#build-with-jsoniter)\n- [API Examples](#api-examples)\n    - [Using GET,POST,PUT,PATCH,DELETE and OPTIONS](#using-get-post-put-patch-delete-and-options)\n    - [Parameters in path](#parameters-in-path)\n    - [Querystring parameters](#querystring-parameters)\n    - [Multipart/Urlencoded Form](#multiparturlencoded-form)\n    - [Another example: query + post form](#another-example-query--post-form)\n    - [Map as querystring or postform parameters](#map-as-querystring-or-postform-parameters)\n    - [Upload files](#upload-files)\n    - [Grouping routes](#grouping-routes)\n    - [Blank Gin without middleware by default](#blank-gin-without-middleware-by-default)\n    - [Using middleware](#using-middleware)\n    - [How to write log file](#how-to-write-log-file)\n    - [Custom Log Format](#custom-log-format)\n    - [Model binding and validation](#model-binding-and-validation)\n    - [Custom Validators](#custom-validators)\n    - [Only Bind Query String](#only-bind-query-string)\n    - [Bind Query String or Post Data](#bind-query-string-or-post-data)\n    - [Bind Uri](#bind-uri)\n    - [Bind HTML checkboxes](#bind-html-checkboxes)\n    - [Multipart/Urlencoded binding](#multiparturlencoded-binding)\n    - [XML, JSON, YAML and ProtoBuf rendering](#xml-json-yaml-and-protobuf-rendering)\n    - [JSONP rendering](#jsonp)\n    - [Serving static files](#serving-static-files)\n    - [Serving data from reader](#serving-data-from-reader)\n    - [HTML rendering](#html-rendering)\n    - [Multitemplate](#multitemplate)\n    - [Redirects](#redirects)\n    - [Custom Middleware](#custom-middleware)\n    - [Using BasicAuth() middleware](#using-basicauth-middleware)\n    - [Goroutines inside a middleware](#goroutines-inside-a-middleware)\n    - [Custom HTTP configuration](#custom-http-configuration)\n    - [Support Let's Encrypt](#support-lets-encrypt)\n    - [Run multiple service using Gin](#run-multiple-service-using-gin)\n    - [Graceful restart or stop](#graceful-restart-or-stop)\n    - [Build a single binary with templates](#build-a-single-binary-with-templates)\n    - [Bind form-data request with custom struct](#bind-form-data-request-with-custom-struct)\n    - [Try to bind body into different structs](#try-to-bind-body-into-different-structs)\n    - [http2 server push](#http2-server-push)\n    - [Define format for the log of routes](#define-format-for-the-log-of-routes)\n    - [Set and get a cookie](#set-and-get-a-cookie)\n- [Testing](#testing)\n- [Users](#users)\n\n## Installation\n\nTo install Gin package, you need to install Go and set your Go workspace first.\n\n1. Download and install it:\n\n```sh\n$ go get -u github.com/gin-gonic/gin\n```\n\n2. Import it in your code:\n\n```go\nimport \"github.com/gin-gonic/gin\"\n```\n\n3. (Optional) Import `net/http`. This is required for example if using constants such as `http.StatusOK`.\n\n```go\nimport \"net/http\"\n```\n\n### Use a vendor tool like [Govendor](https://github.com/kardianos/govendor)\n\n1. `go get` govendor\n\n```sh\n$ go get github.com/kardianos/govendor\n```\n2. Create your project folder and `cd` inside\n\n```sh\n$ mkdir -p $GOPATH/src/github.com/myusername/project \u0026\u0026 cd \"$_\"\n```\n\n3. Vendor init your project and add gin\n\n```sh\n$ govendor init\n$ govendor fetch github.com/gin-gonic/gin@v1.3\n```\n\n4. Copy a starting template inside your project\n\n```sh\n$ curl https://raw.githubusercontent.com/gin-gonic/gin/master/examples/basic/main.go \u003e main.go\n```\n\n5. Run your project\n\n```sh\n$ go run main.go\n```\n\n## Prerequisite\n\nNow Gin requires Go 1.6 or later and Go 1.7 will be required soon.\n\n## Quick start\n \n```sh\n# assume the following codes in example.go file\n$ cat example.go\n```\n\n```go\npackage main\n\nimport \"github.com/gin-gonic/gin\"\n\nfunc main() {\n\tr := gin.Default()\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\n\t\t\t\"message\": \"pong\",\n\t\t})\n\t})\n\tr.Run() // listen and serve on 0.0.0.0:8080\n}\n```\n\n```\n# run example.go and visit 0.0.0.0:8080/ping on browser\n$ go run example.go\n```\n\n## Benchmarks\n\nGin uses a custom version of [HttpRouter](https://github.com/julienschmidt/httprouter)\n\n[See all benchmarks](/BENCHMARKS.md)\n\nBenchmark name                              | (1)        | (2)         | (3) \t\t    | (4)\n--------------------------------------------|-----------:|------------:|-----------:|---------:\n**BenchmarkGin_GithubAll**                  | **30000**  |  **48375**  |     **0**  |   **0**\nBenchmarkAce_GithubAll                      |   10000    |   134059    |   13792    |   167\nBenchmarkBear_GithubAll                     |    5000    |   534445    |   86448    |   943\nBenchmarkBeego_GithubAll                    |    3000    |   592444    |   74705    |   812\nBenchmarkBone_GithubAll                     |     200    |  6957308    |  698784    |  8453\nBenchmarkDenco_GithubAll                    |   10000    |   158819    |   20224    |   167\nBenchmarkEcho_GithubAll                     |   10000    |   154700    |    6496    |   203\nBenchmarkGocraftWeb_GithubAll               |    3000    |   570806    |  131656    |  1686\nBenchmarkGoji_GithubAll                     |    2000    |   818034    |   56112    |   334\nBenchmarkGojiv2_GithubAll                   |    2000    |  1213973    |  274768    |  3712\nBenchmarkGoJsonRest_GithubAll               |    2000    |   785796    |  134371    |  2737\nBenchmarkGoRestful_GithubAll                |     300    |  5238188    |  689672    |  4519\nBenchmarkGorillaMux_GithubAll               |     100    | 10257726    |  211840    |  2272\nBenchmarkHttpRouter_GithubAll               |   20000    |   105414    |   13792    |   167\nBenchmarkHttpTreeMux_GithubAll              |   10000    |   319934    |   65856    |   671\nBenchmarkKocha_GithubAll                    |   10000    |   209442    |   23304    |   843\nBenchmarkLARS_GithubAll                     |   20000    |    62565    |       0    |     0\nBenchmarkMacaron_GithubAll                  |    2000    |  1161270    |  204194    |  2000\nBenchmarkMartini_GithubAll                  |     200    |  9991713    |  226549    |  2325\nBenchmarkPat_GithubAll                      |     200    |  5590793    | 1499568    | 27435\nBenchmarkPossum_GithubAll                   |   10000    |   319768    |   84448    |   609\nBenchmarkR2router_GithubAll                 |   10000    |   305134    |   77328    |   979\nBenchmarkRivet_GithubAll                    |   10000    |   132134    |   16272    |   167\nBenchmarkTango_GithubAll                    |    3000    |   552754    |   63826    |  1618\nBenchmarkTigerTonic_GithubAll               |    1000    |  1439483    |  239104    |  5374\nBenchmarkTraffic_GithubAll                  |     100    | 11383067    | 2659329    | 21848\nBenchmarkVulcan_GithubAll                   |    5000    |   394253    |   19894    |   609\n\n- (1): Total Repetitions achieved in constant time, higher means more confident result\n- (2): Single Repetition Duration (ns/op), lower is better\n- (3): Heap Memory (B/op), lower is better\n- (4): Average Allocations per Repetition (allocs/op), lower is better\n\n## Gin v1. stable\n\n- [x] Zero allocation router.\n- [x] Still the fastest http router and framework. From routing to writing.\n- [x] Complete suite of unit tests\n- [x] Battle tested\n- [x] API frozen, new releases will not break your code.\n\n## Build with [jsoniter](https://github.com/json-iterator/go)\n\nGin uses `encoding/json` as default json package but you can change to [jsoniter](https://github.com/json-iterator/go) by build from other tags.\n\n```sh\n$ go build -tags=jsoniter .\n```\n\n## API Examples\n\n### Using GET, POST, PUT, PATCH, DELETE and OPTIONS\n\n```go\nfunc main() {\n\t// Disable Console Color\n\t// gin.DisableConsoleColor()\n\n\t// Creates a gin router with default middleware:\n\t// logger and recovery (crash-free) middleware\n\trouter := gin.Default()\n\n\trouter.GET(\"/someGet\", getting)\n\trouter.POST(\"/somePost\", posting)\n\trouter.PUT(\"/somePut\", putting)\n\trouter.DELETE(\"/someDelete\", deleting)\n\trouter.PATCH(\"/somePatch\", patching)\n\trouter.HEAD(\"/someHead\", head)\n\trouter.OPTIONS(\"/someOptions\", options)\n\n\t// By default it serves on :8080 unless a\n\t// PORT environment variable was defined.\n\trouter.Run()\n\t// router.Run(\":3000\") for a hard coded port\n}\n```\n\n### Parameters in path\n\n```go\nfunc main() {\n\trouter := gin.Default()\n\n\t// This handler will match /user/john but will not match /user/ or /user\n\trouter.GET(\"/user/:name\", func(c *gin.Context) {\n\t\tname := c.Param(\"name\")\n\t\tc.String(http.StatusOK, \"Hello %s\", name)\n\t})\n\n\t// However, this one will match /user/john/ and also /user/john/send\n\t// If no other routers match /user/john, it will redirect to /user/john/\n\trouter.GET(\"/user/:name/*action\", func(c *gin.Context) {\n\t\tname := c.Param(\"name\")\n\t\taction := c.Param(\"action\")\n\t\tmessage := name + \" is \" + action\n\t\tc.String(http.StatusOK, message)\n\t})\n\n\trouter.Run(\":8080\")\n}\n```\n\n### Querystring parameters\n\n```go\nfunc main() {\n\trouter := gin.Default()\n\n\t// Query string parameters are parsed using the existing underlying request object.\n\t// The request responds to a url matching:  /welcome?firstname=Jane\u0026lastname=Doe\n\trouter.GET(\"/welcome\", func(c *gin.Context) {\n\t\tfirstname := c.DefaultQuery(\"firstname\", \"Guest\")\n\t\tlastname := c.Query(\"lastname\") // shortcut for c.Request.URL.Query().Get(\"lastname\")\n\n\t\tc.String(http.StatusOK, \"Hello %s %s\", firstname, lastname)\n\t})\n\trouter.Run(\":8080\")\n}\n```\n\n### Multipart/Urlencoded Form\n\n```go\nfunc main() {\n\trouter := gin.Default()\n\n\trouter.POST(\"/form_post\", func(c *gin.Context) {\n\t\tmessage := c.PostForm(\"message\")\n\t\tnick := c.DefaultPostForm(\"nick\", \"anonymous\")\n\n\t\tc.JSON(200, gin.H{\n\t\t\t\"status\":  \"posted\",\n\t\t\t\"message\": message,\n\t\t\t\"nick\":    nick,\n\t\t})\n\t})\n\trouter.Run(\":8080\")\n}\n```\n\n### Another example: query + post form\n\n```\nPOST /post?id=1234\u0026page=1 HTTP/1.1\nContent-Type: application/x-www-form-urlencoded\n\nname=manu\u0026message=this_is_great\n```\n\n```go\nfunc main() {\n\trouter := gin.Default()\n\n\trouter.POST(\"/post\", func(c *gin.Context) {\n\n\t\tid := c.Query(\"id\")\n\t\tpage := c.DefaultQuery(\"page\", \"0\")\n\t\tname := c.PostForm(\"name\")\n\t\tmessage := c.PostForm(\"message\")\n\n\t\tfmt.Printf(\"id: %s; page: %s; name: %s; message: %s\", id, page, name, message)\n\t})\n\trouter.Run(\":8080\")\n}\n```\n\n```\nid: 1234; page: 1; name: manu; message: this_is_great\n```\n\n### Map as querystring or postform parameters\n\n```\nPOST /post?ids[a]=1234\u0026ids[b]=hello HTTP/1.1\nContent-Type: application/x-www-form-urlencoded\n\nnames[first]=thinkerou\u0026names[second]=tianou\n```\n\n```go\nfunc main() {\n\trouter := gin.Default()\n\n\trouter.POST(\"/post\", func(c *gin.Context) {\n\n\t\tids := c.QueryMap(\"ids\")\n\t\tnames := c.PostFormMap(\"names\")\n\n\t\tfmt.Printf(\"ids: %v; names: %v\", ids, names)\n\t})\n\trouter.Run(\":8080\")\n}\n```\n\n```\nids: map[b:hello a:1234], names: map[second:tianou first:thinkerou]\n```\n\n### Upload files\n\n#### Single file\n\nReferences issue [#774](https://github.com/gin-gonic/gin/issues/774) and detail [example code](examples/upload-file/single).\n\n```go\nfunc main() {\n\trouter := gin.Default()\n\t// Set a lower memory limit for multipart forms (default is 32 MiB)\n\t// router.MaxMultipartMemory = 8 \u003c\u003c 20  // 8 MiB\n\trouter.POST(\"/upload\", func(c *gin.Context) {\n\t\t// single file\n\t\tfile, _ := c.FormFile(\"file\")\n\t\tlog.Println(file.Filename)\n\n\t\t// Upload the file to specific dst.\n\t\t// c.SaveUploadedFile(file, dst)\n\n\t\tc.String(http.StatusOK, fmt.Sprintf(\"'%s' uploaded!\", file.Filename))\n\t})\n\trouter.Run(\":8080\")\n}\n```\n\nHow to `curl`:\n\n```bash\ncurl -X POST http://localhost:8080/upload \\\n  -F \"file=@/Users/appleboy/test.zip\" \\\n  -H \"Content-Type: multipart/form-data\"\n```\n\n#### Multiple files\n\nSee the detail [example code](examples/upload-file/multiple).\n\n```go\nfunc main() {\n\trouter := gin.Default()\n\t// Set a lower memory limit for multipart forms (default is 32 MiB)\n\t// router.MaxMultipartMemory = 8 \u003c\u003c 20  // 8 MiB\n\trouter.POST(\"/upload\", func(c *gin.Context) {\n\t\t// Multipart form\n\t\tform, _ := c.MultipartForm()\n\t\tfiles := form.File[\"upload[]\"]\n\n\t\tfor _, file := range files {\n\t\t\tlog.Println(file.Filename)\n\n\t\t\t// Upload the file to specific dst.\n\t\t\t// c.SaveUploadedFile(file, dst)\n\t\t}\n\t\tc.String(http.StatusOK, fmt.Sprintf(\"%d files uploaded!\", len(files)))\n\t})\n\trouter.Run(\":8080\")\n}\n```\n\nHow to `curl`:\n\n```bash\ncurl -X POST http://localhost:8080/upload \\\n  -F \"upload[]=@/Users/appleboy/test1.zip\" \\\n  -F \"upload[]=@/Users/appleboy/test2.zip\" \\\n  -H \"Content-Type: multipart/form-data\"\n```\n\n### Grouping routes\n\n```go\nfunc main() {\n\trouter := gin.Default()\n\n\t// Simple group: v1\n\tv1 := router.Group(\"/v1\")\n\t{\n\t\tv1.POST(\"/login\", loginEndpoint)\n\t\tv1.POST(\"/submit\", submitEndpoint)\n\t\tv1.POST(\"/read\", readEndpoint)\n\t}\n\n\t// Simple group: v2\n\tv2 := router.Group(\"/v2\")\n\t{\n\t\tv2.POST(\"/login\", loginEndpoint)\n\t\tv2.POST(\"/submit\", submitEndpoint)\n\t\tv2.POST(\"/read\", readEndpoint)\n\t}\n\n\trouter.Run(\":8080\")\n}\n```\n\n### Blank Gin without middleware by default\n\nUse\n\n```go\nr := gin.New()\n```\n\ninstead of\n\n```go\n// Default With the Logger and Recovery middleware already attached\nr := gin.Default()\n```\n\n\n### Using middleware\n```go\nfunc main() {\n\t// Creates a router without any middleware by default\n\tr := gin.New()\n\n\t// Global middleware\n\t// Logger middleware will write the logs to gin.DefaultWriter even if you set with GIN_MODE=release.\n\t// By default gin.DefaultWriter = os.Stdout\n\tr.Use(gin.Logger())\n\n\t// Recovery middleware recovers from any panics and writes a 500 if there was one.\n\tr.Use(gin.Recovery())\n\n\t// Per route middleware, you can add as many as you desire.\n\tr.GET(\"/benchmark\", MyBenchLogger(), benchEndpoint)\n\n\t// Authorization group\n\t// authorized := r.Group(\"/\", AuthRequired())\n\t// exactly the same as:\n\tauthorized := r.Group(\"/\")\n\t// per group middleware! in this case we use the custom created\n\t// AuthRequired() middleware just in the \"authorized\" group.\n\tauthorized.Use(AuthRequired())\n\t{\n\t\tauthorized.POST(\"/login\", loginEndpoint)\n\t\tauthorized.POST(\"/submit\", submitEndpoint)\n\t\tauthorized.POST(\"/read\", readEndpoint)\n\n\t\t// nested group\n\t\ttesting := authorized.Group(\"testing\")\n\t\ttesting.GET(\"/analytics\", analyticsEndpoint)\n\t}\n\n\t// Listen and serve on 0.0.0.0:8080\n\tr.Run(\":8080\")\n}\n```\n\n### How to write log file\n```go\nfunc main() {\n    // Disable Console Color, you don't need console color when writing the logs to file.\n    gin.DisableConsoleColor()\n\n    // Logging to a file.\n    f, _ := os.Create(\"gin.log\")\n    gin.DefaultWriter = io.MultiWriter(f)\n\n    // Use the following code if you need to write the logs to file and console at the same time.\n    // gin.DefaultWriter = io.MultiWriter(f, os.Stdout)\n\n    router := gin.Default()\n    router.GET(\"/ping\", func(c *gin.Context) {\n        c.String(200, \"pong\")\n    })\n\n ¬† ¬†router.Run(\":8080\")\n}\n```\n\n### Custom Log Format\n```go\nfunc main() {\n\trouter := gin.New()\n\n\t// LoggerWithFormatter middleware will write the logs to gin.DefaultWriter\n\t// By default gin.DefaultWriter = os.Stdout\n\trouter.Use(gin.LoggerWithFormatter(func(param gin.LogFormatterParams) string {\n\n\t\t// your custom format\n\t\treturn fmt.Sprintf(\"%s - [%s] \\\"%s %s %s %d %s \\\"%s\\\" %s\\\"\\n\",\n\t\t\t\tparam.ClientIP,\n\t\t\t\tparam.TimeStamp.Format(time.RFC1123),\n\t\t\t\tparam.Method,\n\t\t\t\tparam.Path,\n\t\t\t\tparam.Request.Proto,\n\t\t\t\tparam.StatusCode,\n\t\t\t\tparam.Latency,\n\t\t\t\tparam.Request.UserAgent(),\n\t\t\t\tparam.ErrorMessage,\n\t\t)\n\t}))\n\trouter.Use(gin.Recovery())\n\n\trouter.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong\")\n\t})\n\n\trouter.Run(\":8080\")\n}\n```\n\n**Sample Output**\n```\n::1 - [Fri, 07 Dec 2018 17:04:38 JST] \"GET /ping HTTP/1.1 200 122.767¬µs \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.80 Safari/537.36\" \"\n```\n\n### Model binding and validation\n\nTo bind a request body into a type, use model binding. We currently support binding of JSON, XML, YAML and standard form values (foo=bar\u0026boo=baz).\n\nGin uses [**go-playground/validator.v8**](https://github.com/go-playground/validator) for validation. Check the full docs on tags usage [here](http://godoc.org/gopkg.in/go-playground/validator.v8#hdr-Baked_In_Validators_and_Tags).\n\nNote that you need to set the corresponding binding tag on all fields you want to bind. For example, when binding from JSON, set `json:\"fieldname\"`.\n\nAlso, Gin provides two sets of methods for binding:\n- **Type** - Must bind\n  - **Methods** - `Bind`, `BindJSON`, `BindXML`, `BindQuery`, `BindYAML`\n  - **Behavior** - These methods use `MustBindWith` under the hood. If there is a binding error, the request is aborted with `c.AbortWithError(400, err).SetType(ErrorTypeBind)`. This sets the response status code to 400 and the `Content-Type` header is set to `text/plain; charset=utf-8`. Note that if you try to set the response code after this, it will result in a warning `[GIN-debug] [WARNING] Headers were already written. Wanted to override status code 400 with 422`. If you wish to have greater control over the behavior, consider using the `ShouldBind` equivalent method.\n- **Type** - Should bind\n  - **Methods** - `ShouldBind`, `ShouldBindJSON`, `ShouldBindXML`, `ShouldBindQuery`, `ShouldBindYAML`\n  - **Behavior** - These methods use `ShouldBindWith` under the hood. If there is a binding error, the error is returned and it is the developer's responsibility to handle the request and error appropriately.\n\nWhen using the Bind-method, Gin tries to infer the binder depending on the Content-Type header. If you are sure what you are binding, you can use `MustBindWith` or `ShouldBindWith`.\n\nYou can also specify that specific fields are required. If a field is decorated with `binding:\"required\"` and has a empty value when binding, an error will be returned.\n\n```go\n// Binding from JSON\ntype Login struct {\n\tUser     string `form:\"user\" json:\"user\" xml:\"user\"  binding:\"required\"`\n\tPassword string `form:\"password\" json:\"password\" xml:\"password\" binding:\"required\"`\n}\n\nfunc main() {\n\trouter := gin.Default()\n\n\t// Example for binding JSON ({\"user\": \"manu\", \"password\": \"123\"})\n\trouter.POST(\"/loginJSON\", func(c *gin.Context) {\n\t\tvar json Login\n\t\tif err := c.ShouldBindJSON(\u0026json); err != nil {\n\t\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": err.Error()})\n\t\t\treturn\n\t\t}\n\t\t\n\t\tif json.User != \"manu\" || json.Password != \"123\" {\n\t\t\tc.JSON(http.StatusUnauthorized, gin.H{\"status\": \"unauthorized\"})\n\t\t\treturn\n\t\t} \n\t\t\n\t\tc.JSON(http.StatusOK, gin.H{\"status\": \"you are logged in\"})\n\t})\n\n\t// Example for binding XML (\n\t//\t\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n\t//\t\u003croot\u003e\n\t//\t\t\u003cuser\u003euser\u003c/user\u003e\n\t//\t\t\u003cpassword\u003e123\u003c/user\u003e\n\t//\t\u003c/root\u003e)\n\trouter.POST(\"/loginXML\", func(c *gin.Context) {\n\t\tvar xml Login\n\t\tif err := c.ShouldBindXML(\u0026xml); err != nil {\n\t\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": err.Error()})\n\t\t\treturn\n\t\t}\n\t\t\n\t\tif xml.User != \"manu\" || xml.Password != \"123\" {\n\t\t\tc.JSON(http.StatusUnauthorized, gin.H{\"status\": \"unauthorized\"})\n\t\t\treturn\n\t\t} \n\t\t\n\t\tc.JSON(http.StatusOK, gin.H{\"status\": \"you are logged in\"})\n\t})\n\n\t// Example for binding a HTML form (user=manu\u0026password=123)\n\trouter.POST(\"/loginForm\", func(c *gin.Context) {\n\t\tvar form Login\n\t\t// This will infer what binder to use depending on the content-type header.\n\t\tif err := c.ShouldBind(\u0026form); err != nil {\n\t\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": err.Error()})\n\t\t\treturn\n\t\t}\n\t\t\n\t\tif form.User != \"manu\" || form.Password != \"123\" {\n\t\t\tc.JSON(http.StatusUnauthorized, gin.H{\"status\": \"unauthorized\"})\n\t\t\treturn\n\t\t} \n\t\t\n\t\tc.JSON(http.StatusOK, gin.H{\"status\": \"you are logged in\"})\n\t})\n\n\t// Listen and serve on 0.0.0.0:8080\n\trouter.Run(\":8080\")\n}\n```\n\n**Sample request**\n```shell\n$ curl -v -X POST \\\n  http://localhost:8080/loginJSON \\\n  -H 'content-type: application/json' \\\n  -d '{ \"user\": \"manu\" }'\n\u003e POST /loginJSON HTTP/1.1\n\u003e Host: localhost:8080\n\u003e User-Agent: curl/7.51.0\n\u003e Accept: */*\n\u003e content-type: application/json\n\u003e Content-Length: 18\n\u003e\n* upload completely sent off: 18 out of 18 bytes\n\u003c HTTP/1.1 400 Bad Request\n\u003c Content-Type: application/json; charset=utf-8\n\u003c Date: Fri, 04 Aug 2017 03:51:31 GMT\n\u003c Content-Length: 100\n\u003c\n{\"error\":\"Key: 'Login.Password' Error:Field validation for 'Password' failed on the 'required' tag\"}\n```\n\n**Skip validate**\n\nWhen running the above example using the above the `curl` command, it returns error. Because the example use `binding:\"required\"` for `Password`. If use `binding:\"-\"` for `Password`, then it will not return error when running the above example again.\n\n### Custom Validators\n\nIt is also possible to register custom validators. See the [example code](examples/custom-validation/server.go).\n\n[embedmd]:# (examples/custom-validation/server.go go)\n```go\npackage main\n\nimport (\n\t\"net/http\"\n\t\"reflect\"\n\t\"time\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/gin-gonic/gin/binding\"\n\t\"gopkg.in/go-playground/validator.v8\"\n)\n\n// Booking contains binded and validated data.\ntype Booking struct {\n\tCheckIn  time.Time `form:\"check_in\" binding:\"required,bookabledate\" time_format:\"2006-01-02\"`\n\tCheckOut time.Time `form:\"check_out\" binding:\"required,gtfield=CheckIn\" time_format:\"2006-01-02\"`\n}\n\nfunc bookableDate(\n\tv *validator.Validate, topStruct reflect.Value, currentStructOrField reflect.Value,\n\tfield reflect.Value, fieldType reflect.Type, fieldKind reflect.Kind, param string,\n) bool {\n\tif date, ok := field.Interface().(time.Time); ok {\n\t\ttoday := time.Now()\n\t\tif today.Year() \u003e date.Year() || today.YearDay() \u003e date.YearDay() {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc main() {\n\troute := gin.Default()\n\n\tif v, ok := binding.Validator.Engine().(*validator.Validate); ok {\n\t\tv.RegisterValidation(\"bookabledate\", bookableDate)\n\t}\n\n\troute.GET(\"/bookable\", getBookable)\n\troute.Run(\":8085\")\n}\n\nfunc getBookable(c *gin.Context) {\n\tvar b Booking\n\tif err := c.ShouldBindWith(\u0026b, binding.Query); err == nil {\n\t\tc.JSON(http.StatusOK, gin.H{\"message\": \"Booking dates are valid!\"})\n\t} else {\n\t\tc.JSON(http.StatusBadRequest, gin.H{\"error\": err.Error()})\n\t}\n}\n```\n\n```console\n$ curl \"localhost:8085/bookable?check_in=2018-04-16\u0026check_out=2018-04-17\"\n{\"message\":\"Booking dates are valid!\"}\n\n$ curl \"localhost:8085/bookable?check_in=2018-03-08\u0026check_out=2018-03-09\"\n{\"error\":\"Key: 'Booking.CheckIn' Error:Field validation for 'CheckIn' failed on the 'bookabledate' tag\"}\n```\n\n[Struct level validations](https://github.com/go-playground/validator/releases/tag/v8.7) can also be registered this way.\nSee the [struct-lvl-validation example](examples/struct-lvl-validations) to learn more.\n\n### Only Bind Query String\n\n`ShouldBindQuery` function only binds the query params and not the post data. See the [detail information](https://github.com/gin-gonic/gin/issues/742#issuecomment-315953017).\n\n```go\npackage main\n\nimport (\n\t\"log\"\n\n\t\"github.com/gin-gonic/gin\"\n)\n\ntype Person struct {\n\tName    string `form:\"name\"`\n\tAddress string `form:\"address\"`\n}\n\nfunc main() {\n\troute := gin.Default()\n\troute.Any(\"/testing\", startPage)\n\troute.Run(\":8085\")\n}\n\nfunc startPage(c *gin.Context) {\n\tvar person Person\n\tif c.ShouldBindQuery(\u0026person) == nil {\n\t\tlog.Println(\"====== Only Bind By Query String ======\")\n\t\tlog.Println(person.Name)\n\t\tlog.Println(person.Address)\n\t}\n\tc.String(200, \"Success\")\n}\n\n```\n\n### Bind Query String or Post Data\n\nSee the [detail information](https://github.com/gin-gonic/gin/issues/742#issuecomment-264681292).\n\n```go\npackage main\n\nimport (\n\t\"log\"\n\t\"time\"\n\n\t\"github.com/gin-gonic/gin\"\n)\n\ntype Person struct {\n\tName     string    `form:\"name\"`\n\tAddress  string    `form:\"address\"`\n\tBirthday time.Time `form:\"birthday\" time_format:\"2006-01-02\" time_utc:\"1\"`\n}\n\nfunc main() {\n\troute := gin.Default()\n\troute.GET(\"/testing\", startPage)\n\troute.Run(\":8085\")\n}\n\nfunc startPage(c *gin.Context) {\n\tvar person Person\n\t// If `GET`, only `Form` binding engine (`query`) used.\n\t// If `POST`, first checks the `content-type` for `JSON` or `XML`, then uses `Form` (`form-data`).\n\t// See more at https://github.com/gin-gonic/gin/blob/master/binding/binding.go#L48\n\tif c.ShouldBind(\u0026person) == nil {\n\t\tlog.Println(person.Name)\n\t\tlog.Println(person.Address)\n\t\tlog.Println(person.Birthday)\n\t}\n\n\tc.String(200, \"Success\")\n}\n```\n\nTest it with:\n```sh\n$ curl -X GET \"localhost:8085/testing?name=appleboy\u0026address=xyz\u0026birthday=1992-03-15\"\n```\n\n### Bind Uri\n\nSee the [detail information](https://github.com/gin-gonic/gin/issues/846).\n\n```go\npackage main\n\nimport \"github.com/gin-gonic/gin\"\n\ntype Person struct {\n\tID string `uri:\"id\" binding:\"required,uuid\"`\n\tName string `uri:\"name\" binding:\"required\"`\n}\n\nfunc main() {\n\troute := gin.Default()\n\troute.GET(\"/:name/:id\", func(c *gin.Context) {\n\t\tvar person Person\n\t\tif err := c.ShouldBindUri(\u0026person); err != nil {\n\t\t\tc.JSON(400, gin.H{\"msg\": err})\n\t\t\treturn\n\t\t}\n\t\tc.JSON(200, gin.H{\"name\": person.Name, \"uuid\": person.ID})\n\t})\n\troute.Run(\":8088\")\n}\n```\n\nTest it with:\n```sh\n$ curl -v localhost:8088/thinkerou/987fbc97-4bed-5078-9f07-9141ba07c9f3\n$ curl -v localhost:8088/thinkerou/not-uuid\n```\n\n### Bind HTML checkboxes\n\nSee the [detail information](https://github.com/gin-gonic/gin/issues/129#issuecomment-124260092)\n\nmain.go\n\n```go\n...\n\ntype myForm struct {\n    Colors []string `form:\"colors[]\"`\n}\n\n...\n\nfunc formHandler(c *gin.Context) {\n    var fakeForm myForm\n    c.ShouldBind(\u0026fakeForm)\n    c.JSON(200, gin.H{\"color\": fakeForm.Colors})\n}\n\n...\n\n```\n\nform.html\n\n```html\n\u003cform action=\"/\" method=\"POST\"\u003e\n    \u003cp\u003eCheck some colors\u003c/p\u003e\n    \u003clabel for=\"red\"\u003eRed\u003c/label\u003e\n    \u003cinput type=\"checkbox\" name=\"colors[]\" value=\"red\" id=\"red\"\u003e\n    \u003clabel for=\"green\"\u003eGreen\u003c/label\u003e\n    \u003cinput type=\"checkbox\" name=\"colors[]\" value=\"green\" id=\"green\"\u003e\n    \u003clabel for=\"blue\"\u003eBlue\u003c/label\u003e\n    \u003cinput type=\"checkbox\" name=\"colors[]\" value=\"blue\" id=\"blue\"\u003e\n    \u003cinput type=\"submit\"\u003e\n\u003c/form\u003e\n```\n\nresult:\n\n```\n{\"color\":[\"red\",\"green\",\"blue\"]}\n```\n\n### Multipart/Urlencoded binding\n\n```go\npackage main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n)\n\ntype LoginForm struct {\n\tUser     string `form:\"user\" binding:\"required\"`\n\tPassword string `form:\"password\" binding:\"required\"`\n}\n\nfunc main() {\n\trouter := gin.Default()\n\trouter.POST(\"/login\", func(c *gin.Context) {\n\t\t// you can bind multipart form with explicit binding declaration:\n\t\t// c.ShouldBindWith(\u0026form, binding.Form)\n\t\t// or you can simply use autobinding with ShouldBind method:\n\t\tvar form LoginForm\n\t\t// in this case proper binding will be automatically selected\n\t\tif c.ShouldBind(\u0026form) == nil {\n\t\t\tif form.User == \"user\" \u0026\u0026 form.Password == \"password\" {\n\t\t\t\tc.JSON(200, gin.H{\"status\": \"you are logged in\"})\n\t\t\t} else {\n\t\t\t\tc.JSON(401, gin.H{\"status\": \"unauthorized\"})\n\t\t\t}\n\t\t}\n\t})\n\trouter.Run(\":8080\")\n}\n```\n\nTest it with:\n```sh\n$ curl -v --form user=user --form password=password http://localhost:8080/login\n```\n\n### XML, JSON, YAML and ProtoBuf rendering\n\n```go\nfunc main() {\n\tr := gin.Default()\n\n\t// gin.H is a shortcut for map[string]interface{}\n\tr.GET(\"/someJSON\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, gin.H{\"message\": \"hey\", \"status\": http.StatusOK})\n\t})\n\n\tr.GET(\"/moreJSON\", func(c *gin.Context) {\n\t\t// You also can use a struct\n\t\tvar msg struct {\n\t\t\tName    string `json:\"user\"`\n\t\t\tMessage string\n\t\t\tNumber  int\n\t\t}\n\t\tmsg.Name = \"Lena\"\n\t\tmsg.Message = \"hey\"\n\t\tmsg.Number = 123\n\t\t// Note that msg.Name becomes \"user\" in the JSON\n\t\t// Will output  :   {\"user\": \"Lena\", \"Message\": \"hey\", \"Number\": 123}\n\t\tc.JSON(http.StatusOK, msg)\n\t})\n\n\tr.GET(\"/someXML\", func(c *gin.Context) {\n\t\tc.XML(http.StatusOK, gin.H{\"message\": \"hey\", \"status\": http.StatusOK})\n\t})\n\n\tr.GET(\"/someYAML\", func(c *gin.Context) {\n\t\tc.YAML(http.StatusOK, gin.H{\"message\": \"hey\", \"status\": http.StatusOK})\n\t})\n\n\tr.GET(\"/someProtoBuf\", func(c *gin.Context) {\n\t\treps := []int64{int64(1), int64(2)}\n\t\tlabel := \"test\"\n\t\t// The specific definition of protobuf is written in the testdata/protoexample file.\n\t\tdata := \u0026protoexample.Test{\n\t\t\tLabel: \u0026label,\n\t\t\tReps:  reps,\n\t\t}\n\t\t// Note that data becomes binary data in the response\n\t\t// Will output protoexample.Test protobuf serialized data\n\t\tc.ProtoBuf(http.StatusOK, data)\n\t})\n\n\t// Listen and serve on 0.0.0.0:8080\n\tr.Run(\":8080\")\n}\n```\n\n#### SecureJSON\n\nUsing SecureJSON to prevent json hijacking. Default prepends `\"while(1),\"` to response body if the given struct is array values.\n\n```go\nfunc main() {\n\tr := gin.Default()\n\n\t// You can also use your own secure json prefix\n\t// r.SecureJsonPrefix(\")]}',\\n\")\n\n\tr.GET(\"/someJSON\", func(c *gin.Context) {\n\t\tnames := []string{\"lena\", \"austin\", \"foo\"}\n\n\t\t// Will output  :   while(1);[\"lena\",\"austin\",\"foo\"]\n\t\tc.SecureJSON(http.StatusOK, names)\n\t})\n\n\t// Listen and serve on 0.0.0.0:8080\n\tr.Run(\":8080\")\n}\n```\n#### JSONP\n\nUsing JSONP to request data from a server  in a different domain. Add callback to response body if the query parameter callback exists.\n\n```go\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/JSONP?callback=x\", func(c *gin.Context) {\n\t\tdata := map[string]interface{}{\n\t\t\t\"foo\": \"bar\",\n\t\t}\n\t\t\n\t\t//callback is x\n\t\t// Will output  :   x({\\\"foo\\\":\\\"bar\\\"})\n\t\tc.JSONP(http.StatusOK, data)\n\t})\n\n\t// Listen and serve on 0.0.0.0:8080\n\tr.Run(\":8080\")\n}\n```\n\n#### AsciiJSON\n\nUsing AsciiJSON to Generates ASCII-only JSON with escaped non-ASCII chracters.\n\n```go\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/someJSON\", func(c *gin.Context) {\n\t\tdata := map[string]interface{}{\n\t\t\t\"lang\": \"GOËØ≠Ë®Ä\",\n\t\t\t\"tag\":  \"\u003cbr\u003e\",\n\t\t}\n\n\t\t// will output : {\"lang\":\"GO\\u8bed\\u8a00\",\"tag\":\"\\u003cbr\\u003e\"}\n\t\tc.AsciiJSON(http.StatusOK, data)\n\t})\n\n\t// Listen and serve on 0.0.0.0:8080\n\tr.Run(\":8080\")\n}\n```\n\n#### PureJSON\n\nNormally, JSON replaces special HTML characters with their unicode entities, e.g. `\u003c` becomes  `\\u003c`. If you want to encode such characters literally, you can use PureJSON instead.\nThis feature is unavailable in Go 1.6 and lower.\n\n```go\nfunc main() {\n\tr := gin.Default()\n\t\n\t// Serves unicode entities\n\tr.GET(\"/json\", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\n\t\t\t\"html\": \"\u003cb\u003eHello, world!\u003c/b\u003e\",\n\t\t})\n\t})\n\t\n\t// Serves literal characters\n\tr.GET(\"/purejson\", func(c *gin.Context) {\n\t\tc.PureJSON(200, gin.H{\n\t\t\t\"html\": \"\u003cb\u003eHello, world!\u003c/b\u003e\",\n\t\t})\n\t})\n\t\n\t// listen and serve on 0.0.0.0:8080\n\tr.Run(\":8080\")\n}\n```\n\n### Serving static files\n\n```go\nfunc main() {\n\trouter := gin.Default()\n\trouter.Static(\"/assets\", \"./assets\")\n\trouter.StaticFS(\"/more_static\", http.Dir(\"my_file_system\"))\n\trouter.StaticFile(\"/favicon.ico\", \"./resources/favicon.ico\")\n\n\t// Listen and serve on 0.0.0.0:8080\n\trouter.Run(\":8080\")\n}\n```\n\n### Serving data from reader\n\n```go\nfunc main() {\n\trouter := gin.Default()\n\trouter.GET(\"/someDataFromReader\", func(c *gin.Context) {\n\t\tresponse, err := http.Get(\"https://raw.githubusercontent.com/gin-gonic/logo/master/color.png\")\n\t\tif err != nil || response.StatusCode != http.StatusOK {\n\t\t\tc.Status(http.StatusServiceUnavailable)\n\t\t\treturn\n\t\t}\n\n\t\treader := response.Body\n\t\tcontentLength := response.ContentLength\n\t\tcontentType := response.Header.Get(\"Content-Type\")\n\n\t\textraHeaders := map[string]string{\n\t\t\t\"Content-Disposition\": `attachment; filename=\"gopher.png\"`,\n\t\t}\n\n\t\tc.DataFromReader(http.StatusOK, contentLength, contentType, reader, extraHeaders)\n\t})\n\trouter.Run(\":8080\")\n}\n```\n\n### HTML rendering\n\nUsing LoadHTMLGlob() or LoadHTMLFiles()\n\n```go\nfunc main() {\n\trouter := gin.Default()\n\trouter.LoadHTMLGlob(\"templates/*\")\n\t//router.LoadHTMLFiles(\"templates/template1.html\", \"templates/template2.html\")\n\trouter.GET(\"/index\", func(c *gin.Context) {\n\t\tc.HTML(http.StatusOK, \"index.tmpl\", gin.H{\n\t\t\t\"title\": \"Main website\",\n\t\t})\n\t})\n\trouter.Run(\":8080\")\n}\n```\n\ntemplates/index.tmpl\n\n```html\n\u003chtml\u003e\n\t\u003ch1\u003e\n\t\t{{ .title }}\n\t\u003c/h1\u003e\n\u003c/html\u003e\n```\n\nUsing templates with same name in different directories\n\n```go\nfunc main() {\n\trouter := gin.Default()\n\trouter.LoadHTMLGlob(\"templates/**/*\")\n\trouter.GET(\"/posts/index\", func(c *gin.Context) {\n\t\tc.HTML(http.StatusOK, \"posts/index.tmpl\", gin.H{\n\t\t\t\"title\": \"Posts\",\n\t\t})\n\t})\n\trouter.GET(\"/users/index\", func(c *gin.Context) {\n\t\tc.HTML(http.StatusOK, \"users/index.tmpl\", gin.H{\n\t\t\t\"title\": \"Users\",\n\t\t})\n\t})\n\trouter.Run(\":8080\")\n}\n```\n\ntemplates/posts/index.tmpl\n\n```html\n{{ define \"posts/index.tmpl\" }}\n\u003chtml\u003e\u003ch1\u003e\n\t{{ .title }}\n\u003c/h1\u003e\n\u003cp\u003eUsing posts/index.tmpl\u003c/p\u003e\n\u003c/html\u003e\n{{ end }}\n```\n\ntemplates/users/index.tmpl\n\n```html\n{{ define \"users/index.tmpl\" }}\n\u003chtml\u003e\u003ch1\u003e\n\t{{ .title }}\n\u003c/h1\u003e\n\u003cp\u003eUsing users/index.tmpl\u003c/p\u003e\n\u003c/html\u003e\n{{ end }}\n```\n\n#### Custom Template renderer\n\nYou can also use your own html template render\n\n```go\nimport \"html/template\"\n\nfunc main() {\n\trouter := gin.Default()\n\thtml := template.Must(template.ParseFiles(\"file1\", \"file2\"))\n\trouter.SetHTMLTemplate(html)\n\trouter.Run(\":8080\")\n}\n```\n\n#### Custom Delimiters\n\nYou may use custom delims\n\n```go\n\tr := gin.Default()\n\tr.Delims(\"{[{\", \"}]}\")\n\tr.LoadHTMLGlob(\"/path/to/templates\")\n```\n\n#### Custom Template Funcs\n\nSee the detail [example code](examples/template).\n\nmain.go\n\n```go\nimport (\n    \"fmt\"\n    \"html/template\"\n    \"net/http\"\n    \"time\"\n\n    \"github.com/gin-gonic/gin\"\n)\n\nfunc formatAsDate(t time.Time) string {\n    year, month, day := t.Date()\n    return fmt.Sprintf(\"%d%02d/%02d\", year, month, day)\n}\n\nfunc main() {\n    router := gin.Default()\n    router.Delims(\"{[{\", \"}]}\")\n    router.SetFuncMap(template.FuncMap{\n        \"formatAsDate\": formatAsDate,\n    })\n    router.LoadHTMLFiles(\"./testdata/template/raw.tmpl\")\n\n    router.GET(\"/raw\", func(c *gin.Context) {\n        c.HTML(http.StatusOK, \"raw.tmpl\", map[string]interface{}{\n            \"now\": time.Date(2017, 07, 01, 0, 0, 0, 0, time.UTC),\n        })\n    })\n\n    router.Run(\":8080\")\n}\n\n```\n\nraw.tmpl\n\n```html\nDate: {[{.now | formatAsDate}]}\n```\n\nResult:\n```\nDate: 2017/07/01\n```\n\n### Multitemplate\n\nGin allow by default use only one html.Template. Check [a multitemplate render](https://github.com/gin-contrib/multitemplate) for using features like go 1.6 `block template`.\n\n### Redirects\n\nIssuing a HTTP redirect is easy. Both internal and external locations are supported.\n\n```go\nr.GET(\"/test\", func(c *gin.Context) {\n\tc.Redirect(http.StatusMovedPermanently, \"http://www.google.com/\")\n})\n```\n\n\nIssuing a Router redirect, use `HandleContext` like below.\n\n``` go\nr.GET(\"/test\", func(c *gin.Context) {\n    c.Request.URL.Path = \"/test2\"\n    r.HandleContext(c)\n})\nr.GET(\"/test2\", func(c *gin.Context) {\n    c.JSON(200, gin.H{\"hello\": \"world\"})\n})\n```\n\n\n### Custom Middleware\n\n```go\nfunc Logger() gin.HandlerFunc {\n\treturn func(c *gin.Context) {\n\t\tt := time.Now()\n\n\t\t// Set example variable\n\t\tc.Set(\"example\", \"12345\")\n\n\t\t// before request\n\n\t\tc.Next()\n\n\t\t// after request\n\t\tlatency := time.Since(t)\n\t\tlog.Print(latency)\n\n\t\t// access the status we are sending\n\t\tstatus := c.Writer.Status()\n\t\tlog.Println(status)\n\t}\n}\n\nfunc main() {\n\tr := gin.New()\n\tr.Use(Logger())\n\n\tr.GET(\"/test\", func(c *gin.Context) {\n\t\texample := c.MustGet(\"example\").(string)\n\n\t\t// it would print: \"12345\"\n\t\tlog.Println(example)\n\t})\n\n\t// Listen and serve on 0.0.0.0:8080\n\tr.Run(\":8080\")\n}\n```\n\n### Using BasicAuth() middleware\n\n```go\n// simulate some private data\nvar secrets = gin.H{\n\t\"foo\":    gin.H{\"email\": \"foo@bar.com\", \"phone\": \"123433\"},\n\t\"austin\": gin.H{\"email\": \"austin@example.com\", \"phone\": \"666\"},\n\t\"lena\":   gin.H{\"email\": \"lena@guapa.com\", \"phone\": \"523443\"},\n}\n\nfunc main() {\n\tr := gin.Default()\n\n\t// Group using gin.BasicAuth() middleware\n\t// gin.Accounts is a shortcut for map[string]string\n\tauthorized := r.Group(\"/admin\", gin.BasicAuth(gin.Accounts{\n\t\t\"foo\":    \"bar\",\n\t\t\"austin\": \"1234\",\n\t\t\"lena\":   \"hello2\",\n\t\t\"manu\":   \"4321\",\n\t}))\n\n\t// /admin/secrets endpoint\n\t// hit \"localhost:8080/admin/secrets\n\tauthorized.GET(\"/secrets\", func(c *gin.Context) {\n\t\t// get user, it was set by the BasicAuth middleware\n\t\tuser := c.MustGet(gin.AuthUserKey).(string)\n\t\tif secret, ok := secrets[user]; ok {\n\t\t\tc.JSON(http.StatusOK, gin.H{\"user\": user, \"secret\": secret})\n\t\t} else {\n\t\t\tc.JSON(http.StatusOK, gin.H{\"user\": user, \"secret\": \"NO SECRET :(\"})\n\t\t}\n\t})\n\n\t// Listen and serve on 0.0.0.0:8080\n\tr.Run(\":8080\")\n}\n```\n\n### Goroutines inside a middleware\n\nWhen starting new Goroutines inside a middleware or handler, you **SHOULD NOT** use the original context inside it, you have to use a read-only copy.\n\n```go\nfunc main() {\n\tr := gin.Default()\n\n\tr.GET(\"/long_async\", func(c *gin.Context) {\n\t\t// create copy to be used inside the goroutine\n\t\tcCp := c.Copy()\n\t\tgo func() {\n\t\t\t// simulate a long task with time.Sleep(). 5 seconds\n\t\t\ttime.Sleep(5 * time.Second)\n\n\t\t\t// note that you are using the copied context \"cCp\", IMPORTANT\n\t\t\tlog.Println(\"Done! in path \" + cCp.Request.URL.Path)\n\t\t}()\n\t})\n\n\tr.GET(\"/long_sync\", func(c *gin.Context) {\n\t\t// simulate a long task with time.Sleep(). 5 seconds\n\t\ttime.Sleep(5 * time.Second)\n\n\t\t// since we are NOT using a goroutine, we do not have to copy the context\n\t\tlog.Println(\"Done! in path \" + c.Request.URL.Path)\n\t})\n\n\t// Listen and serve on 0.0.0.0:8080\n\tr.Run(\":8080\")\n}\n```\n\n### Custom HTTP configuration\n\nUse `http.ListenAndServe()` directly, like this:\n\n```go\nfunc main() {\n\trouter := gin.Default()\n\thttp.ListenAndServe(\":8080\", router)\n}\n```\nor\n\n```go\nfunc main() {\n\trouter := gin.Default()\n\n\ts := \u0026http.Server{\n\t\tAddr:           \":8080\",\n\t\tHandler:        router,\n\t\tReadTimeout:    10 * time.Second,\n\t\tWriteTimeout:   10 * time.Second,\n\t\tMaxHeaderBytes: 1 \u003c\u003c 20,\n\t}\n\ts.ListenAndServe()\n}\n```\n\n### Support Let's Encrypt\n\nexample for 1-line LetsEncrypt HTTPS servers.\n\n[embedmd]:# (examples/auto-tls/example1/main.go go)\n```go\npackage main\n\nimport (\n\t\"log\"\n\n\t\"github.com/gin-gonic/autotls\"\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\t// Ping handler\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong\")\n\t})\n\n\tlog.Fatal(autotls.Run(r, \"example1.com\", \"example2.com\"))\n}\n```\n\nexample for custom autocert manager.\n\n[embedmd]:# (examples/auto-tls/example2/main.go go)\n```go\npackage main\n\nimport (\n\t\"log\"\n\n\t\"github.com/gin-gonic/autotls\"\n\t\"github.com/gin-gonic/gin\"\n\t\"golang.org/x/crypto/acme/autocert\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n\t// Ping handler\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong\")\n\t})\n\n\tm := autocert.Manager{\n\t\tPrompt:     autocert.AcceptTOS,\n\t\tHostPolicy: autocert.HostWhitelist(\"example1.com\", \"example2.com\"),\n\t\tCache:      autocert.DirCache(\"/var/www/.cache\"),\n\t}\n\n\tlog.Fatal(autotls.RunWithManager(r, \u0026m))\n}\n```\n\n### Run multiple service using Gin\n\nSee the [question](https://github.com/gin-gonic/gin/issues/346) and try the following example:\n\n[embedmd]:# (examples/multiple-service/main.go go)\n```go\npackage main\n\nimport (\n\t\"log\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"golang.org/x/sync/errgroup\"\n)\n\nvar (\n\tg errgroup.Group\n)\n\nfunc router01() http.Handler {\n\te := gin.New()\n\te.Use(gin.Recovery())\n\te.GET(\"/\", func(c *gin.Context) {\n\t\tc.JSON(\n\t\t\thttp.StatusOK,\n\t\t\tgin.H{\n\t\t\t\t\"code\":  http.StatusOK,\n\t\t\t\t\"error\": \"Welcome server 01\",\n\t\t\t},\n\t\t)\n\t})\n\n\treturn e\n}\n\nfunc router02() http.Handler {\n\te := gin.New()\n\te.Use(gin.Recovery())\n\te.GET(\"/\", func(c *gin.Context) {\n\t\tc.JSON(\n\t\t\thttp.StatusOK,\n\t\t\tgin.H{\n\t\t\t\t\"code\":  http.StatusOK,\n\t\t\t\t\"error\": \"Welcome server 02\",\n\t\t\t},\n\t\t)\n\t})\n\n\treturn e\n}\n\nfunc main() {\n\tserver01 := \u0026http.Server{\n\t\tAddr:         \":8080\",\n\t\tHandler:      router01(),\n\t\tReadTimeout:  5 * time.Second,\n\t\tWriteTimeout: 10 * time.Second,\n\t}\n\n\tserver02 := \u0026http.Server{\n\t\tAddr:         \":8081\",\n\t\tHandler:      router02(),\n\t\tReadTimeout:  5 * time.Second,\n\t\tWriteTimeout: 10 * time.Second,\n\t}\n\n\tg.Go(func() error {\n\t\treturn server01.ListenAndServe()\n\t})\n\n\tg.Go(func() error {\n\t\treturn server02.ListenAndServe()\n\t})\n\n\tif err := g.Wait(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n\n### Graceful restart or stop\n\nDo you want to graceful restart or stop your web server?\nThere are some ways this can be done.\n\nWe can use [fvbock/endless](https://github.com/fvbock/endless) to replace the default `ListenAndServe`. Refer issue [#296](https://github.com/gin-gonic/gin/issues/296) for more details.\n\n```go\nrouter := gin.Default()\nrouter.GET(\"/\", handler)\n// [...]\nendless.ListenAndServe(\":4242\", router)\n```\n\nAn alternative to endless:\n\n* [manners](https://github.com/braintree/manners): A polite Go HTTP server that shuts down gracefully.\n* [graceful](https://github.com/tylerb/graceful): Graceful is a Go package enabling graceful shutdown of an http.Handler server.\n* [grace](https://github.com/facebookgo/grace): Graceful restart \u0026 zero downtime deploy for Go servers.\n\nIf you are using Go 1.8, you may not need to use this library! Consider using http.Server's built-in [Shutdown()](https://golang.org/pkg/net/http/#Server.Shutdown) method for graceful shutdowns. See the full [graceful-shutdown](./examples/graceful-shutdown) example with gin.\n\n[embedmd]:# (examples/graceful-shutdown/graceful-shutdown/server.go go)\n```go\n// +build go1.8\n\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"os/signal\"\n\t\"time\"\n\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\trouter := gin.Default()\n\trouter.GET(\"/\", func(c *gin.Context) {\n\t\ttime.Sleep(5 * time.Second)\n\t\tc.String(http.StatusOK, \"Welcome Gin Server\")\n\t})\n\n\tsrv := \u0026http.Server{\n\t\tAddr:    \":8080\",\n\t\tHandler: router,\n\t}\n\n\tgo func() {\n\t\t// service connections\n\t\tif err := srv.ListenAndServe(); err != nil \u0026\u0026 err != http.ErrServerClosed {\n\t\t\tlog.Fatalf(\"listen: %s\\n\", err)\n\t\t}\n\t}()\n\n\t// Wait for interrupt signal to gracefully shutdown the server with\n\t// a timeout of 5 seconds.\n\tquit := make(chan os.Signal)\n\tsignal.Notify(quit, os.Interrupt)\n\t\u003c-quit\n\tlog.Println(\"Shutdown Server ...\")\n\n\tctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n\tdefer cancel()\n\tif err := srv.Shutdown(ctx); err != nil {\n\t\tlog.Fatal(\"Server Shutdown:\", err)\n\t}\n\tlog.Println(\"Server exiting\")\n}\n```\n\n### Build a single binary with templates\n\nYou can build a server into a single binary containing templates by using [go-assets][].\n\n[go-assets]: https://github.com/jessevdk/go-assets\n\n```go\nfunc main() {\n\tr := gin.New()\n\n\tt, err := loadTemplate()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tr.SetHTMLTemplate(t)\n\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tc.HTML(http.StatusOK, \"/html/index.tmpl\",nil)\n\t})\n\tr.Run(\":8080\")\n}\n\n// loadTemplate loads templates embedded by go-assets-builder\nfunc loadTemplate() (*template.Template, error) {\n\tt := template.New(\"\")\n\tfor name, file := range Assets.Files {\n\t\tif file.IsDir() || !strings.HasSuffix(name, \".tmpl\") {\n\t\t\tcontinue\n\t\t}\n\t\th, err := ioutil.ReadAll(file)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tt, err = t.New(name).Parse(string(h))\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\treturn t, nil\n}\n```\n\nSee a complete example in the `examples/assets-in-binary` directory.\n\n### Bind form-data request with custom struct\n\nThe follow example using custom struct:\n\n```go\ntype StructA struct {\n    FieldA string `form:\"field_a\"`\n}\n\ntype StructB struct {\n    NestedStruct StructA\n    FieldB string `form:\"field_b\"`\n}\n\ntype StructC struct {\n    NestedStructPointer *StructA\n    FieldC string `form:\"field_c\"`\n}\n\ntype StructD struct {\n    NestedAnonyStruct struct {\n        FieldX string `form:\"field_x\"`\n    }\n    FieldD string `form:\"field_d\"`\n}\n\nfunc GetDataB(c *gin.Context) {\n    var b StructB\n    c.Bind(\u0026b)\n    c.JSON(200, gin.H{\n        \"a\": b.NestedStruct,\n        \"b\": b.FieldB,\n    })\n}\n\nfunc GetDataC(c *gin.Context) {\n    var b StructC\n    c.Bind(\u0026b)\n    c.JSON(200, gin.H{\n        \"a\": b.NestedStructPointer,\n        \"c\": b.FieldC,\n    })\n}\n\nfunc GetDataD(c *gin.Context) {\n    var b StructD\n    c.Bind(\u0026b)\n    c.JSON(200, gin.H{\n        \"x\": b.NestedAnonyStruct,\n        \"d\": b.FieldD,\n    })\n}\n\nfunc main() {\n    r := gin.Default()\n    r.GET(\"/getb\", GetDataB)\n    r.GET(\"/getc\", GetDataC)\n    r.GET(\"/getd\", GetDataD)\n\n    r.Run()\n}\n```\n\nUsing the command `curl` command result:\n\n```\n$ curl \"http://localhost:8080/getb?field_a=hello\u0026field_b=world\"\n{\"a\":{\"FieldA\":\"hello\"},\"b\":\"world\"}\n$ curl \"http://localhost:8080/getc?field_a=hello\u0026field_c=world\"\n{\"a\":{\"FieldA\":\"hello\"},\"c\":\"world\"}\n$ curl \"http://localhost:8080/getd?field_x=hello\u0026field_d=world\"\n{\"d\":\"world\",\"x\":{\"FieldX\":\"hello\"}}\n```\n\n**NOTE**: NOT support the follow style struct:\n\n```go\ntype StructX struct {\n    X struct {} `form:\"name_x\"` // HERE have form\n}\n\ntype StructY struct {\n    Y StructX `form:\"name_y\"` // HERE have form\n}\n\ntype StructZ struct {\n    Z *StructZ `form:\"name_z\"` // HERE have form\n}\n```\n\nIn a word, only support nested custom struct which have no `form` now.\n\n### Try to bind body into different structs\n\nThe normal methods for binding request body consumes `c.Request.Body` and they\ncannot be called multiple times.\n\n```go\ntype formA struct {\n  Foo string `json:\"foo\" xml:\"foo\" binding:\"required\"`\n}\n\ntype formB struct {\n  Bar string `json:\"bar\" xml:\"bar\" binding:\"required\"`\n}\n\nfunc SomeHandler(c *gin.Context) {\n  objA := formA{}\n  objB := formB{}\n  // This c.ShouldBind consumes c.Request.Body and it cannot be reused.\n  if errA := c.ShouldBind(\u0026objA); errA == nil {\n    c.String(http.StatusOK, `the body should be formA`)\n  // Always an error is occurred by this because c.Request.Body is EOF now.\n  } else if errB := c.ShouldBind(\u0026objB); errB == nil {\n    c.String(http.StatusOK, `the body should be formB`)\n  } else {\n    ...\n  }\n}\n```\n\nFor this, you can use `c.ShouldBindBodyWith`.\n\n```go\nfunc SomeHandler(c *gin.Context) {\n  objA := formA{}\n  objB := formB{}\n  // This reads c.Request.Body and stores the result into the context.\n  if errA := c.ShouldBindBodyWith(\u0026objA, binding.JSON); errA == nil {\n    c.String(http.StatusOK, `the body should be formA`)\n  // At this time, it reuses body stored in the context.\n  } else if errB := c.ShouldBindBodyWith(\u0026objB, binding.JSON); errB == nil {\n    c.String(http.StatusOK, `the body should be formB JSON`)\n  // And it can accepts other formats\n  } else if errB2 := c.ShouldBindBodyWith(\u0026objB, binding.XML); errB2 == nil {\n    c.String(http.StatusOK, `the body should be formB XML`)\n  } else {\n    ...\n  }\n}\n```\n\n* `c.ShouldBindBodyWith` stores body into the context before binding. This has\na slight impact to performance, so you should not use this method if you are\nenough to call binding at once.\n* This feature is only needed for some formats -- `JSON`, `XML`, `MsgPack`,\n`ProtoBuf`. For other formats, `Query`, `Form`, `FormPost`, `FormMultipart`,\ncan be called by `c.ShouldBind()` multiple times without any damage to\nperformance (See [#1341](https://github.com/gin-gonic/gin/pull/1341)).\n\n### http2 server push\n\nhttp.Pusher is supported only **go1.8+**. See the [golang blog](https://blog.golang.org/h2push) for detail information.\n\n[embedmd]:# (examples/http-pusher/main.go go)\n```go\npackage main\n\nimport (\n\t\"html/template\"\n\t\"log\"\n\n\t\"github.com/gin-gonic/gin\"\n)\n\nvar html = template.Must(template.New(\"https\").Parse(`\n\u003chtml\u003e\n\u003chead\u003e\n  \u003ctitle\u003eHttps Test\u003c/title\u003e\n  \u003cscript src=\"/assets/app.js\"\u003e\u003c/script\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n  \u003ch1 style=\"color:red;\"\u003eWelcome, Ginner!\u003c/h1\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n`))\n\nfunc main() {\n\tr := gin.Default()\n\tr.Static(\"/assets\", \"./assets\")\n\tr.SetHTMLTemplate(html)\n\n\tr.GET(\"/\", func(c *gin.Context) {\n\t\tif pusher := c.Writer.Pusher(); pusher != nil {\n\t\t\t// use pusher.Push() to do server push\n\t\t\tif err := pusher.Push(\"/assets/app.js\", nil); err != nil {\n\t\t\t\tlog.Printf(\"Failed to push: %v\", err)\n\t\t\t}\n\t\t}\n\t\tc.HTML(200, \"https\", gin.H{\n\t\t\t\"status\": \"success\",\n\t\t})\n\t})\n\n\t// Listen and Server in https://127.0.0.1:8080\n\tr.RunTLS(\":8080\", \"./testdata/server.pem\", \"./testdata/server.key\")\n}\n```\n\n### Define format for the log of routes\n\nThe default log of routes is:\n```\n[GIN-debug] POST   /foo                      --\u003e main.main.func1 (3 handlers)\n[GIN-debug] GET    /bar                      --\u003e main.main.func2 (3 handlers)\n[GIN-debug] GET    /status                   --\u003e main.main.func3 (3 handlers)\n```\n\nIf you want to log this information in given format (e.g. JSON, key values or something else), then you can define this format with `gin.DebugPrintRouteFunc`.\nIn the example below, we log all routes with standard log package but you can use another log tools that suits of your needs.\n```go\nimport (\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\tgin.DebugPrintRouteFunc = func(httpMethod, absolutePath, handlerName string, nuHandlers int) {\n\t\tlog.Printf(\"endpoint %v %v %v %v\\n\", httpMethod, absolutePath, handlerName, nuHandlers)\n\t}\n\n\tr.POST(\"/foo\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, \"foo\")\n\t})\n\n\tr.GET(\"/bar\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, \"bar\")\n\t})\n\n\tr.GET(\"/status\", func(c *gin.Context) {\n\t\tc.JSON(http.StatusOK, \"ok\")\n\t})\n\n\t// Listen and Server in http://0.0.0.0:8080\n\tr.Run()\n}\n```\n\n### Set and get a cookie\n\n```go\nimport (\n    \"fmt\"\n\n    \"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\n    router := gin.Default()\n\n    router.GET(\"/cookie\", func(c *gin.Context) {\n\n        cookie, err := c.Cookie(\"gin_cookie\")\n\n        if err != nil {\n            cookie = \"NotSet\"\n            c.SetCookie(\"gin_cookie\", \"test\", 3600, \"/\", \"localhost\", false, true)\n        }\n\n        fmt.Printf(\"Cookie value: %s \\n\", cookie)\n    })\n\n    router.Run()\n}\n```\n\n\n## Testing\n\nThe `net/http/httptest` package is preferable way for HTTP testing.\n\n```go\npackage main\n\nfunc setupRouter() *gin.Engine {\n\tr := gin.Default()\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.String(200, \"pong\")\n\t})\n\treturn r\n}\n\nfunc main() {\n\tr := setupRouter()\n\tr.Run(\":8080\")\n}\n```\n\nTest for code example above:\n\n```go\npackage main\n\nimport (\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestPingRoute(t *testing.T) {\n\trouter := setupRouter()\n\n\tw := httptest.NewRecorder()\n\treq, _ := http.NewRequest(\"GET\", \"/ping\", nil)\n\trouter.ServeHTTP(w, req)\n\n\tassert.Equal(t, 200, w.Code)\n\tassert.Equal(t, \"pong\", w.Body.String())\n}\n```\n\n## Users\n\nAwesome project lists using [Gin](https://github.com/gin-gonic/gin) web framework.\n\n* [drone](https://github.com/drone/drone): Drone is a Continuous Delivery platform built on Docker, written in Go.\n* [gorush](https://github.com/appleboy/gorush): A push notification server written in Go.\n* [fnproject](https://github.com/fnproject/fn): The container native, cloud agnostic serverless platform.\n* [photoprism](https://github.com/photoprism/photoprism): Personal photo management powered by Go and Google TensorFlow.\n* [krakend](https://github.com/devopsfaith/krakend): Ultra performant API Gateway with middlewares.\n* [picfit](https://github.com/thoas/picfit): An image resizing server written in Go.\n"
  },
  {
    "repo": "ethereum/go-ethereum",
    "content": "## Go Ethereum\n\nOfficial golang implementation of the Ethereum protocol.\n\n[![API Reference](\nhttps://camo.githubusercontent.com/915b7be44ada53c290eb157634330494ebe3e30a/68747470733a2f2f676f646f632e6f72672f6769746875622e636f6d2f676f6c616e672f6764646f3f7374617475732e737667\n)](https://godoc.org/github.com/ethereum/go-ethereum)\n[![Go Report Card](https://goreportcard.com/badge/github.com/ethereum/go-ethereum)](https://goreportcard.com/report/github.com/ethereum/go-ethereum)\n[![Travis](https://travis-ci.org/ethereum/go-ethereum.svg?branch=master)](https://travis-ci.org/ethereum/go-ethereum)\n[![Discord](https://img.shields.io/badge/discord-join%20chat-blue.svg)](https://discord.gg/nthXNEv)\n\nAutomated builds are available for stable releases and the unstable master branch.\nBinary archives are published at https://geth.ethereum.org/downloads/.\n\n## Building the source\n\nFor prerequisites and detailed build instructions please read the\n[Installation Instructions](https://github.com/ethereum/go-ethereum/wiki/Building-Ethereum)\non the wiki.\n\nBuilding geth requires both a Go (version 1.9 or later) and a C compiler.\nYou can install them using your favourite package manager.\nOnce the dependencies are installed, run\n\n    make geth\n\nor, to build the full suite of utilities:\n\n    make all\n\n## Executables\n\nThe go-ethereum project comes with several wrappers/executables found in the `cmd` directory.\n\n| Command    | Description |\n|:----------:|-------------|\n| **`geth`** | Our main Ethereum CLI client. It is the entry point into the Ethereum network (main-, test- or private net), capable of running as a full node (default), archive node (retaining all historical state) or a light node (retrieving data live). It can be used by other processes as a gateway into the Ethereum network via JSON RPC endpoints exposed on top of HTTP, WebSocket and/or IPC transports. `geth --help` and the [CLI Wiki page](https://github.com/ethereum/go-ethereum/wiki/Command-Line-Options) for command line options. |\n| `abigen` | Source code generator to convert Ethereum contract definitions into easy to use, compile-time type-safe Go packages. It operates on plain [Ethereum contract ABIs](https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI) with expanded functionality if the contract bytecode is also available. However it also accepts Solidity source files, making development much more streamlined. Please see our [Native DApps](https://github.com/ethereum/go-ethereum/wiki/Native-DApps:-Go-bindings-to-Ethereum-contracts) wiki page for details. |\n| `bootnode` | Stripped down version of our Ethereum client implementation that only takes part in the network node discovery protocol, but does not run any of the higher level application protocols. It can be used as a lightweight bootstrap node to aid in finding peers in private networks. |\n| `evm` | Developer utility version of the EVM (Ethereum Virtual Machine) that is capable of running bytecode snippets within a configurable environment and execution mode. Its purpose is to allow isolated, fine-grained debugging of EVM opcodes (e.g. `evm --code 60ff60ff --debug`). |\n| `gethrpctest` | Developer utility tool to support our [ethereum/rpc-test](https://github.com/ethereum/rpc-tests) test suite which validates baseline conformity to the [Ethereum JSON RPC](https://github.com/ethereum/wiki/wiki/JSON-RPC) specs. Please see the [test suite's readme](https://github.com/ethereum/rpc-tests/blob/master/README.md) for details. |\n| `rlpdump` | Developer utility tool to convert binary RLP ([Recursive Length Prefix](https://github.com/ethereum/wiki/wiki/RLP)) dumps (data encoding used by the Ethereum protocol both network as well as consensus wise) to user friendlier hierarchical representation (e.g. `rlpdump --hex CE0183FFFFFFC4C304050583616263`). |\n| `swarm`    | Swarm daemon and tools. This is the entrypoint for the Swarm network. `swarm --help` for command line options and subcommands. See [Swarm README](https://github.com/ethereum/go-ethereum/tree/master/swarm) for more information. |\n| `puppeth`    | a CLI wizard that aids in creating a new Ethereum network. |\n\n## Running geth\n\nGoing through all the possible command line flags is out of scope here (please consult our\n[CLI Wiki page](https://github.com/ethereum/go-ethereum/wiki/Command-Line-Options)), but we've\nenumerated a few common parameter combos to get you up to speed quickly on how you can run your\nown Geth instance.\n\n### Full node on the main Ethereum network\n\nBy far the most common scenario is people wanting to simply interact with the Ethereum network:\ncreate accounts; transfer funds; deploy and interact with contracts. For this particular use-case\nthe user doesn't care about years-old historical data, so we can fast-sync quickly to the current\nstate of the network. To do so:\n\n```\n$ geth console\n```\n\nThis command will:\n\n * Start geth in fast sync mode (default, can be changed with the `--syncmode` flag), causing it to\n   download more data in exchange for avoiding processing the entire history of the Ethereum network,\n   which is very CPU intensive.\n * Start up Geth's built-in interactive [JavaScript console](https://github.com/ethereum/go-ethereum/wiki/JavaScript-Console),\n   (via the trailing `console` subcommand) through which you can invoke all official [`web3` methods](https://github.com/ethereum/wiki/wiki/JavaScript-API)\n   as well as Geth's own [management APIs](https://github.com/ethereum/go-ethereum/wiki/Management-APIs).\n   This tool is optional and if you leave it out you can always attach to an already running Geth instance\n   with `geth attach`.\n\n### Full node on the Ethereum test network\n\nTransitioning towards developers, if you'd like to play around with creating Ethereum contracts, you\nalmost certainly would like to do that without any real money involved until you get the hang of the\nentire system. In other words, instead of attaching to the main network, you want to join the **test**\nnetwork with your node, which is fully equivalent to the main network, but with play-Ether only.\n\n```\n$ geth --testnet console\n```\n\nThe `console` subcommand have the exact same meaning as above and they are equally useful on the\ntestnet too. Please see above for their explanations if you've skipped to here.\n\nSpecifying the `--testnet` flag however will reconfigure your Geth instance a bit:\n\n * Instead of using the default data directory (`~/.ethereum` on Linux for example), Geth will nest\n   itself one level deeper into a `testnet` subfolder (`~/.ethereum/testnet` on Linux). Note, on OSX\n   and Linux this also means that attaching to a running testnet node requires the use of a custom\n   endpoint since `geth attach` will try to attach to a production node endpoint by default. E.g.\n   `geth attach \u003cdatadir\u003e/testnet/geth.ipc`. Windows users are not affected by this.\n * Instead of connecting the main Ethereum network, the client will connect to the test network,\n   which uses different P2P bootnodes, different network IDs and genesis states.\n   \n*Note: Although there are some internal protective measures to prevent transactions from crossing\nover between the main network and test network, you should make sure to always use separate accounts\nfor play-money and real-money. Unless you manually move accounts, Geth will by default correctly\nseparate the two networks and will not make any accounts available between them.*\n\n### Full node on the Rinkeby test network\n\nThe above test network is a cross client one based on the ethash proof-of-work consensus algorithm. As such, it has certain extra overhead and is more susceptible to reorganization attacks due to the network's low difficulty / security. Go Ethereum also supports connecting to a proof-of-authority based test network called [*Rinkeby*](https://www.rinkeby.io) (operated by members of the community). This network is lighter, more secure, but is only supported by go-ethereum.\n\n```\n$ geth --rinkeby console\n```\n\n### Configuration\n\nAs an alternative to passing the numerous flags to the `geth` binary, you can also pass a configuration file via:\n\n```\n$ geth --config /path/to/your_config.toml\n```\n\nTo get an idea how the file should look like you can use the `dumpconfig` subcommand to export your existing configuration:\n\n```\n$ geth --your-favourite-flags dumpconfig\n```\n\n*Note: This works only with geth v1.6.0 and above.*\n\n#### Docker quick start\n\nOne of the quickest ways to get Ethereum up and running on your machine is by using Docker:\n\n```\ndocker run -d --name ethereum-node -v /Users/alice/ethereum:/root \\\n           -p 8545:8545 -p 30303:30303 \\\n           ethereum/client-go\n```\n\nThis will start geth in fast-sync mode with a DB memory allowance of 1GB just as the above command does.  It will also create a persistent volume in your home directory for saving your blockchain as well as map the default ports. There is also an `alpine` tag available for a slim version of the image.\n\nDo not forget `--rpcaddr 0.0.0.0`, if you want to access RPC from other containers and/or hosts. By default, `geth` binds to the local interface and RPC endpoints is not accessible from the outside.\n\n### Programatically interfacing Geth nodes\n\nAs a developer, sooner rather than later you'll want to start interacting with Geth and the Ethereum\nnetwork via your own programs and not manually through the console. To aid this, Geth has built-in\nsupport for a JSON-RPC based APIs ([standard APIs](https://github.com/ethereum/wiki/wiki/JSON-RPC) and\n[Geth specific APIs](https://github.com/ethereum/go-ethereum/wiki/Management-APIs)). These can be\nexposed via HTTP, WebSockets and IPC (unix sockets on unix based platforms, and named pipes on Windows).\n\nThe IPC interface is enabled by default and exposes all the APIs supported by Geth, whereas the HTTP\nand WS interfaces need to manually be enabled and only expose a subset of APIs due to security reasons.\nThese can be turned on/off and configured as you'd expect.\n\nHTTP based JSON-RPC API options:\n\n  * `--rpc` Enable the HTTP-RPC server\n  * `--rpcaddr` HTTP-RPC server listening interface (default: \"localhost\")\n  * `--rpcport` HTTP-RPC server listening port (default: 8545)\n  * `--rpcapi` API's offered over the HTTP-RPC interface (default: \"eth,net,web3\")\n  * `--rpccorsdomain` Comma separated list of domains from which to accept cross origin requests (browser enforced)\n  * `--ws` Enable the WS-RPC server\n  * `--wsaddr` WS-RPC server listening interface (default: \"localhost\")\n  * `--wsport` WS-RPC server listening port (default: 8546)\n  * `--wsapi` API's offered over the WS-RPC interface (default: \"eth,net,web3\")\n  * `--wsorigins` Origins from which to accept websockets requests\n  * `--ipcdisable` Disable the IPC-RPC server\n  * `--ipcapi` API's offered over the IPC-RPC interface (default: \"admin,debug,eth,miner,net,personal,shh,txpool,web3\")\n  * `--ipcpath` Filename for IPC socket/pipe within the datadir (explicit paths escape it)\n\nYou'll need to use your own programming environments' capabilities (libraries, tools, etc) to connect\nvia HTTP, WS or IPC to a Geth node configured with the above flags and you'll need to speak [JSON-RPC](https://www.jsonrpc.org/specification)\non all transports. You can reuse the same connection for multiple requests!\n\n**Note: Please understand the security implications of opening up an HTTP/WS based transport before\ndoing so! Hackers on the internet are actively trying to subvert Ethereum nodes with exposed APIs!\nFurther, all browser tabs can access locally running webservers, so malicious webpages could try to\nsubvert locally available APIs!**\n\n### Operating a private network\n\nMaintaining your own private network is more involved as a lot of configurations taken for granted in\nthe official networks need to be manually set up.\n\n#### Defining the private genesis state\n\nFirst, you'll need to create the genesis state of your networks, which all nodes need to be aware of\nand agree upon. This consists of a small JSON file (e.g. call it `genesis.json`):\n\n```json\n{\n  \"config\": {\n        \"chainId\": 0,\n        \"homesteadBlock\": 0,\n        \"eip155Block\": 0,\n        \"eip158Block\": 0\n    },\n  \"alloc\"      : {},\n  \"coinbase\"   : \"0x0000000000000000000000000000000000000000\",\n  \"difficulty\" : \"0x20000\",\n  \"extraData\"  : \"\",\n  \"gasLimit\"   : \"0x2fefd8\",\n  \"nonce\"      : \"0x0000000000000042\",\n  \"mixhash\"    : \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n  \"parentHash\" : \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n  \"timestamp\"  : \"0x00\"\n}\n```\n\nThe above fields should be fine for most purposes, although we'd recommend changing the `nonce` to\nsome random value so you prevent unknown remote nodes from being able to connect to you. If you'd\nlike to pre-fund some accounts for easier testing, you can populate the `alloc` field with account\nconfigs:\n\n```json\n\"alloc\": {\n  \"0x0000000000000000000000000000000000000001\": {\"balance\": \"111111111\"},\n  \"0x0000000000000000000000000000000000000002\": {\"balance\": \"222222222\"}\n}\n```\n\nWith the genesis state defined in the above JSON file, you'll need to initialize **every** Geth node\nwith it prior to starting it up to ensure all blockchain parameters are correctly set:\n\n```\n$ geth init path/to/genesis.json\n```\n\n#### Creating the rendezvous point\n\nWith all nodes that you want to run initialized to the desired genesis state, you'll need to start a\nbootstrap node that others can use to find each other in your network and/or over the internet. The\nclean way is to configure and run a dedicated bootnode:\n\n```\n$ bootnode --genkey=boot.key\n$ bootnode --nodekey=boot.key\n```\n\nWith the bootnode online, it will display an [`enode` URL](https://github.com/ethereum/wiki/wiki/enode-url-format)\nthat other nodes can use to connect to it and exchange peer information. Make sure to replace the\ndisplayed IP address information (most probably `[::]`) with your externally accessible IP to get the\nactual `enode` URL.\n\n*Note: You could also use a full fledged Geth node as a bootnode, but it's the less recommended way.*\n\n#### Starting up your member nodes\n\nWith the bootnode operational and externally reachable (you can try `telnet \u003cip\u003e \u003cport\u003e` to ensure\nit's indeed reachable), start every subsequent Geth node pointed to the bootnode for peer discovery\nvia the `--bootnodes` flag. It will probably also be desirable to keep the data directory of your\nprivate network separated, so do also specify a custom `--datadir` flag.\n\n```\n$ geth --datadir=path/to/custom/data/folder --bootnodes=\u003cbootnode-enode-url-from-above\u003e\n```\n\n*Note: Since your network will be completely cut off from the main and test networks, you'll also\nneed to configure a miner to process transactions and create new blocks for you.*\n\n#### Running a private miner\n\nMining on the public Ethereum network is a complex task as it's only feasible using GPUs, requiring\nan OpenCL or CUDA enabled `ethminer` instance. For information on such a setup, please consult the\n[EtherMining subreddit](https://www.reddit.com/r/EtherMining/) and the [Genoil miner](https://github.com/Genoil/cpp-ethereum)\nrepository.\n\nIn a private network setting however, a single CPU miner instance is more than enough for practical\npurposes as it can produce a stable stream of blocks at the correct intervals without needing heavy\nresources (consider running on a single thread, no need for multiple ones either). To start a Geth\ninstance for mining, run it with all your usual flags, extended by:\n\n```\n$ geth \u003cusual-flags\u003e --mine --minerthreads=1 --etherbase=0x0000000000000000000000000000000000000000\n```\n\nWhich will start mining blocks and transactions on a single CPU thread, crediting all proceedings to\nthe account specified by `--etherbase`. You can further tune the mining by changing the default gas\nlimit blocks converge to (`--targetgaslimit`) and the price transactions are accepted at (`--gasprice`).\n\n## Contribution\n\nThank you for considering to help out with the source code! We welcome contributions from\nanyone on the internet, and are grateful for even the smallest of fixes!\n\nIf you'd like to contribute to go-ethereum, please fork, fix, commit and send a pull request\nfor the maintainers to review and merge into the main code base. If you wish to submit more\ncomplex changes though, please check up with the core devs first on [our gitter channel](https://gitter.im/ethereum/go-ethereum)\nto ensure those changes are in line with the general philosophy of the project and/or get some\nearly feedback which can make both your efforts much lighter as well as our review and merge\nprocedures quick and simple.\n\nPlease make sure your contributions adhere to our coding guidelines:\n\n * Code must adhere to the official Go [formatting](https://golang.org/doc/effective_go.html#formatting) guidelines (i.e. uses [gofmt](https://golang.org/cmd/gofmt/)).\n * Code must be documented adhering to the official Go [commentary](https://golang.org/doc/effective_go.html#commentary) guidelines.\n * Pull requests need to be based on and opened against the `master` branch.\n * Commit messages should be prefixed with the package(s) they modify.\n   * E.g. \"eth, rpc: make trace configs optional\"\n\nPlease see the [Developers' Guide](https://github.com/ethereum/go-ethereum/wiki/Developers'-Guide)\nfor more details on configuring your environment, managing project dependencies and testing procedures.\n\n## License\n\nThe go-ethereum library (i.e. all code outside of the `cmd` directory) is licensed under the\n[GNU Lesser General Public License v3.0](https://www.gnu.org/licenses/lgpl-3.0.en.html), also\nincluded in our repository in the `COPYING.LESSER` file.\n\nThe go-ethereum binaries (i.e. all code inside of the `cmd` directory) is licensed under the\n[GNU General Public License v3.0](https://www.gnu.org/licenses/gpl-3.0.en.html), also included\nin our repository in the `COPYING` file.\n"
  },
  {
    "repo": "etcd-io/etcd",
    "content": "# etcd\n\n[![Go Report Card](https://goreportcard.com/badge/github.com/etcd-io/etcd?style=flat-square)](https://goreportcard.com/report/github.com/etcd-io/etcd)\n[![Coverage](https://codecov.io/gh/etcd-io/etcd/branch/master/graph/badge.svg)](https://codecov.io/gh/etcd-io/etcd)\n[![Build Status Travis](https://img.shields.io/travis/etcd-io/etcdlabs.svg?style=flat-square\u0026\u0026branch=master)](https://travis-ci.com/etcd-io/etcd)\n[![Build Status Semaphore](https://semaphoreci.com/api/v1/etcd-io/etcd/branches/master/shields_badge.svg)](https://semaphoreci.com/etcd-io/etcd)\n[![Docs](https://readthedocs.org/projects/etcd/badge/?version=latest\u0026style=flat-square)](https://etcd.readthedocs.io/en/latest/?badge=latest)\n[![Godoc](http://img.shields.io/badge/go-documentation-blue.svg?style=flat-square)](https://godoc.org/github.com/etcd-io/etcd)\n[![Releases](https://img.shields.io/github/release/etcd-io/etcd/all.svg?style=flat-square)](https://github.com/etcd-io/etcd/releases)\n[![LICENSE](https://img.shields.io/github/license/etcd-io/etcd.svg?style=flat-square)](https://github.com/etcd-io/etcd/blob/master/LICENSE)\n\n**Note**: The `master` branch may be in an *unstable or even broken state* during development. Please use [releases][github-release] instead of the `master` branch in order to get stable binaries.\n\n![etcd Logo](logos/etcd-horizontal-color.svg)\n\netcd is a distributed reliable key-value store for the most critical data of a distributed system, with a focus on being:\n\n* *Simple*: well-defined, user-facing API (gRPC)\n* *Secure*: automatic TLS with optional client cert authentication\n* *Fast*: benchmarked 10,000 writes/sec\n* *Reliable*: properly distributed using Raft\n\netcd is written in Go and uses the [Raft][raft] consensus algorithm to manage a highly-available replicated log.\n\netcd is used [in production by many companies](./Documentation/production-users.md), and the development team stands behind it in critical deployment scenarios, where etcd is frequently teamed with applications such as [Kubernetes][k8s], [locksmith][locksmith], [vulcand][vulcand], [Doorman][doorman], and many others. Reliability is further ensured by [**rigorous testing**](https://github.com/etcd-io/etcd/tree/master/functional).\n\nSee [etcdctl][etcdctl] for a simple command line client.\n\n[raft]: https://raft.github.io/\n[k8s]: http://kubernetes.io/\n[doorman]: https://github.com/youtube/doorman\n[locksmith]: https://github.com/coreos/locksmith\n[vulcand]: https://github.com/vulcand/vulcand\n[etcdctl]: https://github.com/etcd-io/etcd/tree/master/etcdctl\n\n## Community meetings\n\n*Community meeting is put on hold for now.*\n\netcd contributors and maintainers have bi-weekly meetings at 11:00 AM (USA Pacific) on Tuesdays.\n\nAn initial agenda will be posted to the [shared Google docs][shared-meeting-notes] a day before each meeting, and everyone is welcome to suggest additional topics or other agendas.\n\n[shared-meeting-notes]: https://docs.google.com/document/d/16XEGyPBisZvmmoIHSZzv__LoyOeluC5a4x353CX0SIM/edit\n\n## Getting started\n\n### Getting etcd\n\nThe easiest way to get etcd is to use one of the pre-built release binaries which are available for OSX, Linux, Windows, and Docker on the [release page][github-release].\n\nFor more installation guides, please check out [play.etcd.io](http://play.etcd.io) and [operating etcd](https://github.com/etcd-io/etcd/tree/master/Documentation#operating-etcd-clusters).\n\nFor those wanting to try the very latest version, [build the latest version of etcd][dl-build] from the `master` branch. This first needs [*Go*](https://golang.org/) installed (version 1.11+ is required). All development occurs on `master`, including new features and bug fixes. Bug fixes are first targeted at `master` and subsequently ported to release branches, as described in the [branch management][branch-management] guide.\n\n[github-release]: https://github.com/etcd-io/etcd/releases\n[branch-management]: ./Documentation/branch_management.md\n[dl-build]: ./Documentation/dl_build.md#build-the-latest-version\n\n### Running etcd\n\nFirst start a single-member cluster of etcd.\n\nIf etcd is installed using the [pre-built release binaries][github-release], run it from the installation location as below:\n\n```bash\n/tmp/etcd-download-test/etcd\n```\n\nThe etcd command can be simply run as such if it is moved to the system path as below:\n\n```bash\nmv /tmp/etcd-download-test/etcd /usr/local/bin/\netcd\n```\n\nIf etcd is [built from the master branch][dl-build], run it as below:\n\n```bash\n./bin/etcd\n```\n\nThis will bring up etcd listening on port 2379 for client communication and on port 2380 for server-to-server communication.\n\nNext, let's set a single key, and then retrieve it:\n\n```\nETCDCTL_API=3 etcdctl put mykey \"this is awesome\"\nETCDCTL_API=3 etcdctl get mykey\n```\n\netcd is now running and serving client requests. For more, please check out:\n\n- [Interactive etcd playground](http://play.etcd.io)\n- [Animated quick demo](./Documentation/demo.md)\n\n### etcd TCP ports\n\nThe [official etcd ports][iana-ports] are 2379 for client requests, and 2380 for peer communication.\n\n[iana-ports]: http://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt\n\n### Running a local etcd cluster\n\nFirst install [goreman](https://github.com/mattn/goreman), which manages Procfile-based applications.\n\nOur [Procfile script](./Procfile) will set up a local example cluster. Start it with:\n\n```bash\ngoreman start\n```\n\nThis will bring up 3 etcd members `infra1`, `infra2` and `infra3` and etcd `grpc-proxy`, which runs locally and composes a cluster.\n\nEvery cluster member and proxy accepts key value reads and key value writes.\n\n### Next steps\n\nNow it's time to dig into the full etcd API and other guides.\n\n- Read the full [documentation][fulldoc].\n- Explore the full gRPC [API][api].\n- Set up a [multi-machine cluster][clustering].\n- Learn the [config format, env variables and flags][configuration].\n- Find [language bindings and tools][integrations].\n- Use TLS to [secure an etcd cluster][security].\n- [Tune etcd][tuning].\n\n[fulldoc]: ./Documentation/docs.md\n[api]: ./Documentation/dev-guide/api_reference_v3.md\n[clustering]: ./Documentation/op-guide/clustering.md\n[configuration]: ./Documentation/op-guide/configuration.md\n[integrations]: ./Documentation/integrations.md\n[security]: ./Documentation/op-guide/security.md\n[tuning]: ./Documentation/tuning.md\n\n## Contact\n\n- Mailing list: [etcd-dev](https://groups.google.com/forum/?hl=en#!forum/etcd-dev)\n- IRC: #[etcd](irc://irc.freenode.org:6667/#etcd) on freenode.org\n- Planning/Roadmap: [milestones](https://github.com/etcd-io/etcd/milestones), [roadmap](./ROADMAP.md)\n- Bugs: [issues](https://github.com/etcd-io/etcd/issues)\n\n## Contributing\n\nSee [CONTRIBUTING](CONTRIBUTING.md) for details on submitting patches and the contribution workflow.\n\n## Reporting bugs\n\nSee [reporting bugs](Documentation/reporting_bugs.md) for details about reporting any issues.\n\n## Reporting a security vulnerability\n\nDue to their public nature, GitHub and mailing lists are NOT appropriate places for reporting vulnerabilities. Please refer to CoreOS's [security disclosure][disclosure] process when reporting issues that may be security related.\n\n[disclosure]: https://coreos.com/security/disclosure/\n\n### License\n\netcd is under the Apache 2.0 license. See the [LICENSE](LICENSE) file for details.\n"
  },
  {
    "repo": "prometheus/prometheus",
    "content": "# Prometheus [![Build Status](https://travis-ci.org/prometheus/prometheus.svg)][travis]\n\n[![CircleCI](https://circleci.com/gh/prometheus/prometheus/tree/master.svg?style=shield)][circleci]\n[![Docker Repository on Quay](https://quay.io/repository/prometheus/prometheus/status)][quay]\n[![Docker Pulls](https://img.shields.io/docker/pulls/prom/prometheus.svg?maxAge=604800)][hub]\n[![Go Report Card](https://goreportcard.com/badge/github.com/prometheus/prometheus)](https://goreportcard.com/report/github.com/prometheus/prometheus)\n[![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/486/badge)](https://bestpractices.coreinfrastructure.org/projects/486)\n\nVisit [prometheus.io](https://prometheus.io) for the full documentation,\nexamples and guides.\n\nPrometheus, a [Cloud Native Computing Foundation](https://cncf.io/) project, is a systems and service monitoring system. It collects metrics\nfrom configured targets at given intervals, evaluates rule expressions,\ndisplays the results, and can trigger alerts if some condition is observed\nto be true.\n\nPrometheus' main distinguishing features as compared to other monitoring systems are:\n\n- a **multi-dimensional** data model (timeseries defined by metric name and set of key/value dimensions)\n- a **flexible query language** to leverage this dimensionality\n- no dependency on distributed storage; **single server nodes are autonomous**\n- timeseries collection happens via a **pull model** over HTTP\n- **pushing timeseries** is supported via an intermediary gateway\n- targets are discovered via **service discovery** or **static configuration**\n- multiple modes of **graphing and dashboarding support**\n- support for hierarchical and horizontal **federation**\n\n## Architecture overview\n\n![](https://cdn.jsdelivr.net/gh/prometheus/prometheus@c34257d069c630685da35bcef084632ffd5d6209/documentation/images/architecture.svg)\n\n## Install\n\nThere are various ways of installing Prometheus.\n\n### Precompiled binaries\n\nPrecompiled binaries for released versions are available in the\n[*download* section](https://prometheus.io/download/)\non [prometheus.io](https://prometheus.io). Using the latest production release binary\nis the recommended way of installing Prometheus.\nSee the [Installing](https://prometheus.io/docs/introduction/install/)\nchapter in the documentation for all the details.\n\nDebian packages [are available](https://packages.debian.org/sid/net/prometheus).\n\n### Docker images\n\nDocker images are available on [Quay.io](https://quay.io/repository/prometheus/prometheus) or [Docker Hub](https://hub.docker.com/r/prom/prometheus/).\n\nYou can launch a Prometheus container for trying it out with\n\n    $ docker run --name prometheus -d -p 127.0.0.1:9090:9090 prom/prometheus\n\nPrometheus will now be reachable at http://localhost:9090/.\n\n### Building from source\n\nTo build Prometheus from the source code yourself you need to have a working\nGo environment with [version 1.11 or greater installed](http://golang.org/doc/install).\n\nYou can directly use the `go` tool to download and install the `prometheus`\nand `promtool` binaries into your `GOPATH`:\n\n    $ go get github.com/prometheus/prometheus/cmd/...\n    $ prometheus --config.file=your_config.yml\n\nYou can also clone the repository yourself and build using `make`:\n\n    $ mkdir -p $GOPATH/src/github.com/prometheus\n    $ cd $GOPATH/src/github.com/prometheus\n    $ git clone https://github.com/prometheus/prometheus.git\n    $ cd prometheus\n    $ make build\n    $ ./prometheus --config.file=your_config.yml\n\nThe Makefile provides several targets:\n\n  * *build*: build the `prometheus` and `promtool` binaries\n  * *test*: run the tests\n  * *test-short*: run the short tests\n  * *format*: format the source code\n  * *vet*: check the source code for common errors\n  * *assets*: rebuild the static assets\n  * *docker*: build a docker container for the current `HEAD`\n\n## More information\n\n  * The source code is periodically indexed: [Prometheus Core](http://godoc.org/github.com/prometheus/prometheus).\n  * You will find a Travis CI configuration in `.travis.yml`.\n  * See the [Community page](https://prometheus.io/community) for how to reach the Prometheus developers and users on various communication channels.\n\n## Contributing\n\nRefer to [CONTRIBUTING.md](https://github.com/prometheus/prometheus/blob/master/CONTRIBUTING.md)\n\n## License\n\nApache License 2.0, see [LICENSE](https://github.com/prometheus/prometheus/blob/master/LICENSE).\n\n\n[travis]: https://travis-ci.org/prometheus/prometheus\n[hub]: https://hub.docker.com/r/prom/prometheus/\n[circleci]: https://circleci.com/gh/prometheus/prometheus\n[quay]: https://quay.io/repository/prometheus/prometheus\n"
  },
  {
    "repo": "mholt/caddy",
    "content": "\u003cp align=\"center\"\u003e\n\t\u003ca href=\"https://caddyserver.com\"\u003e\u003cimg src=\"https://user-images.githubusercontent.com/1128849/36338535-05fb646a-136f-11e8-987b-e6901e717d5a.png\" alt=\"Caddy\" width=\"450\"\u003e\u003c/a\u003e\n\u003c/p\u003e\n\u003ch3 align=\"center\"\u003eEvery Site on HTTPS \u003c!-- Serve Confidently --\u003e\u003c/h3\u003e\n\u003cp align=\"center\"\u003eCaddy is a general-purpose HTTP/2 web server that serves HTTPS by default.\u003c/p\u003e\n\u003cp align=\"center\"\u003e\n\t\u003ca href=\"https://travis-ci.org/mholt/caddy\"\u003e\u003cimg src=\"https://img.shields.io/travis/mholt/caddy.svg?label=linux+build\"\u003e\u003c/a\u003e\n\t\u003ca href=\"https://ci.appveyor.com/project/mholt/caddy\"\u003e\u003cimg src=\"https://img.shields.io/appveyor/ci/mholt/caddy.svg?label=windows+build\"\u003e\u003c/a\u003e\n\t\u003ca href=\"https://godoc.org/github.com/mholt/caddy\"\u003e\u003cimg src=\"https://img.shields.io/badge/godoc-reference-blue.svg\"\u003e\u003c/a\u003e\n\t\u003ca href=\"https://goreportcard.com/report/mholt/caddy\"\u003e\u003cimg src=\"https://goreportcard.com/badge/github.com/mholt/caddy\"\u003e\u003c/a\u003e\n\t\u003cbr\u003e\n\t\u003ca href=\"https://twitter.com/caddyserver\" title=\"@caddyserver on Twitter\"\u003e\u003cimg src=\"https://img.shields.io/badge/twitter-@caddyserver-55acee.svg\" alt=\"@caddyserver on Twitter\"\u003e\u003c/a\u003e\n\t\u003ca href=\"https://caddy.community\" title=\"Caddy Forum\"\u003e\u003cimg src=\"https://img.shields.io/badge/community-forum-ff69b4.svg\" alt=\"Caddy Forum\"\u003e\u003c/a\u003e\n\t\u003ca href=\"https://sourcegraph.com/github.com/mholt/caddy?badge\" title=\"Caddy on Sourcegraph\"\u003e\u003cimg src=\"https://sourcegraph.com/github.com/mholt/caddy/-/badge.svg\" alt=\"Caddy on Sourcegraph\"\u003e\u003c/a\u003e\n\u003c/p\u003e\n\u003cp align=\"center\"\u003e\n\t\u003ca href=\"https://caddyserver.com/download\"\u003eDownload\u003c/a\u003e ¬∑\n\t\u003ca href=\"https://caddyserver.com/docs\"\u003eDocumentation\u003c/a\u003e ¬∑\n\t\u003ca href=\"https://caddy.community\"\u003eCommunity\u003c/a\u003e\n\u003c/p\u003e\n\n---\n\nCaddy is a **production-ready** open-source web server that is fast, easy to use, and makes you more productive.\n\nAvailable for Windows, Mac, Linux, BSD, Solaris, and [Android](https://github.com/mholt/caddy/wiki/Running-Caddy-on-Android).\n\n\u003cp align=\"center\"\u003e\n\t\u003cb\u003eThanks to our special sponsor:\u003c/b\u003e\n\t\u003cbr\u003e\u003cbr\u003e\n\t\u003ca href=\"https://relicabackup.com\"\u003e\u003cimg src=\"https://caddyserver.com/resources/images/sponsors/relica.png\" width=\"220\" alt=\"Relica - Cross-platform file backup to the cloud, local disks, or other computers\"\u003e\u003c/a\u003e\n\u003c/p\u003e\n\n## Menu\n\n- [Features](#features)\n- [Install](#install)\n- [Quick Start](#quick-start)\n- [Running in Production](#running-in-production)\n- [Contributing](#contributing)\n- [Donors](#donors)\n- [About the Project](#about-the-project)\n\n## Features\n\n- **Easy configuration** with the Caddyfile\n- **Automatic HTTPS** on by default (via [Let's Encrypt](https://letsencrypt.org))\n- **HTTP/2** by default\n- **Virtual hosting** so multiple sites just work\n- Experimental **QUIC support** for cutting-edge transmissions\n- TLS session ticket **key rotation** for more secure connections\n- **Extensible with plugins** because a convenient web server is a helpful one\n- **Runs anywhere** with **no external dependencies** (not even libc)\n\n[See a more complete list of features built into Caddy.](https://caddyserver.com/features) On top of all those, Caddy does even more with plugins: choose which plugins you want at [download](https://caddyserver.com/download).\n\nAltogether, Caddy can do things other web servers simply cannot do. Its features and plugins save you time and mistakes, and will cheer you up. Your Caddy instance takes care of the details for you!\n\n\n\u003cp align=\"center\"\u003e\n\t\u003cb\u003ePowered by\u003c/b\u003e\n\t\u003cbr\u003e\n\t\u003ca href=\"https://github.com/mholt/certmagic\"\u003e\u003cimg src=\"https://user-images.githubusercontent.com/1128849/49704830-49d37200-fbd5-11e8-8385-767e0cd033c3.png\" alt=\"CertMagic\" width=\"250\"\u003e\u003c/a\u003e\n\u003c/p\u003e\n\n\n## Install\n\nCaddy binaries have no dependencies and are available for every platform. Get Caddy any of these ways:\n\n- **[Download page](https://caddyserver.com/download)** (RECOMMENDED) allows you to customize your build in the browser\n- **[Latest release](https://github.com/mholt/caddy/releases/latest)** for pre-built, vanilla binaries\n- **[AWS Marketplace](https://aws.amazon.com/marketplace/pp/B07J1WNK75?qid=1539015041932\u0026sr=0-1\u0026ref_=srh_res_product_title\u0026cl_spe=C)** makes it easy to deploy directly to your cloud environment. \u003ca href=\"https://aws.amazon.com/marketplace/pp/B07J1WNK75?qid=1539015041932\u0026sr=0-1\u0026ref_=srh_res_product_title\u0026cl_spe=C\" target=\"_blank\"\u003e\n\u003cimg src=\"https://s3.amazonaws.com/cloudformation-examples/cloudformation-launch-stack.png\" alt=\"Get Caddy on the AWS Marketplace\" height=\"25\"/\u003e\u003c/a\u003e\n\n\n## Build\n\nTo build from source you need **[Git](https://git-scm.com/downloads)** and **[Go](https://golang.org/doc/install)** (1.10 or newer). Follow these instruction for fast building:\n\n- Get the source with `go get github.com/mholt/caddy/caddy` and then run `go get github.com/caddyserver/builds`\n- Now `cd $GOPATH/src/github.com/mholt/caddy/caddy` and run `go run build.go`\n\nThen make sure the `caddy` binary is in your PATH.\n\nTo build for other platforms, use build.go with the `--goos` and `--goarch` flags.\n\nWhen building from source, telemetry is enabled by default. You can disable it by changing `enableTelemetry` in run.go before compiling, or use the `-disabled-metrics` flag at runtime to disable only certain metrics.\n\n\n## Quick Start\n\nTo serve static files from the current working directory, run:\n\n```\ncaddy\n```\n\nCaddy's default port is 2015, so open your browser to [http://localhost:2015](http://localhost:2015).\n\n### Go from 0 to HTTPS in 5 seconds\n\nIf the `caddy` binary has permission to bind to low ports and your domain name's DNS records point to the machine you're on:\n\n```\ncaddy -host example.com\n```\n\nThis command serves static files from the current directory over HTTPS. Certificates are automatically obtained and renewed for you! Caddy is also automatically configuring ports 80 and 443 for you, and redirecting HTTP to HTTPS. Cool, huh?\n\n### Customizing your site\n\nTo customize how your site is served, create a file named Caddyfile by your site and paste this into it:\n\n```plain\nlocalhost\n\npush\nbrowse\nwebsocket /echo cat\next    .html\nlog    /var/log/access.log\nproxy  /api 127.0.0.1:7005\nheader /api Access-Control-Allow-Origin *\n```\n\nWhen you run `caddy` in that directory, it will automatically find and use that Caddyfile.\n\nThis simple file enables server push (via Link headers), allows directory browsing (for folders without an index file), hosts a WebSocket echo server at /echo, serves clean URLs, logs requests to an access log, proxies all API requests to a backend on port 7005, and adds the coveted  `Access-Control-Allow-Origin: *` header for all responses from the API.\n\nWow! Caddy can do a lot with just a few lines.\n\n### Doing more with Caddy\n\nTo host multiple sites and do more with the Caddyfile, please see the [Caddyfile tutorial](https://caddyserver.com/tutorial/caddyfile).\n\nSites with qualifying hostnames are served over [HTTPS by default](https://caddyserver.com/docs/automatic-https).\n\nCaddy has a nice little command line interface. Run `caddy -h` to view basic help or see the [CLI documentation](https://caddyserver.com/docs/cli) for details.\n\n\n## Running in Production\n\nCaddy is production-ready if you find it to be a good fit for your site and workflow.\n\n**Running as root:** We advise against this. You can still listen on ports \u003c 1024 on Linux using setcap like so: `sudo setcap cap_net_bind_service=+ep ./caddy`\n\nThe Caddy project does not officially maintain any system-specific integrations nor suggest how to administer your own system. But your download file includes [unofficial resources](https://github.com/mholt/caddy/tree/master/dist/init) contributed by the community that you may find helpful for running Caddy in production.\n\nHow you choose to run Caddy is up to you. Many users are satisfied with `nohup caddy \u0026`. Others use `screen`. Users who need Caddy to come back up after reboots either do so in the script that caused the reboot, add a command to an init script, or configure a service with their OS.\n\nIf you have questions or concerns about Caddy' underlying crypto implementations, consult Go's [crypto packages](https://golang.org/pkg/crypto), starting with their documentation, then issues, then the code itself; as Caddy uses mainly those libraries.\n\n\n## Contributing\n\n**[Join our forum](https://caddy.community) where you can chat with other Caddy users and developers!** To get familiar with the code base, try [Caddy code search on Sourcegraph](https://sourcegraph.com/github.com/mholt/caddy/)!\n\nPlease see our [contributing guidelines](https://github.com/mholt/caddy/blob/master/.github/CONTRIBUTING.md) for instructions. If you want to write a plugin, check out the [developer wiki](https://github.com/mholt/caddy/wiki).\n\nWe use GitHub issues and pull requests only for discussing bug reports and the development of specific changes. We welcome all other topics on the [forum](https://caddy.community)!\n\nIf you want to contribute to the documentation, please [submit an issue](https://github.com/mholt/caddy/issues/new) describing the change that should be made.\n\nThanks for making Caddy -- and the Web -- better!\n\n\n## Donors\n\n- [DigitalOcean](https://m.do.co/c/6d7bdafccf96) is hosting the Caddy project.\n- [DNSimple](https://dnsimple.link/resolving-caddy) provides DNS services for Caddy's sites.\n- [DNS Spy](https://dnsspy.io) keeps an eye on Caddy's DNS properties.\n\nWe thank them for their services. **If you want to help keep Caddy free, please [become a sponsor](https://caddyserver.com/pricing)!**\n\n\n## About the Project\n\nCaddy was born out of the need for a \"batteries-included\" web server that runs anywhere and doesn't have to take its configuration with it. Caddy took inspiration from [spark](https://github.com/rif/spark), [nginx](https://github.com/nginx/nginx), lighttpd,\n[Websocketd](https://github.com/joewalnes/websocketd) and [Vagrant](https://www.vagrantup.com/), which provides a pleasant mixture of features from each of them.\n\n**The name \"Caddy\" is trademarked:** The name of the software is \"Caddy\", not \"Caddy Server\" or \"CaddyServer\". Please call it \"Caddy\" or, if you wish to clarify, \"the Caddy web server\". See [brand guidelines](https://caddyserver.com/brand). Caddy is a registered trademark of Light Code Labs, LLC.\n\n*Author on Twitter: [@mholt6](https://twitter.com/mholt6)*\n"
  },
  {
    "repo": "containous/traefik",
    "content": "\n\u003cp align=\"center\"\u003e\n\u003cimg src=\"docs/img/traefik.logo.png\" alt=\"Traefik\" title=\"Traefik\" /\u003e\n\u003c/p\u003e\n\n[![Build Status SemaphoreCI](https://semaphoreci.com/api/v1/containous/traefik/branches/master/shields_badge.svg)](https://semaphoreci.com/containous/traefik)\n[![Docs](https://img.shields.io/badge/docs-current-brightgreen.svg)](https://docs.traefik.io)\n[![Go Report Card](https://goreportcard.com/badge/containous/traefik)](http://goreportcard.com/report/containous/traefik)\n[![](https://images.microbadger.com/badges/image/traefik.svg)](https://microbadger.com/images/traefik)\n[![License](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/containous/traefik/blob/master/LICENSE.md)\n[![Join the chat at https://slack.traefik.io](https://img.shields.io/badge/style-register-green.svg?style=social\u0026label=Slack)](https://slack.traefik.io)\n[![Twitter](https://img.shields.io/twitter/follow/traefik.svg?style=social)](https://twitter.com/intent/follow?screen_name=traefik)\n\n\nTraefik is a modern HTTP reverse proxy and load balancer that makes deploying microservices easy.\nTraefik integrates with your existing infrastructure components ([Docker](https://www.docker.com/), [Swarm mode](https://docs.docker.com/engine/swarm/), [Kubernetes](https://kubernetes.io), [Marathon](https://mesosphere.github.io/marathon/), [Consul](https://www.consul.io/), [Etcd](https://coreos.com/etcd/), [Rancher](https://rancher.com), [Amazon ECS](https://aws.amazon.com/ecs), ...) and configures itself automatically and dynamically.\nPointing Traefik at your orchestrator should be the _only_ configuration step you need.\n\n---\n\n. **[Overview](#overview)** .\n**[Features](#features)** .\n**[Supported backends](#supported-backends)** .\n**[Quickstart](#quickstart)** .\n**[Web UI](#web-ui)** .\n**[Documentation](#documentation)** .\n\n. **[Support](#support)** .\n**[Release cycle](#release-cycle)** .\n**[Contributing](#contributing)** .\n**[Maintainers](#maintainers)** .\n**[Credits](#credits)** .\n\n---\n\n:construction: As stated in the [1.7 release note](https://blog.containo.us/traefik-1-7-yet-another-slice-of-awesomeness-2a9c99737889#782d), a significant update is in progress on the [master](https://github.com/containous/traefik/tree/master) branch. This branch will remain in constant evolution and prone to change with little notice, so use it for test purposes only.\n\n## Overview\n\nImagine that you have deployed a bunch of microservices with the help of an orchestrator (like Swarm or Kubernetes) or a service registry (like etcd or consul).\nNow you want users to access these microservices, and you need a reverse proxy.\n\nTraditional reverse-proxies require that you configure _each_ route that will connect paths and subdomains to _each_ microservice. \nIn an environment where you add, remove, kill, upgrade, or scale your services _many_ times a day, the task of keeping the routes up to date becomes tedious. \n\n**This is when Traefik can help you!**\n\nTraefik listens to your service registry/orchestrator API and instantly generates the routes so your microservices are connected to the outside world -- without further intervention from your part. \n\n**Run Traefik and let it do the work for you!** \n_(But if you'd rather configure some of your routes manually, Traefik supports that too!)_\n\n![Architecture](docs/img/architecture.png)\n\n## Features\n\n- Continuously updates its configuration (No restarts!)\n- Supports multiple load balancing algorithms\n- Provides HTTPS to your microservices by leveraging [Let's Encrypt](https://letsencrypt.org)  (wildcard certificates support)\n- Circuit breakers, retry\n- High Availability with cluster mode (beta)\n- See the magic through its clean web UI\n- Websocket, HTTP/2, GRPC ready\n- Provides metrics (Rest, Prometheus, Datadog, Statsd, InfluxDB)\n- Keeps access logs (JSON, CLF)\n- Fast\n- Exposes a Rest API\n- Packaged as a single binary file (made with :heart: with go) and available as a [tiny](https://microbadger.com/images/traefik) [official](https://hub.docker.com/r/_/traefik/) docker image\n\n\n## Supported Backends\n\n- [Docker](https://docs.traefik.io/configuration/backends/docker) / [Swarm mode](https://docs.traefik.io/configuration/backends/docker#docker-swarm-mode)\n- [Kubernetes](https://docs.traefik.io/configuration/backends/kubernetes)\n- [Mesos](https://docs.traefik.io/configuration/backends/mesos) / [Marathon](https://docs.traefik.io/configuration/backends/marathon)\n- [Rancher](https://docs.traefik.io/configuration/backends/rancher) (API, Metadata)\n- [Azure Service Fabric](https://docs.traefik.io/configuration/backends/servicefabric)\n- [Consul Catalog](https://docs.traefik.io/configuration/backends/consulcatalog)\n- [Consul](https://docs.traefik.io/configuration/backends/consul) / [Etcd](https://docs.traefik.io/configuration/backends/etcd) / [Zookeeper](https://docs.traefik.io/configuration/backends/zookeeper) / [BoltDB](https://docs.traefik.io/configuration/backends/boltdb)\n- [Eureka](https://docs.traefik.io/configuration/backends/eureka)\n- [Amazon ECS](https://docs.traefik.io/configuration/backends/ecs)\n- [Amazon DynamoDB](https://docs.traefik.io/configuration/backends/dynamodb)\n- [File](https://docs.traefik.io/configuration/backends/file)\n- [Rest](https://docs.traefik.io/configuration/backends/rest)\n\n## Quickstart\n\nTo get your hands on Traefik, you can use the [5-Minute Quickstart](http://docs.traefik.io/#the-traefik-quickstart-using-docker) in our documentation (you will need Docker).\n\nAlternatively, if you don't want to install anything on your computer, you can try Traefik online in this great [Katacoda tutorial](https://www.katacoda.com/courses/traefik/deploy-load-balancer) that shows how to load balance requests between multiple Docker containers. \n\nIf you are looking for a more comprehensive and real use-case example, you can also check [Play-With-Docker](http://training.play-with-docker.com/traefik-load-balancing/) to see how to load balance between multiple nodes.\n\n## Web UI\n\nYou can access the simple HTML frontend of Traefik.\n\n![Web UI Providers](docs/img/web.frontend.png)\n![Web UI Health](docs/img/traefik-health.png)\n\n## Documentation\n\nYou can find the complete documentation at [https://docs.traefik.io](https://docs.traefik.io).\nA collection of contributions around Traefik can be found at [https://awesome.traefik.io](https://awesome.traefik.io).\n\n## Support\n\nTo get community support, you can:\n- join the Traefik community Slack channel: [![Join the chat at https://slack.traefik.io](https://img.shields.io/badge/style-register-green.svg?style=social\u0026label=Slack)](https://slack.traefik.io)\n- use [Stack Overflow](https://stackoverflow.com/questions/tagged/traefik) (using the `traefik` tag)\n\nIf you need commercial support, please contact [Containo.us](https://containo.us) by mail: \u003cmailto:support@containo.us\u003e.\n\n## Download\n\n- Grab the latest binary from the [releases](https://github.com/containous/traefik/releases) page and run it with the [sample configuration file](https://raw.githubusercontent.com/containous/traefik/master/traefik.sample.toml):\n\n```shell\n./traefik --configFile=traefik.toml\n```\n\n- Or use the official tiny Docker image and run it with the [sample configuration file](https://raw.githubusercontent.com/containous/traefik/master/traefik.sample.toml):\n\n```shell\ndocker run -d -p 8080:8080 -p 80:80 -v $PWD/traefik.toml:/etc/traefik/traefik.toml traefik\n```\n\n- Or get the sources:\n\n```shell\ngit clone https://github.com/containous/traefik\n```\n\n## Introductory Videos\n\nHere is a talk given by [Emile Vauge](https://github.com/emilevauge) at GopherCon 2017.\nYou will learn Traefik basics in less than 10 minutes.\n\n[![Traefik GopherCon 2017](https://img.youtube.com/vi/RgudiksfL-k/0.jpg)](https://www.youtube.com/watch?v=RgudiksfL-k)\n\nHere is a talk given by [Ed Robinson](https://github.com/errm) at [ContainerCamp UK](https://container.camp) conference.\nYou will learn fundamental Traefik features and see some demos with Kubernetes.\n\n[![Traefik ContainerCamp UK](https://img.youtube.com/vi/aFtpIShV60I/0.jpg)](https://www.youtube.com/watch?v=aFtpIShV60I)\n\n## Maintainers\n\n[Information about process and maintainers](MAINTAINER.md)\n\n## Contributing\n\nIf you'd like to contribute to the project, refer to the [contributing documentation](CONTRIBUTING.md).\n\nPlease note that this project is released with a [Contributor Code of Conduct](CODE_OF_CONDUCT.md).\nBy participating in this project, you agree to abide by its terms.\n\n## Release Cycle\n\n- We release a new version (e.g. 1.1.0, 1.2.0, 1.3.0) every other month.\n- Release Candidates are available before the release (e.g. 1.1.0-rc1, 1.1.0-rc2, 1.1.0-rc3, 1.1.0-rc4, before 1.1.0)\n- Bug-fixes (e.g. 1.1.1, 1.1.2, 1.2.1, 1.2.3) are released as needed (no additional features are delivered in those versions, bug-fixes only)\n\nEach version is supported until the next one is released (e.g. 1.1.x will be supported until 1.2.0 is out)\n\nWe use [Semantic Versioning](http://semver.org/)\n\n## Mailing lists\n\n- General announcements, new releases: mail at news+subscribe@traefik.io or on [the online viewer](https://groups.google.com/a/traefik.io/forum/#!forum/news)\n- Security announcements: mail at security+subscribe@traefik.io or on [the online viewer](https://groups.google.com/a/traefik.io/forum/#!forum/security).\n\n## Credits\n\nKudos to [Peka](http://peka.byethost11.com/photoblog/) for his awesome work on the logo ![logo](docs/img/traefik.icon.png).\n\nTraefik's logo is licensed under the Creative Commons 3.0 Attributions license.\n\nTraefik's logo was inspired by the gopher stickers made by Takuya Ueda (https://twitter.com/tenntenn).\nThe original Go gopher was designed by Renee French (http://reneefrench.blogspot.com/).\n"
  },
  {
    "repo": "junegunn/fzf",
    "content": "\u003cimg src=\"https://raw.githubusercontent.com/junegunn/i/master/fzf.png\" height=\"170\" alt=\"fzf - a command-line fuzzy finder\"\u003e [![travis-ci](https://travis-ci.org/junegunn/fzf.svg?branch=master)](https://travis-ci.org/junegunn/fzf)\n===\n\nfzf is a general-purpose command-line fuzzy finder.\n\n\u003cimg src=\"https://raw.githubusercontent.com/junegunn/i/master/fzf-preview.png\" width=640\u003e\n\nIt's an interactive Unix filter for command-line that can be used with any\nlist; files, command history, processes, hostnames, bookmarks, git commits,\netc.\n\nPros\n----\n\n- Portable, no dependencies\n- Blazingly fast\n- The most comprehensive feature set\n- Flexible layout\n- Batteries included\n    - Vim/Neovim plugin, key bindings and fuzzy auto-completion\n\nTable of Contents\n-----------------\n\n   * [Installation](#installation)\n      * [Using Homebrew or Linuxbrew](#using-homebrew-or-linuxbrew)\n      * [Using git](#using-git)\n      * [As Vim plugin](#as-vim-plugin)\n      * [Arch Linux](#arch-linux)\n      * [Fedora](#fedora)\n      * [Windows](#windows)\n   * [Upgrading fzf](#upgrading-fzf)\n   * [Building fzf](#building-fzf)\n   * [Usage](#usage)\n      * [Using the finder](#using-the-finder)\n      * [Layout](#layout)\n      * [Search syntax](#search-syntax)\n      * [Environment variables](#environment-variables)\n      * [Options](#options)\n   * [Examples](#examples)\n   * [fzf-tmux script](#fzf-tmux-script)\n   * [Key bindings for command line](#key-bindings-for-command-line)\n   * [Fuzzy completion for bash and zsh](#fuzzy-completion-for-bash-and-zsh)\n      * [Files and directories](#files-and-directories)\n      * [Process IDs](#process-ids)\n      * [Host names](#host-names)\n      * [Environment variables / Aliases](#environment-variables--aliases)\n      * [Settings](#settings)\n      * [Supported commands](#supported-commands)\n   * [Vim plugin](#vim-plugin)\n   * [Advanced topics](#advanced-topics)\n      * [Performance](#performance)\n      * [Executing external programs](#executing-external-programs)\n      * [Preview window](#preview-window)\n   * [Tips](#tips)\n      * [Respecting .gitignore](#respecting-gitignore)\n      * [git ls-tree for fast traversal](#git-ls-tree-for-fast-traversal)\n      * [Fish shell](#fish-shell)\n   * [Related projects](#related-projects)\n   * [\u003ca href=\"LICENSE\"\u003eLicense\u003c/a\u003e](#license)\n\nInstallation\n------------\n\nfzf project consists of the following components:\n\n- `fzf` executable\n- `fzf-tmux` script for launching fzf in a tmux pane\n- Shell extensions\n    - Key bindings (`CTRL-T`, `CTRL-R`, and `ALT-C`) (bash, zsh, fish)\n    - Fuzzy auto-completion (bash, zsh)\n- Vim/Neovim plugin\n\nYou can [download fzf executable][bin] alone if you don't need the extra\nstuff.\n\n[bin]: https://github.com/junegunn/fzf-bin/releases\n\n### Using Homebrew or Linuxbrew\n\nYou can use [Homebrew](http://brew.sh/) or [Linuxbrew](http://linuxbrew.sh/)\nto install fzf.\n\n```sh\nbrew install fzf\n\n# To install useful key bindings and fuzzy completion:\n$(brew --prefix)/opt/fzf/install\n```\n\n### Using git\n\nAlternatively, you can \"git clone\" this repository to any directory and run\n[install](https://github.com/junegunn/fzf/blob/master/install) script.\n\n```sh\ngit clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf\n~/.fzf/install\n```\n\n### As Vim plugin\n\nOnce you have fzf installed, you can enable it inside Vim simply by adding the\ndirectory to `\u0026runtimepath` in your Vim configuration file as follows:\n\n```vim\n\" If installed using Homebrew\nset rtp+=/usr/local/opt/fzf\n\n\" If installed using git\nset rtp+=~/.fzf\n```\n\nIf you use [vim-plug](https://github.com/junegunn/vim-plug), the same can be\nwritten as:\n\n```vim\n\" If installed using Homebrew\nPlug '/usr/local/opt/fzf'\n\n\" If installed using git\nPlug '~/.fzf'\n```\n\nBut instead of separately installing fzf on your system (using Homebrew or\n\"git clone\") and enabling it on Vim (adding it to `\u0026runtimepath`), you can use\nvim-plug to do both.\n\n```vim\n\" PlugInstall and PlugUpdate will clone fzf in ~/.fzf and run the install script\nPlug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }\n  \" Both options are optional. You don't have to install fzf in ~/.fzf\n  \" and you don't have to run the install script if you use fzf only in Vim.\n```\n\n### Arch Linux\n\n```sh\nsudo pacman -S fzf\n```\n\n### Fedora\n\nfzf is available in Fedora 26 and above, and can be installed using the usual\nmethod:\n\n```sh\nsudo dnf install fzf\n```\n\nShell completion and plugins for vim or neovim are enabled by default. Shell\nkey bindings are installed but not enabled by default. See Fedora's package\ndocumentation (/usr/share/doc/fzf/README.Fedora) for more information.\n\n### Windows\n\nPre-built binaries for Windows can be downloaded [here][bin]. fzf is also\navailable as a [Chocolatey package][choco].\n\n[choco]: https://chocolatey.org/packages/fzf\n\n```sh\nchoco install fzf\n```\n\nHowever, other components of the project may not work on Windows. Known issues\nand limitations can be found on [the wiki page][windows-wiki]. You might want\nto consider installing fzf on [Windows Subsystem for Linux][wsl] where\neverything runs flawlessly.\n\n[windows-wiki]: https://github.com/junegunn/fzf/wiki/Windows\n[wsl]: https://blogs.msdn.microsoft.com/wsl/\n\nUpgrading fzf\n-------------\n\nfzf is being actively developed and you might want to upgrade it once in a\nwhile. Please follow the instruction below depending on the installation\nmethod used.\n\n- git: `cd ~/.fzf \u0026\u0026 git pull \u0026\u0026 ./install`\n- brew: `brew update; brew reinstall fzf`\n- chocolatey: `choco upgrade fzf`\n- vim-plug: `:PlugUpdate fzf`\n\nBuilding fzf\n------------\n\nSee [BUILD.md](BUILD.md).\n\nUsage\n-----\n\nfzf will launch interactive finder, read the list from STDIN, and write the\nselected item to STDOUT.\n\n```sh\nfind * -type f | fzf \u003e selected\n```\n\nWithout STDIN pipe, fzf will use find command to fetch the list of\nfiles excluding hidden ones. (You can override the default command with\n`FZF_DEFAULT_COMMAND`)\n\n```sh\nvim $(fzf)\n```\n\n#### Using the finder\n\n- `CTRL-J` / `CTRL-K` (or `CTRL-N` / `CTRL-P`) to move cursor up and down\n- `Enter` key to select the item, `CTRL-C` / `CTRL-G` / `ESC` to exit\n- On multi-select mode (`-m`), `TAB` and `Shift-TAB` to mark multiple items\n- Emacs style key bindings\n- Mouse: scroll, click, double-click; shift-click and shift-scroll on\n  multi-select mode\n\n#### Layout\n\nfzf by default starts in fullscreen mode, but you can make it start below the\ncursor with `--height` option.\n\n```sh\nvim $(fzf --height 40%)\n```\n\nAlso check out `--reverse` and `--layout` options if you prefer\n\"top-down\" layout instead of the default \"bottom-up\" layout.\n\n```sh\nvim $(fzf --height 40% --reverse)\n```\n\nYou can add these options to `$FZF_DEFAULT_OPTS` so that they're applied by\ndefault. For example,\n\n```sh\nexport FZF_DEFAULT_OPTS='--height 40% --layout=reverse --border'\n```\n\n#### Search syntax\n\nUnless otherwise specified, fzf starts in \"extended-search mode\" where you can\ntype in multiple search terms delimited by spaces. e.g. `^music .mp3$ sbtrkt\n!fire`\n\n| Token     | Match type                 | Description                          |\n| --------- | -------------------------- | ------------------------------------ |\n| `sbtrkt`  | fuzzy-match                | Items that match `sbtrkt`            |\n| `'wild`   | exact-match (quoted)       | Items that include `wild`            |\n| `^music`  | prefix-exact-match         | Items that start with `music`        |\n| `.mp3$`   | suffix-exact-match         | Items that end with `.mp3`           |\n| `!fire`   | inverse-exact-match        | Items that do not include `fire`     |\n| `!^music` | inverse-prefix-exact-match | Items that do not start with `music` |\n| `!.mp3$`  | inverse-suffix-exact-match | Items that do not end with `.mp3`    |\n\nIf you don't prefer fuzzy matching and do not wish to \"quote\" every word,\nstart fzf with `-e` or `--exact` option. Note that when  `--exact` is set,\n`'`-prefix \"unquotes\" the term.\n\nA single bar character term acts as an OR operator. For example, the following\nquery matches entries that start with `core` and end with either `go`, `rb`,\nor `py`.\n\n```\n^core go$ | rb$ | py$\n```\n\n#### Environment variables\n\n- `FZF_DEFAULT_COMMAND`\n    - Default command to use when input is tty\n    - e.g. `export FZF_DEFAULT_COMMAND='fd --type f'`\n- `FZF_DEFAULT_OPTS`\n    - Default options\n    - e.g. `export FZF_DEFAULT_OPTS=\"--layout=reverse --inline-info\"`\n\n#### Options\n\nSee the man page (`man fzf`) for the full list of options.\n\nExamples\n--------\n\nMany useful examples can be found on [the wiki\npage](https://github.com/junegunn/fzf/wiki/examples). Feel free to add your\nown as well.\n\n`fzf-tmux` script\n-----------------\n\n[fzf-tmux](bin/fzf-tmux) is a bash script that opens fzf in a tmux pane.\n\n```sh\n# usage: fzf-tmux [-u|-d [HEIGHT[%]]] [-l|-r [WIDTH[%]]] [--] [FZF OPTIONS]\n#        (-[udlr]: up/down/left/right)\n\n# select git branches in horizontal split below (15 lines)\ngit branch | fzf-tmux -d 15\n\n# select multiple words in vertical split on the left (20% of screen width)\ncat /usr/share/dict/words | fzf-tmux -l 20% --multi --reverse\n```\n\nIt will still work even when you're not on tmux, silently ignoring `-[udlr]`\noptions, so you can invariably use `fzf-tmux` in your scripts.\n\nAlternatively, you can use `--height HEIGHT[%]` option not to start fzf in\nfullscreen mode.\n\n```sh\nfzf --height 40%\n```\n\nKey bindings for command-line\n-----------------------------\n\nThe install script will setup the following key bindings for bash, zsh, and\nfish.\n\n- `CTRL-T` - Paste the selected files and directories onto the command-line\n    - Set `FZF_CTRL_T_COMMAND` to override the default command\n    - Set `FZF_CTRL_T_OPTS` to pass additional options\n- `CTRL-R` - Paste the selected command from history onto the command-line\n    - If you want to see the commands in chronological order, press `CTRL-R`\n      again which toggles sorting by relevance\n    - Set `FZF_CTRL_R_OPTS` to pass additional options\n- `ALT-C` - cd into the selected directory\n    - Set `FZF_ALT_C_COMMAND` to override the default command\n    - Set `FZF_ALT_C_OPTS` to pass additional options\n\nIf you're on a tmux session, you can start fzf in a split pane by setting\n`FZF_TMUX` to 1, and change the height of the pane with `FZF_TMUX_HEIGHT`\n(e.g. `20`, `50%`).\n\nIf you use vi mode on bash, you need to add `set -o vi` *before* `source\n~/.fzf.bash` in your .bashrc, so that it correctly sets up key bindings for vi\nmode.\n\nMore tips can be found on [the wiki page](https://github.com/junegunn/fzf/wiki/Configuring-shell-key-bindings).\n\nFuzzy completion for bash and zsh\n---------------------------------\n\n#### Files and directories\n\nFuzzy completion for files and directories can be triggered if the word before\nthe cursor ends with the trigger sequence which is by default `**`.\n\n- `COMMAND [DIRECTORY/][FUZZY_PATTERN]**\u003cTAB\u003e`\n\n```sh\n# Files under current directory\n# - You can select multiple items with TAB key\nvim **\u003cTAB\u003e\n\n# Files under parent directory\nvim ../**\u003cTAB\u003e\n\n# Files under parent directory that match `fzf`\nvim ../fzf**\u003cTAB\u003e\n\n# Files under your home directory\nvim ~/**\u003cTAB\u003e\n\n\n# Directories under current directory (single-selection)\ncd **\u003cTAB\u003e\n\n# Directories under ~/github that match `fzf`\ncd ~/github/fzf**\u003cTAB\u003e\n```\n\n#### Process IDs\n\nFuzzy completion for PIDs is provided for kill command. In this case,\nthere is no trigger sequence, just press tab key after kill command.\n\n```sh\n# Can select multiple processes with \u003cTAB\u003e or \u003cShift-TAB\u003e keys\nkill -9 \u003cTAB\u003e\n```\n\n#### Host names\n\nFor ssh and telnet commands, fuzzy completion for host names is provided. The\nnames are extracted from /etc/hosts and ~/.ssh/config.\n\n```sh\nssh **\u003cTAB\u003e\ntelnet **\u003cTAB\u003e\n```\n\n#### Environment variables / Aliases\n\n```sh\nunset **\u003cTAB\u003e\nexport **\u003cTAB\u003e\nunalias **\u003cTAB\u003e\n```\n\n#### Settings\n\n```sh\n# Use ~~ as the trigger sequence instead of the default **\nexport FZF_COMPLETION_TRIGGER='~~'\n\n# Options to fzf command\nexport FZF_COMPLETION_OPTS='+c -x'\n\n# Use fd (https://github.com/sharkdp/fd) instead of the default find\n# command for listing path candidates.\n# - The first argument to the function ($1) is the base path to start traversal\n# - See the source code (completion.{bash,zsh}) for the details.\n_fzf_compgen_path() {\n  fd --hidden --follow --exclude \".git\" . \"$1\"\n}\n\n# Use fd to generate the list for directory completion\n_fzf_compgen_dir() {\n  fd --type d --hidden --follow --exclude \".git\" . \"$1\"\n}\n```\n\n#### Supported commands\n\nOn bash, fuzzy completion is enabled only for a predefined set of commands\n(`complete | grep _fzf` to see the list). But you can enable it for other\ncommands as well as follows.\n\n```sh\ncomplete -F _fzf_path_completion -o default -o bashdefault ag\ncomplete -F _fzf_dir_completion -o default -o bashdefault tree\n```\n\nVim plugin\n----------\n\nSee [README-VIM.md](README-VIM.md).\n\nAdvanced topics\n---------------\n\n### Performance\n\nfzf is fast and is [getting even faster][perf]. Performance should not be\na problem in most use cases. However, you might want to be aware of the\noptions that affect the performance.\n\n- `--ansi` tells fzf to extract and parse ANSI color codes in the input and it\n  makes the initial scanning slower. So it's not recommended that you add it\n  to your `$FZF_DEFAULT_OPTS`.\n- `--nth` makes fzf slower as fzf has to tokenize each line.\n- `--with-nth` makes fzf slower as fzf has to tokenize and reassemble each\n  line.\n- If you absolutely need better performance, you can consider using\n  `--algo=v1` (the default being `v2`) to make fzf use a faster greedy\n  algorithm. However, this algorithm is not guaranteed to find the optimal\n  ordering of the matches and is not recommended.\n\n[perf]: https://junegunn.kr/images/fzf-0.17.0.png\n\n### Executing external programs\n\nYou can set up key bindings for starting external processes without leaving\nfzf (`execute`, `execute-silent`).\n\n```bash\n# Press F1 to open the file with less without leaving fzf\n# Press CTRL-Y to copy the line to clipboard and aborts fzf (requires pbcopy)\nfzf --bind 'f1:execute(less -f {}),ctrl-y:execute-silent(echo {} | pbcopy)+abort'\n```\n\nSee *KEY BINDINGS* section of the man page for details.\n\n### Preview window\n\nWhen `--preview` option is set, fzf automatically starts an external process with\nthe current line as the argument and shows the result in the split window.\n\n```bash\n# {} is replaced to the single-quoted string of the focused line\nfzf --preview 'cat {}'\n```\n\nSince the preview window is updated only after the process is complete, it's\nimportant that the command finishes quickly.\n\n```bash\n# Use head instead of cat so that the command doesn't take too long to finish\nfzf --preview 'head -100 {}'\n```\n\nPreview window supports ANSI colors, so you can use programs that\nsyntax-highlights the content of a file.\n\n- Highlight: http://www.andre-simon.de/doku/highlight/en/highlight.php\n- CodeRay: http://coderay.rubychan.de/\n- Rouge: https://github.com/jneen/rouge\n\n```bash\n# Try highlight, coderay, rougify in turn, then fall back to cat\nfzf --preview '[[ $(file --mime {}) =~ binary ]] \u0026\u0026\n                 echo {} is a binary file ||\n                 (highlight -O ansi -l {} ||\n                  coderay {} ||\n                  rougify {} ||\n                  cat {}) 2\u003e /dev/null | head -500'\n```\n\nYou can customize the size and position of the preview window using\n`--preview-window` option. For example,\n\n```bash\nfzf --height 40% --reverse --preview 'file {}' --preview-window down:1\n```\n\nFor more advanced examples, see [Key bindings for git with fzf][fzf-git]\n([code](https://gist.github.com/junegunn/8b572b8d4b5eddd8b85e5f4d40f17236)).\n\n[fzf-git]: https://junegunn.kr/2016/07/fzf-git/\n\nTips\n----\n\n#### Respecting `.gitignore`\n\nYou can use [fd](https://github.com/sharkdp/fd),\n[ripgrep](https://github.com/BurntSushi/ripgrep), or [the silver\nsearcher](https://github.com/ggreer/the_silver_searcher) instead of the\ndefault find command to traverse the file system while respecting\n`.gitignore`.\n\n```sh\n# Feed the output of fd into fzf\nfd --type f | fzf\n\n# Setting fd as the default source for fzf\nexport FZF_DEFAULT_COMMAND='fd --type f'\n\n# Now fzf (w/o pipe) will use fd instead of find\nfzf\n\n# To apply the command to CTRL-T as well\nexport FZF_CTRL_T_COMMAND=\"$FZF_DEFAULT_COMMAND\"\n```\n\nIf you want the command to follow symbolic links, and don't want it to exclude\nhidden files, use the following command:\n\n```sh\nexport FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'\n```\n\n#### `git ls-tree` for fast traversal\n\nIf you're running fzf in a large git repository, `git ls-tree` can boost up the\nspeed of the traversal.\n\n```sh\nexport FZF_DEFAULT_COMMAND='\n  (git ls-tree -r --name-only HEAD ||\n   find . -path \"*/\\.*\" -prune -o -type f -print -o -type l -print |\n      sed s/^..//) 2\u003e /dev/null'\n```\n\n#### Fish shell\n\nFish shell before version 2.6.0 [doesn't allow](https://github.com/fish-shell/fish-shell/issues/1362)\nreading from STDIN in command substitution, which means simple `vim (fzf)`\ndoesn't work as expected. The workaround for fish 2.5.0 and earlier is to use\nthe `read` fish command:\n\n```sh\nfzf | read -l result; and vim $result\n```\n\nor, for multiple results:\n\n```sh\nfzf -m | while read -l r; set result $result $r; end; and vim $result\n```\n\nThe globbing system is different in fish and thus `**` completion will not work.\nHowever, the `CTRL-T` command will use the last token on the command-line as the\nroot folder for the recursive search. For instance, hitting `CTRL-T` at the end\nof the following command-line\n\n```sh\nls /var/\n```\n\nwill list all files and folders under `/var/`.\n\nWhen using a custom `FZF_CTRL_T_COMMAND`, use the unexpanded `$dir` variable to\nmake use of this feature. `$dir` defaults to `.` when the last token is not a\nvalid directory. Example:\n\n```sh\nset -g FZF_CTRL_T_COMMAND \"command find -L \\$dir -type f 2\u003e /dev/null | sed '1d; s#^\\./##'\"\n```\n\nRelated projects\n----------------\n\nhttps://github.com/junegunn/fzf/wiki/Related-projects\n\n[License](LICENSE)\n------------------\n\nThe MIT License (MIT)\n\nCopyright (c) 2017 Junegunn Choi\n"
  },
  {
    "repo": "astaxie/beego",
    "content": "# Beego [![Build Status](https://travis-ci.org/astaxie/beego.svg?branch=master)](https://travis-ci.org/astaxie/beego) [![GoDoc](http://godoc.org/github.com/astaxie/beego?status.svg)](http://godoc.org/github.com/astaxie/beego) [![Foundation](https://img.shields.io/badge/Golang-Foundation-green.svg)](http://golangfoundation.org) [![Go Report Card](https://goreportcard.com/badge/github.com/astaxie/beego)](https://goreportcard.com/report/github.com/astaxie/beego)\n\n\nbeego is used for rapid development of RESTful APIs, web apps and backend services in Go.\nIt is inspired by Tornado, Sinatra and Flask. beego has some Go-specific features such as interfaces and struct embedding.\n\n Response time ranking: [web-frameworks](https://github.com/the-benchmarker/web-frameworks).\n\n###### More info at [beego.me](http://beego.me).\n\n## Quick Start\n\n#### Download and install\n\n    go get github.com/astaxie/beego\n\n#### Create file `hello.go`\n```go\npackage main\n\nimport \"github.com/astaxie/beego\"\n\nfunc main(){\n    beego.Run()\n}\n```\n#### Build and run\n\n    go build hello.go\n    ./hello\n\n#### Go to [http://localhost:8080](http://localhost:8080)\n\nCongratulations! You've just built your first **beego** app.\n\n###### Please see [Documentation](http://beego.me/docs) for more.\n\n## Features\n\n* RESTful support\n* MVC architecture\n* Modularity\n* Auto API documents\n* Annotation router\n* Namespace\n* Powerful development tools\n* Full stack for Web \u0026 API\n\n## Documentation\n\n* [English](http://beego.me/docs/intro/)\n* [‰∏≠ÊñáÊñáÊ°£](http://beego.me/docs/intro/)\n* [–†—É—Å—Å–∫–∏–π](http://beego.me/docs/intro/)\n\n## Community\n\n* [http://beego.me/community](http://beego.me/community)\n* Welcome to join us in Slack: [https://beego.slack.com](https://beego.slack.com), you can get invited from [here](https://github.com/beego/beedoc/issues/232)\n\n## License\n\nbeego source code is licensed under the Apache Licence, Version 2.0\n(http://www.apache.org/licenses/LICENSE-2.0.html).\n"
  },
  {
    "repo": "fatedier/frp",
    "content": "# frp\n\n[![Build Status](https://travis-ci.org/fatedier/frp.svg?branch=master)](https://travis-ci.org/fatedier/frp)\n\n[README](README.md) | [‰∏≠ÊñáÊñáÊ°£](README_zh.md)\n\n## What is frp?\n\nfrp is a fast reverse proxy to help you expose a local server behind a NAT or firewall to the internet. As of now, it supports tcp \u0026 udp, as well as http and https protocols, where requests can be forwarded to internal services by domain name.\n\n## Table of Contents\n\n\u003c!-- vim-markdown-toc GFM --\u003e\n\n* [What can I do with frp?](#what-can-i-do-with-frp)\n* [Status](#status)\n* [Architecture](#architecture)\n* [Example Usage](#example-usage)\n    * [Access your computer in LAN by SSH](#access-your-computer-in-lan-by-ssh)\n    * [Visit your web service in LAN by custom domains](#visit-your-web-service-in-lan-by-custom-domains)\n    * [Forward DNS query request](#forward-dns-query-request)\n    * [Forward unix domain socket](#forward-unix-domain-socket)\n    * [Expose a simple http file server](#expose-a-simple-http-file-server)\n    * [Expose your service in security](#expose-your-service-in-security)\n    * [P2P Mode](#p2p-mode)\n* [Features](#features)\n    * [Configuration File](#configuration-file)\n    * [Dashboard](#dashboard)\n    * [Authentication](#authentication)\n    * [Encryption and Compression](#encryption-and-compression)\n    * [Hot-Reload frpc configuration](#hot-reload-frpc-configuration)\n    * [Get proxy status from client](#get-proxy-status-from-client)\n    * [Port White List](#port-white-list)\n    * [Port Reuse](#port-reuse)\n    * [TCP Stream Multiplexing](#tcp-stream-multiplexing)\n    * [Support KCP Protocol](#support-kcp-protocol)\n    * [Connection Pool](#connection-pool)\n    * [Load balancing](#load-balancing)\n    * [Rewriting the Host Header](#rewriting-the-host-header)\n    * [Set Headers In HTTP Request](#set-headers-in-http-request)\n    * [Get Real IP](#get-real-ip)\n    * [Password protecting your web service](#password-protecting-your-web-service)\n    * [Custom subdomain names](#custom-subdomain-names)\n    * [URL routing](#url-routing)\n    * [Connect frps by HTTP PROXY](#connect-frps-by-http-proxy)\n    * [Range ports mapping](#range-ports-mapping)\n    * [Plugin](#plugin)\n* [Development Plan](#development-plan)\n* [Contributing](#contributing)\n* [Donation](#donation)\n    * [AliPay](#alipay)\n    * [Wechat Pay](#wechat-pay)\n    * [Paypal](#paypal)\n\n\u003c!-- vim-markdown-toc --\u003e\n\n## What can I do with frp?\n\n* Expose any http and https service behind a NAT or firewall to the internet by a server with public IP address(Name-based Virtual Host Support).\n* Expose any tcp or udp service behind a NAT or firewall to the internet by a server with public IP address.\n\n## Status\n\nfrp is under development and you can try it with latest release version. Master branch for releasing stable version when dev branch for developing.\n\n**We may change any protocol and can't promise backward compatible. Please check the release log when upgrading.**\n\n## Architecture\n\n![architecture](/doc/pic/architecture.png)\n\n## Example Usage\n\nFirstly, download the latest programs from [Release](https://github.com/fatedier/frp/releases) page according to your os and arch.\n\nPut **frps** and **frps.ini** to your server with public IP.\n\nPut **frpc** and **frpc.ini** to your server in LAN.\n\n### Access your computer in LAN by SSH\n\n1. Modify frps.ini:\n\n  ```ini\n  # frps.ini\n  [common]\n  bind_port = 7000\n  ```\n\n2. Start frps:\n\n  `./frps -c ./frps.ini`\n\n3. Modify frpc.ini, `server_addr` is your frps's server IP:\n\n  ```ini\n  # frpc.ini\n  [common]\n  server_addr = x.x.x.x\n  server_port = 7000\n\n  [ssh]\n  type = tcp\n  local_ip = 127.0.0.1\n  local_port = 22\n  remote_port = 6000\n  ```\n\n4. Start frpc:\n\n  `./frpc -c ./frpc.ini`\n\n5. Connect to server in LAN by ssh assuming that username is test:\n\n  `ssh -oPort=6000 test@x.x.x.x`\n\n### Visit your web service in LAN by custom domains\n\nSometimes we want to expose a local web service behind a NAT network to others for testing with your own domain name and unfortunately we can't resolve a domain name to a local ip.\n\nHowever, we can expose a http or https service using frp.\n\n1. Modify frps.ini, configure http port 8080:\n\n  ```ini\n  # frps.ini\n  [common]\n  bind_port = 7000\n  vhost_http_port = 8080\n  ```\n\n2. Start frps:\n\n  `./frps -c ./frps.ini`\n\n3. Modify frpc.ini and set remote frps server's IP as x.x.x.x. The `local_port` is the port of your web service:\n\n  ```ini\n  # frpc.ini\n  [common]\n  server_addr = x.x.x.x\n  server_port = 7000\n\n  [web]\n  type = http\n  local_port = 80\n  custom_domains = www.yourdomain.com\n  ```\n\n4. Start frpc:\n\n  `./frpc -c ./frpc.ini`\n\n5. Resolve A record of `www.yourdomain.com` to IP `x.x.x.x` or CNAME record to your origin domain.\n\n6. Now visit your local web service using url `http://www.yourdomain.com:8080`.\n\n### Forward DNS query request\n\n1. Modify frps.ini:\n\n  ```ini\n  # frps.ini\n  [common]\n  bind_port = 7000\n  ```\n\n2. Start frps:\n\n  `./frps -c ./frps.ini`\n\n3. Modify frpc.ini, set remote frps's server IP as x.x.x.x, forward dns query request to google dns server `8.8.8.8:53`:\n\n  ```ini\n  # frpc.ini\n  [common]\n  server_addr = x.x.x.x\n  server_port = 7000\n\n  [dns]\n  type = udp\n  local_ip = 8.8.8.8\n  local_port = 53\n  remote_port = 6000\n  ```\n\n4. Start frpc:\n\n  `./frpc -c ./frpc.ini`\n\n5. Send dns query request by dig:\n\n  `dig @x.x.x.x -p 6000 www.google.com`\n\n### Forward unix domain socket\n\nUsing tcp port to connect unix domain socket like docker daemon.\n\nConfigure frps same as above.\n\n1. Start frpc with configurations:\n\n  ```ini\n  # frpc.ini\n  [common]\n  server_addr = x.x.x.x\n  server_port = 7000\n\n  [unix_domain_socket]\n  type = tcp\n  remote_port = 6000\n  plugin = unix_domain_socket\n  plugin_unix_path = /var/run/docker.sock\n  ```\n\n2. Get docker version by curl command:\n\n  `curl http://x.x.x.x:6000/version`\n\n### Expose a simple http file server\n\nA simple way to visit files in the LAN.\n\nConfigure frps same as above.\n\n1. Start frpc with configurations:\n\n  ```ini\n  # frpc.ini\n  [common]\n  server_addr = x.x.x.x\n  server_port = 7000\n\n  [test_static_file]\n  type = tcp\n  remote_port = 6000\n  plugin = static_file\n  plugin_local_path = /tmp/file\n  plugin_strip_prefix = static\n  plugin_http_user = abc\n  plugin_http_passwd = abc\n  ```\n\n2. Visit `http://x.x.x.x:6000/static/` by your browser, set correct user and password, so you can see files in `/tmp/file`.\n\n### Expose your service in security\n\nFor some services, if expose them to the public network directly will be a security risk.\n\n**stcp(secret tcp)** help you create a proxy avoiding any one can access it.\n\nConfigure frps same as above.\n\n1. Start frpc, forward ssh port and `remote_port` is useless:\n\n  ```ini\n  # frpc.ini\n  [common]\n  server_addr = x.x.x.x\n  server_port = 7000\n\n  [secret_ssh]\n  type = stcp\n  sk = abcdefg\n  local_ip = 127.0.0.1\n  local_port = 22\n  ```\n\n2. Start another frpc in which you want to connect this ssh server:\n\n  ```ini\n  # frpc.ini\n  [common]\n  server_addr = x.x.x.x\n  server_port = 7000\n\n  [secret_ssh_visitor]\n  type = stcp\n  role = visitor\n  server_name = secret_ssh\n  sk = abcdefg\n  bind_addr = 127.0.0.1\n  bind_port = 6000\n  ```\n\n3. Connect to server in LAN by ssh assuming that username is test:\n\n  `ssh -oPort=6000 test@127.0.0.1`\n\n### P2P Mode\n\n**xtcp** is designed for transmitting a large amount of data directly between two client.\n\nNow it can't penetrate all types of NAT devices. You can try **stcp** if **xtcp** doesn't work.\n\n1. Configure a udp port for xtcp:\n\n  ```ini\n  bind_udp_port = 7001\n  ```\n\n2. Start frpc, forward ssh port and `remote_port` is useless:\n\n  ```ini\n  # frpc.ini\n  [common]\n  server_addr = x.x.x.x\n  server_port = 7000\n\n  [p2p_ssh]\n  type = xtcp\n  sk = abcdefg\n  local_ip = 127.0.0.1\n  local_port = 22\n  ```\n\n3. Start another frpc in which you want to connect this ssh server:\n\n  ```ini\n  # frpc.ini\n  [common]\n  server_addr = x.x.x.x\n  server_port = 7000\n\n  [p2p_ssh_visitor]\n  type = xtcp\n  role = visitor\n  server_name = p2p_ssh\n  sk = abcdefg\n  bind_addr = 127.0.0.1\n  bind_port = 6000\n  ```\n\n4. Connect to server in LAN by ssh assuming that username is test:\n\n  `ssh -oPort=6000 test@127.0.0.1`\n\n## Features\n\n### Configuration File\n\nYou can find features which this document not metioned from full example configuration files.\n\n[frps full configuration file](./conf/frps_full.ini)\n\n[frpc full configuration file](./conf/frpc_full.ini)\n\n### Dashboard\n\nCheck frp's status and proxies's statistics information by Dashboard.\n\nConfigure a port for dashboard to enable this feature:\n\n```ini\n[common]\ndashboard_port = 7500\n# dashboard's username and password are both optionalÔºåif not set, default is admin.\ndashboard_user = admin\ndashboard_pwd = admin\n```\n\nThen visit `http://[server_addr]:7500` to see dashboard, default username and password are both `admin`.\n\n![dashboard](/doc/pic/dashboard.png)\n\n### Authentication\n\nSince v0.10.0, you only need to set `token` in frps.ini and frpc.ini.\n\nNote that time duration between server of frpc and frps mustn't exceed 15 minutes because timestamp is used for authentication.\n\nHowerver, this timeout duration can be modified by setting `authentication_timeout` in frps's configure file. It's defalut value is 900, means 15 minutes. If it is equals 0, then frps will not check authentication timeout.\n\n### Encryption and Compression\n\nDefalut value is false, you could decide if the proxy will use encryption or compression:\n\n```ini\n# frpc.ini\n[ssh]\ntype = tcp\nlocal_port = 22\nremote_port = 6000\nuse_encryption = true\nuse_compression = true\n```\n\n### Hot-Reload frpc configuration\n\nFirst you need to set admin port in frpc's configure file to let it provide HTTP API for more features.\n\n```ini\n# frpc.ini\n[common]\nadmin_addr = 127.0.0.1\nadmin_port = 7400\n```\n\nThen run command `frpc reload -c ./frpc.ini` and wait for about 10 seconds to let frpc create or update or delete proxies.\n\n**Note that parameters in [common] section won't be modified except 'start' now.**\n\n### Get proxy status from client\n\nUse `frpc status -c ./frpc.ini` to get status of all proxies. You need to set admin port in frpc's configure file.\n\n### Port White List\n\n`allow_ports` in frps.ini is used for preventing abuse of ports:\n\n```ini\n# frps.ini\n[common]\nallow_ports = 2000-3000,3001,3003,4000-50000\n```\n\n`allow_ports` consists of a specific port or a range of ports divided by `,`.\n\n### Port Reuse\n\nNow `vhost_http_port` and `vhost_https_port` in frps can use same port with `bind_port`. frps will detect connection's protocol and handle it correspondingly.\n\nWe would like to try to allow multiple proxies bind a same remote port with different protocols in the future.\n\n### TCP Stream Multiplexing\n\nfrp support tcp stream multiplexing since v0.10.0 like HTTP2 Multiplexing. All user requests to same frpc can use only one tcp connection.\n\nYou can disable this feature by modify frps.ini and frpc.ini:\n\n```ini\n# frps.ini and frpc.ini, must be same\n[common]\ntcp_mux = false\n```\n\n### Support KCP Protocol\n\nfrp support kcp protocol since v0.12.0.\n\nKCP is a fast and reliable protocol that can achieve the transmission effect of a reduction of the average latency by 30% to 40% and reduction of the maximum delay by a factor of three, at the cost of 10% to 20% more bandwidth wasted than TCP.\n\nUsing kcp in frp:\n\n1. Enable kcp protocol in frps:\n\n  ```ini\n  # frps.ini\n  [common]\n  bind_port = 7000\n  # kcp needs to bind a udp port, it can be same with 'bind_port'\n  kcp_bind_port = 7000\n  ```\n\n2. Configure the protocol used in frpc to connect frps:\n\n  ```ini\n  # frpc.ini\n  [common]\n  server_addr = x.x.x.x\n  # specify the 'kcp_bind_port' in frps\n  server_port = 7000\n  protocol = kcp\n  ```\n\n### Connection Pool\n\nBy default, frps send message to frpc for create a new connection to backward service when getting an user request.If a proxy's connection pool is enabled, there will be a specified number of connections pre-established.\n\nThis feature is fit for a large number of short connections.\n\n1. Configure the limit of pool count each proxy can use in frps.ini:\n\n  ```ini\n  # frps.ini\n  [common]\n  max_pool_count = 5\n  ```\n\n2. Enable and specify the number of connection pool:\n\n  ```ini\n  # frpc.ini\n  [common]\n  pool_count = 1\n  ```\n\n### Load balancing\n\nLoad balancing is supported by `group`.\nThis feature is available only for type `tcp` now.\n\n```ini\n# frpc.ini\n[test1]\ntype = tcp\nlocal_port = 8080\nremote_port = 80\ngroup = web\ngroup_key = 123\n\n[test2]\ntype = tcp\nlocal_port = 8081\nremote_port = 80\ngroup = web\ngroup_key = 123\n```\n\n`group_key` is used for authentication.\n\nProxies in same group will accept connections from port 80 randomly.\n\n### Rewriting the Host Header\n\nWhen forwarding to a local port, frp does not modify the tunneled HTTP requests at all, they are copied to your server byte-for-byte as they are received. Some application servers use the Host header for determining which development site to display. For this reason, frp can rewrite your requests with a modified host header. Use the `host_header_rewrite` switch to rewrite incoming HTTP requests.\n\n```ini\n# frpc.ini\n[web]\ntype = http\nlocal_port = 80\ncustom_domains = test.yourdomain.com\nhost_header_rewrite = dev.yourdomain.com\n```\n\nIf `host_header_rewrite` is specified, the host header will be rewritten to match the hostname portion of the forwarding address.\n\n### Set Headers In HTTP Request\n\nYou can set headers for proxy which type is `http`.\n\n```ini\n# frpc.ini\n[web]\ntype = http\nlocal_port = 80\ncustom_domains = test.yourdomain.com\nhost_header_rewrite = dev.yourdomain.com\nheader_X-From-Where = frp\n```\n\nNote that params which have prefix `header_` will be added to http request headers.\nIn this example, it will set header `X-From-Where: frp` to http request.\n\n### Get Real IP\n\nFeatures for http proxy only.\n\nYou can get user's real IP from http request header `X-Forwarded-For` and `X-Real-IP`.\n\n**Note that now you can only get these two headers in first request of each user connection.**\n\n### Password protecting your web service\n\nAnyone who can guess your tunnel URL can access your local web server unless you protect it with a password.\n\nThis enforces HTTP Basic Auth on all requests with the username and password you specify in frpc's configure file.\n\nIt can only be enabled when proxy type is http.\n\n```ini\n# frpc.ini\n[web]\ntype = http\nlocal_port = 80\ncustom_domains = test.yourdomain.com\nhttp_user = abc\nhttp_pwd = abc\n```\n\nVisit `http://test.yourdomain.com` and now you need to input username and password.\n\n### Custom subdomain names\n\nIt is convenient to use `subdomain` configure for http„ÄÅhttps type when many people use one frps server together.\n\n```ini\n# frps.ini\nsubdomain_host = frps.com\n```\n\nResolve `*.frps.com` to the frps server's IP.\n\n```ini\n# frpc.ini\n[web]\ntype = http\nlocal_port = 80\nsubdomain = test\n```\n\nNow you can visit your web service by host `test.frps.com`.\n\nNote that if `subdomain_host` is not empty, `custom_domains` should not be the subdomain of `subdomain_host`.\n\n### URL routing\n\nfrp support forward http requests to different backward web services by url routing.\n\n`locations` specify the prefix of URL used for routing. frps first searches for the most specific prefix location given by literal strings regardless of the listed order.\n\n```ini\n# frpc.ini\n[web01]\ntype = http\nlocal_port = 80\ncustom_domains = web.yourdomain.com\nlocations = /\n\n[web02]\ntype = http\nlocal_port = 81\ncustom_domains = web.yourdomain.com\nlocations = /news,/about\n```\nHttp requests with url prefix `/news` and `/about` will be forwarded to **web02** and others to **web01**.\n\n### Connect frps by HTTP PROXY\n\nfrpc can connect frps using HTTP PROXY if you set os environment `HTTP_PROXY` or configure `http_proxy` param in frpc.ini file.\n\nIt only works when protocol is tcp.\n\n```ini\n# frpc.ini\n[common]\nserver_addr = x.x.x.x\nserver_port = 7000\nhttp_proxy = http://user:pwd@192.168.1.128:8080\n```\n\n### Range ports mapping\n\nProxy name has prefix `range:` will support mapping range ports.\n\n```ini\n# frpc.ini\n[range:test_tcp]\ntype = tcp\nlocal_ip = 127.0.0.1\nlocal_port = 6000-6006,6007\nremote_port = 6000-6006,6007\n```\n\nfrpc will generate 8 proxies like `test_tcp_0, test_tcp_1 ... test_tcp_7`.\n\n### Plugin\n\nfrpc only forward request to local tcp or udp port by default.\n\nPlugin is used for providing rich features. There are built-in plugins such as `unix_domain_socket`, `http_proxy`, `socks5`, `static_file` and you can see [example usage](#example-usage).\n\nSpecify which plugin to use by `plugin` parameter. Configuration parameters of plugin should be started with `plugin_`. `local_ip` and `local_port` is useless for plugin.\n\nUsing plugin **http_proxy**:\n\n```ini\n# frpc.ini\n[http_proxy]\ntype = tcp\nremote_port = 6000\nplugin = http_proxy\nplugin_http_user = abc\nplugin_http_passwd = abc\n```\n\n`plugin_http_user` and `plugin_http_passwd` are configuration parameters used in `http_proxy` plugin.\n\n## Development Plan\n\n* Log http request information in frps.\n* Direct reverse proxy, like haproxy.\n* kubernetes ingress support.\n\n## Contributing\n\nInterested in getting involved? We would like to help you!\n\n* Take a look at our [issues list](https://github.com/fatedier/frp/issues) and consider sending a Pull Request to **dev branch**.\n* If you want to add a new feature, please create an issue first to describe the new feature, as well as the implementation approach. Once a proposal is accepted, create an implementation of the new features and submit it as a pull request.\n* Sorry for my poor english and improvement for this document is welcome even some typo fix.\n* If you have some wonderful ideas, send email to fatedier@gmail.com.\n\n**Note: We prefer you to give your advise in [issues](https://github.com/fatedier/frp/issues), so others with a same question can search it quickly and we don't need to answer them repeatly.**\n\n## Donation\n\nIf frp help you a lot, you can support us by:\n\nfrp QQ group: 606194980\n\n### AliPay\n\n![donation-alipay](/doc/pic/donate-alipay.png)\n\n### Wechat Pay\n\n![donation-wechatpay](/doc/pic/donate-wechatpay.png)\n\n### Paypal\n\nDonate money by [paypal](https://www.paypal.me/fatedier) to my account **fatedier@gmail.com**.\n"
  },
  {
    "repo": "drone/drone",
    "content": "Drone is a Continuous Delivery system built on container technology. Drone uses a simple YAML configuration file, a superset of docker-compose, to define and execute Pipelines inside Docker containers. \n\n\u003cbr/\u003e\n\n\u003cimg src=\"https://github.com/drone/brand/blob/master/screenshots/screenshot_build_success.png\" style=\"max-width:100px;\" /\u003e\n\nSample Pipeline Configuration:\n\n```yaml\npipeline:\n  backend:\n    image: golang\n    commands:\n      - go get\n      - go build\n      - go test\n\n  frontend:\n    image: node:6\n    commands:\n      - npm install\n      - npm test\n\n  publish:\n    image: plugins/docker\n    repo: octocat/hello-world\n    tags: [ 1, 1.1, latest ]\n    registry: index.docker.io\n\n  notify:\n    image: plugins/slack\n    channel: developers\n    username: drone\n```\n\nDocumentation and Other Links:\n\n* Setup Documentation [docs.drone.io/installation](http://docs.drone.io/installation/)\n* Usage Documentation [docs.drone.io/getting-started](http://docs.drone.io/getting-started/)\n* Plugin Index [plugins.drone.io](http://plugins.drone.io/)\n* Getting Help [docs.drone.io/getting-help](http://docs.drone.io/getting-help/)\n"
  },
  {
    "repo": "pingcap/tidb",
    "content": "![](docs/logo_with_text.png)\n\n[![Build Status](https://travis-ci.org/pingcap/tidb.svg?branch=master)](https://travis-ci.org/pingcap/tidb)\n[![Go Report Card](https://goreportcard.com/badge/github.com/pingcap/tidb)](https://goreportcard.com/report/github.com/pingcap/tidb)\n![GitHub release](https://img.shields.io/github/release/pingcap/tidb.svg)\n[![CircleCI Status](https://circleci.com/gh/pingcap/tidb.svg?style=shield)](https://circleci.com/gh/pingcap/tidb)\n[![Coverage Status](https://coveralls.io/repos/github/pingcap/tidb/badge.svg?branch=master)](https://coveralls.io/github/pingcap/tidb?branch=master)\n\n## What is TiDB?\n\nTiDB (The pronunciation is: /'ta…™diÀêbi:/ tai-D-B, etymology: titanium) is an open-source distributed scalable Hybrid Transactional and Analytical Processing (HTAP) database. It features infinite horizontal scalability, strong consistency, and high availability. TiDB is MySQL compatible and serves as a one-stop data warehouse for both OLTP (Online Transactional Processing) and OLAP (Online Analytical Processing) workloads.\n\n- __Horizontal scalability__\n\n    TiDB provides horizontal scalability simply by adding new nodes. Never worry about infrastructure capacity ever again.\n\n- __MySQL compatibility__\n\n    Easily replace MySQL with TiDB to power your applications without changing a single line of code in most cases and still benefit from the MySQL ecosystem.\n\n- __Distributed transaction__\n\n    TiDB is your source of truth, guaranteeing ACID compliance, so your data is accurate and reliable anytime, anywhere.\n\n- __Cloud Native__\n\n    TiDB is designed to work in the cloud -- public, private, or hybrid -- making deployment, provisioning, and maintenance drop-dead simple.\n\n- __Minimize ETL__\n\n    ETL (Extract, Transform and Load) is no longer necessary with TiDB's hybrid OLTP/OLAP architecture, enabling you to create new values for your users, easier and faster.\n\n- __High availability__\n\n    With TiDB, your data and applications are always on and continuously available, so your users are never disappointed.\n\nFor more details, see [How we build TiDB](https://pingcap.com/blog/2016-10-17-how-we-build-tidb/).\n\n## Adopters\n\nYou can view the list of TiDB adopters [here](https://pingcap.com/docs/adopters/).\n\n## Roadmap\n\nRead the [Roadmap](https://pingcap.com/docs/ROADMAP).\n\n## Quick start\n\nRead the [Quick Start](https://pingcap.com/docs/QUICKSTART).\n\n## Documentation\n\n+ [English](https://pingcap.com/docs)\n+ [ÁÆÄ‰Ωì‰∏≠Êñá](https://pingcap.com/docs-cn)\n\n## Architecture\n\n![architecture](./docs/architecture.png)\n\n## Contributing\nContributions are welcomed and greatly appreciated. See [CONTRIBUTING.md](CONTRIBUTING.md)\nfor details on submitting patches and the contribution workflow.\n\n## Connect with us\n\n- [**Contact PingCAP Team**](http://bit.ly/contact_us_via_github)\n- **Twitter**: [@PingCAP](https://twitter.com/PingCAP)\n- **Reddit**: https://www.reddit.com/r/TiDB/\n- **Stack Overflow**: https://stackoverflow.com/questions/tagged/tidb\n- **Mailing list**: [Google Group](https://groups.google.com/forum/#!forum/tidb-user)\n\n## License\nTiDB is under the Apache 2.0 license. See the [LICENSE](./LICENSE) file for details.\n\n## Acknowledgments\n- Thanks [cznic](https://github.com/cznic) for providing some great open source tools.\n- Thanks [GolevelDB](https://github.com/syndtr/goleveldb), [BoltDB](https://github.com/boltdb/bolt), and [RocksDB](https://github.com/facebook/rocksdb) for their powerful storage engines.\n"
  },
  {
    "repo": "influxdata/influxdb",
    "content": "# InfluxDB [![Circle CI](https://circleci.com/gh/influxdata/influxdb/tree/master.svg?style=svg)](https://circleci.com/gh/influxdata/influxdb/tree/master) [![Go Report Card](https://goreportcard.com/badge/github.com/influxdata/influxdb)](https://goreportcard.com/report/github.com/influxdata/influxdb) [![Docker pulls](https://img.shields.io/docker/pulls/library/influxdb.svg)](https://hub.docker.com/_/influxdb/)\n\n## An Open-Source Time Series Database\n\nInfluxDB is an open source **time series database** with\n**no external dependencies**. It's useful for recording metrics,\nevents, and performing analytics.\n\n## Features\n\n* Built-in [HTTP API](https://docs.influxdata.com/influxdb/latest/guides/writing_data/) so you don't have to write any server side code to get up and running.\n* Data can be tagged, allowing very flexible querying.\n* SQL-like query language.\n* Simple to install and manage, and fast to get data in and out.\n* It aims to answer queries in real-time. That means every data point is\n  indexed as it comes in and is immediately available in queries that\n  should return in \u003c 100ms.\n\n## Installation\n\nWe recommend installing InfluxDB using one of the [pre-built packages](https://influxdata.com/downloads/#influxdb). Then start InfluxDB using:\n\n* `service influxdb start` if you have installed InfluxDB using an official Debian or RPM package.\n* `systemctl start influxdb` if you have installed InfluxDB using an official Debian or RPM package, and are running a distro with `systemd`. For example, Ubuntu 15 or later.\n* `$GOPATH/bin/influxd` if you have built InfluxDB from source.\n\n## Getting Started\n\n### Create your first database\n\n```\ncurl -XPOST \"http://localhost:8086/query\" --data-urlencode \"q=CREATE DATABASE mydb\"\n```\n\n### Insert some data\n```\ncurl -XPOST \"http://localhost:8086/write?db=mydb\" \\\n-d 'cpu,host=server01,region=uswest load=42 1434055562000000000'\n\ncurl -XPOST \"http://localhost:8086/write?db=mydb\" \\\n-d 'cpu,host=server02,region=uswest load=78 1434055562000000000'\n\ncurl -XPOST \"http://localhost:8086/write?db=mydb\" \\\n-d 'cpu,host=server03,region=useast load=15.4 1434055562000000000'\n```\n\n### Query for the data\n```JSON\ncurl -G \"http://localhost:8086/query?pretty=true\" --data-urlencode \"db=mydb\" \\\n--data-urlencode \"q=SELECT * FROM cpu WHERE host='server01' AND time \u003c now() - 1d\"\n```\n\n### Analyze the data\n```JSON\ncurl -G \"http://localhost:8086/query?pretty=true\" --data-urlencode \"db=mydb\" \\\n--data-urlencode \"q=SELECT mean(load) FROM cpu WHERE region='uswest'\"\n```\n\n## Documentation\n\n* Read more about the [design goals and motivations of the project](https://docs.influxdata.com/influxdb/latest/).\n* Follow the [getting started guide](https://docs.influxdata.com/influxdb/latest/introduction/getting_started/) to learn the basics in just a few minutes.\n* Learn more about [InfluxDB's key concepts](https://docs.influxdata.com/influxdb/latest/concepts/key_concepts/).\n\n## Contributing\n\nIf you're feeling adventurous and want to contribute to InfluxDB, see our [contributing doc](https://github.com/influxdata/influxdb/blob/master/CONTRIBUTING.md) for info on how to make feature requests, build from source, and run tests.\n\n## Licensing\n\nSee [LICENSE](./LICENSE) and [DEPENDENCIES](./DEPENDENCIES).\n\n## Looking for Support?\n\nInfluxDB offers a number of services to help your project succeed. We offer Developer Support for organizations in active development, Managed Hosting to make it easy to move into production, and Enterprise Support for companies requiring the best response times, SLAs, and technical fixes. Visit our [support page](https://influxdata.com/services/) or contact [sales@influxdb.com](mailto:sales@influxdb.com) to learn how we can best help you succeed.\n"
  },
  {
    "repo": "inconshreveable/ngrok",
    "content": "[![Build\nstatus](https://travis-ci.org/inconshreveable/ngrok.svg)](https://travis-ci.org/inconshreveable/ngrok)\n\n# ngrok - Introspected tunnels to localhost ([homepage](https://ngrok.com))\n### ‚ÄùI want to expose a local server behind a NAT or firewall to the internet.‚Äù\n![](https://ngrok.com/static/img/overview.png)\n\n## What is ngrok?\nngrok is a reverse proxy that creates a secure tunnel from a public endpoint to a locally running web service.\nngrok captures and analyzes all traffic over the tunnel for later inspection and replay.\n\n## ngrok 2.x\n\nngrok 2.x is the successor to 1.x and the focus of all current development effort. Its source code is not available.\n\n**NOTE** This repository contains the code for ngrok 1.x.\n\n## Status of the ngrok 1.x project\n\nngrok 1.x is no longer developed, supported or maintained by its author, except to ensure that the project continues to compile. The contribution policy has the following guidelines:\n\n1. All issues against this repository will be closed unless they demonstrate a crash or other complete failure of ngrok's functionality.\n2. All issues against this repository are for 1.x only, any issues for 2.x will be closed.\n3. No new features will be added. Any pull requests with new features will be closed. Please fork the project instead.\n4. Pull requests fixing existing bugs or improving documentation are welcomed.\n\n#### The ngrok 1.x hosted service\n\nngrok.com ran a pay-what-you-want hosted service of 1.x from early 2013 until April 7, 2016. Afterwards, it only runs 2.x service.\n\n## Production Use\n\n**DO NOT RUN THIS VERSION OF NGROK (1.X) IN PRODUCTION**. Both the client and server are known to have serious reliability issues including memory and file descriptor leaks as well as crashes. There is also no HA story as the server is a SPOF. You are advised to run 2.0 for any production quality system. \n\n## What can I do with ngrok?\n- Expose any http service behind a NAT or firewall to the internet on a subdomain of ngrok.com\n- Expose any tcp service behind a NAT or firewall to the internet on a random port of ngrok.com\n- Inspect all http requests/responses that are transmitted over the tunnel\n- Replay any request that was transmitted over the tunnel\n\n\n## What is ngrok useful for?\n- Temporarily sharing a website that is only running on your development machine\n- Demoing an app at a hackathon without deploying\n- Developing any services which consume webhooks (HTTP callbacks) by allowing you to replay those requests\n- Debugging and understanding any web service by inspecting the HTTP traffic\n- Running networked services on machines that are firewalled off from the internet\n\n## Developing on ngrok\n[ngrok developer's guide](docs/DEVELOPMENT.md)\n"
  },
  {
    "repo": "cockroachdb/cockroach",
    "content": "![CockroachDB](docs/media/cockroach_db.png?raw=true \"CockroachDB logo\")\n=======================================================================\n\nCockroachDB is a cloud-native SQL database for building global, scalable cloud services that survive disasters.\n\n[![TeamCity CI](https://teamcity.cockroachdb.com/guestAuth/app/rest/builds/buildType:(id:Cockroach_UnitTests)/statusIcon.svg)](https://teamcity.cockroachdb.com/viewLog.html?buildTypeId=Cockroach_UnitTests\u0026buildId=lastFinished\u0026guest=1)\n[![GoDoc](https://godoc.org/github.com/cockroachdb/cockroach?status.svg)](https://godoc.org/github.com/cockroachdb/cockroach)\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/cockroachdb/cockroach?utm_source=badge\u0026utm_medium=badge\u0026utm_campaign=pr-badge)\n\n- [What is CockroachDB?](#what-is-cockroachdb)\n- [Docs](#docs)\n- [Quickstart](#quickstart)\n- [Client Drivers](#client-drivers)\n- [Deployment](#deployment)\n- [Need Help?](#need-help)\n- [Contributing](#contributing)\n- [Design](#design)\n- [Comparison with Other Databases](#comparison-with-other-databases)\n- [See Also](#see-also)\n\n## What is CockroachDB?\n\nCockroachDB is a distributed SQL database built on a transactional and\nstrongly-consistent key-value store. It **scales** horizontally;\n**survives** disk, machine, rack, and even datacenter failures with\nminimal latency disruption and no manual intervention; supports\n**strongly-consistent** ACID transactions; and provides a familiar\n**SQL** API for structuring, manipulating, and querying data.\n\nFor more details, see our [FAQ](https://cockroachlabs.com/docs/stable/frequently-asked-questions.html) or [architecture document](\nhttps://www.cockroachlabs.com/docs/stable/architecture/overview.html).\n\nHere‚Äôs a quick explainer video:\n\n\u003ca href='https://www.youtube.com/watch?v=VgXiMcbGwzQ'\u003e \u003cimg src='docs/media/explainer-video-preview.png' width='50%'\u003e \u003c/a\u003e\n\n\n## Status\n\nCockroachDB is production-ready. See our\n[Roadmap](https://github.com/cockroachdb/cockroach/wiki/Roadmap) for a list of features planned or in development.\n\n## Docs\n\nFor guidance on installation, development, deployment, and administration, see our [User Documentation](https://cockroachlabs.com/docs/stable/).\n\n## Quickstart\n\n1. [Install CockroachDB](https://www.cockroachlabs.com/docs/stable/install-cockroachdb.html).\n\n1. [Start a local cluster](https://www.cockroachlabs.com/docs/stable/start-a-local-cluster.html)\n   and talk to it via the [built-in SQL client](https://www.cockroachlabs.com/docs/stable/use-the-built-in-sql-client.html).\n\n1. [Learn more about CockroachDB SQL](https://www.cockroachlabs.com/docs/stable/learn-cockroachdb-sql.html).\n\n1. Use a PostgreSQL-compatible driver or ORM to\n   [build an app with CockroachDB](https://www.cockroachlabs.com/docs/stable/build-an-app-with-cockroachdb.html).\n\n1. [Explore core features](https://www.cockroachlabs.com/docs/stable/demo-data-replication.html),\n   such as data replication, automatic rebalancing, and fault tolerance and recovery.\n\n## Client Drivers\n\nCockroachDB supports the PostgreSQL wire protocol, so you can use any available PostgreSQL client drivers to connect from various languages.\n\n- For recommended drivers that we've tested, see [Install Client Drivers](https://www.cockroachlabs.com/docs/stable/install-client-drivers.html).\n\n- For tutorials using these drivers, as well as supported ORMs, see [Build an App with CockroachDB](https://www.cockroachlabs.com/docs/stable/build-an-app-with-cockroachdb.html).\n\n## Deployment\n\n- [Test Deployment](https://www.cockroachlabs.com/docs/stable/deploy-a-test-cluster.html) - Easiest way to test an insecure, multi-node CockroachDB cluster.\n- Production Deployments\n    - [Manual](https://www.cockroachlabs.com/docs/stable/manual-deployment.html) - Steps to deploy a CockroachDB cluster manually on multiple machines.\n    - [Cloud](https://www.cockroachlabs.com/docs/stable/cloud-deployment.html) - Guides for deploying CockroachDB on various cloud platforms.\n    - [Orchestration](https://www.cockroachlabs.com/docs/stable/orchestration.html) - Guides for running CockroachDB with popular open-source orchestration systems.\n\n## Need Help?\n\n- [Troubleshooting documentation](https://www.cockroachlabs.com/docs/stable/troubleshooting-overview.html) -\n  Learn how to troubleshoot common errors, cluster and node setup, and SQL query behavior,\n  and how to use debug and error logs.\n\n- [CockroachDB Forum](https://forum.cockroachlabs.com/) and\n  [Stack Overflow](https://stackoverflow.com/questions/tagged/cockroachdb) - Ask questions,\n  find answers, and help other users.\n\n- [Join us on Gitter](https://gitter.im/cockroachdb/cockroach) - This is the most immediate\n  way to connect with CockroachDB engineers.\n\n- For filing bugs, suggesting improvements, or requesting new features, help us out by\n  [opening an issue](https://github.com/cockroachdb/cockroach/issues/new).\n\n## Contributing\n\nWe're an open source project and welcome contributions. See our [Contributing Guide](https://www.cockroachlabs.com/docs/stable/contribute-to-cockroachdb.html) for more details.\n\nEngineering discussion takes place on our public mailing list,\n[cockroach-db@googlegroups.com](https://groups.google.com/forum/#!forum/cockroach-db).\n\n\n## Design\n\nFor an in-depth discussion of the CockroachDB architecture, see our [Architecture Guide](https://www.cockroachlabs.com/docs/stable/architecture/overview.html).\n\nFor the original design motivation, see our [design doc](https://github.com/cockroachdb/cockroach/blob/master/docs/design.md).\n\n\n## Comparison with Other Databases\n\nTo see how key features of CockroachDB stack up against other databases,\nvisit the [CockroachDB in Comparison](https://www.cockroachlabs.com/docs/stable/cockroachdb-in-comparison.html) page on our website.\n\n## See Also\n\n- [Tech Talks](https://www.cockroachlabs.com/community/tech-talks/) by CockroachDB founders and engineers\n- [The CockroachDB User documentation](https://cockroachlabs.com/docs/stable/)\n- [The CockroachDB Blog](https://www.cockroachlabs.com/blog/)\n- Key Design documents:\n  - [Serializable, Lockless, Distributed: Isolation in CockroachDB](https://www.cockroachlabs.com/blog/serializable-lockless-distributed-isolation-cockroachdb/)\n  - [Consensus, Made Thrive](https://www.cockroachlabs.com/blog/consensus-made-thrive/)\n  - [Trust, But Verify: How CockroachDB Checks Replication](https://www.cockroachlabs.com/blog/trust-but-verify-cockroachdb-checks-replication/)\n  - [Living Without Atomic Clocks](https://www.cockroachlabs.com/blog/living-without-atomic-clocks/)\n  - [The CockroachDB Architecture Document](https://github.com/cockroachdb/cockroach/blob/master/docs/design.md)\n"
  },
  {
    "repo": "hashicorp/terraform",
    "content": "Terraform\n=========\n\n- Website: https://www.terraform.io\n- [![Gitter chat](https://badges.gitter.im/hashicorp-terraform/Lobby.png)](https://gitter.im/hashicorp-terraform/Lobby)\n- Mailing list: [Google Groups](http://groups.google.com/group/terraform-tool)\n\n\u003cimg alt=\"Terraform\" src=\"https://cdn.rawgit.com/hashicorp/terraform-website/master/content/source/assets/images/logo-hashicorp.svg\" width=\"600px\"\u003e\n\nTerraform is a tool for building, changing, and versioning infrastructure safely and efficiently. Terraform can manage existing and popular service providers as well as custom in-house solutions.\n\nThe key features of Terraform are:\n\n- **Infrastructure as Code**: Infrastructure is described using a high-level configuration syntax. This allows a blueprint of your datacenter to be versioned and treated as you would any other code. Additionally, infrastructure can be shared and re-used.\n\n- **Execution Plans**: Terraform has a \"planning\" step where it generates an *execution plan*. The execution plan shows what Terraform will do when you call apply. This lets you avoid any surprises when Terraform manipulates infrastructure.\n\n- **Resource Graph**: Terraform builds a graph of all your resources, and parallelizes the creation and modification of any non-dependent resources. Because of this, Terraform builds infrastructure as efficiently as possible, and operators get insight into dependencies in their infrastructure.\n\n- **Change Automation**: Complex changesets can be applied to your infrastructure with minimal human interaction. With the previously mentioned execution plan and resource graph, you know exactly what Terraform will change and in what order, avoiding many possible human errors.\n\nFor more information, see the [introduction section](http://www.terraform.io/intro) of the Terraform website.\n\nGetting Started \u0026 Documentation\n-------------------------------\n\nIf you're new to Terraform and want to get started creating infrastructure, please checkout our [Getting Started](https://www.terraform.io/intro/getting-started/install.html) guide, available on the [Terraform website](http://www.terraform.io).\n\nAll documentation is available on the [Terraform website](http://www.terraform.io):\n\n  - [Intro](https://www.terraform.io/intro/index.html)\n  - [Docs](https://www.terraform.io/docs/index.html)\n\nDeveloping Terraform\n--------------------\n\nIf you wish to work on Terraform itself or any of its built-in providers, you'll first need [Go](http://www.golang.org) installed on your machine (version 1.11+ is *required*). Alternatively, you can use the Vagrantfile in the root of this repo to stand up a virtual machine with the appropriate dev tooling already set up for you.\n\nThis repository contains only Terraform core, which includes the command line interface and the main graph engine. Providers are implemented as plugins that each have their own repository in [the `terraform-providers` organization](https://github.com/terraform-providers) on GitHub. Instructions for developing each provider are in the associated README file. For more information, see [the provider development overview](https://www.terraform.io/docs/plugins/provider.html).\n\nFor local development of Terraform core, first make sure Go is properly installed and that a\n[GOPATH](http://golang.org/doc/code.html#GOPATH) has been set. You will also need to add `$GOPATH/bin` to your `$PATH`.\n\nNext, using [Git](https://git-scm.com/), clone this repository into `$GOPATH/src/github.com/hashicorp/terraform`.\n\nYou'll need to run `make tools` to install some required tools, then `make`.  This will compile the code and then run the tests. If this exits with exit status 0, then everything is working!\nYou only need torun `make tools` once (or when the tools change).\n\n```sh\n$ cd \"$GOPATH/src/github.com/hashicorp/terraform\"\n$ make tools\n$ make\n```\n\nTo compile a development version of Terraform and the built-in plugins, run `make dev`. This will build everything using [gox](https://github.com/mitchellh/gox) and put Terraform binaries in the `bin` and `$GOPATH/bin` folders:\n\n```sh\n$ make dev\n...\n$ bin/terraform\n...\n```\n\nIf you're developing a specific package, you can run tests for just that package by specifying the `TEST` variable. For example below, only`terraform` package tests will be run.\n\n```sh\n$ make test TEST=./terraform\n...\n```\n\nIf you're working on a specific provider which has not been separated into an individual repository and only wish to rebuild that provider, you can use the `plugin-dev` target. For example, to build only the Test provider:\n\n```sh\n$ make plugin-dev PLUGIN=provider-test\n```\n\n### Dependencies\n\nTerraform uses Go Modules for dependency management, but for the moment is\ncontinuing to use Go 1.6-style vendoring for compatibility with tools that\nhave not yet been updated for full Go Modules support.\n\nIf you're developing Terraform, there are a few tasks you might need to perform.\n\n#### Adding a dependency\n\nIf you're adding a dependency, you'll need to vendor it in the same Pull Request as the code that depends on it. You should do this in a separate commit from your code, as makes PR review easier and Git history simpler to read in the future.\n\nTo add a dependency:\n\nAssuming your work is on a branch called `my-feature-branch`, the steps look like this:\n\n1. Add an `import` statement to a suitable package in the Terraform code.\n\n2. Run `go mod vendor` to download the latest version of the module containing\n   the imported package into the `vendor/` directory, and update the `go.mod`\n   and `go.sum` files.\n\n3. Review the changes in git and commit them.\n\n#### Updating a dependency\n\nTo update a dependency:\n\n1. Run `go get -u module-path@version-number`, such as `go get -u github.com/hashicorp/hcl@2.0.0`\n\n2. Run `go mod vendor` to update the vendored copy in the `vendor/` directory.\n\n3. Review the changes in git and commit them.\n\n### Acceptance Tests\n\nTerraform has a comprehensive [acceptance\ntest](http://en.wikipedia.org/wiki/Acceptance_testing) suite covering the\nbuilt-in providers. Our [Contributing Guide](https://github.com/hashicorp/terraform/blob/master/.github/CONTRIBUTING.md) includes details about how and when to write and run acceptance tests in order to help contributions get accepted quickly.\n\n\n### Cross Compilation and Building for Distribution\n\nIf you wish to cross-compile Terraform for another architecture, you can set the `XC_OS` and `XC_ARCH` environment variables to values representing the target operating system and architecture before calling `make`. The output is placed in the `pkg` subdirectory tree both expanded in a directory representing the OS/architecture combination and as a ZIP archive.\n\nFor example, to compile 64-bit Linux binaries on Mac OS X, you can run:\n\n```sh\n$ XC_OS=linux XC_ARCH=amd64 make bin\n...\n$ file pkg/linux_amd64/terraform\nterraform: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, not stripped\n```\n\n`XC_OS` and `XC_ARCH` can be space separated lists representing different combinations of operating system and architecture. For example, to compile for both Linux and Mac OS X, targeting both 32- and 64-bit architectures, you can run:\n\n```sh\n$ XC_OS=\"linux darwin\" XC_ARCH=\"386 amd64\" make bin\n...\n$ tree ./pkg/ -P \"terraform|*.zip\"\n./pkg/\n‚îú‚îÄ‚îÄ darwin_386\n‚îÇ¬†¬† ‚îî‚îÄ‚îÄ terraform\n‚îú‚îÄ‚îÄ darwin_386.zip\n‚îú‚îÄ‚îÄ darwin_amd64\n‚îÇ¬†¬† ‚îî‚îÄ‚îÄ terraform\n‚îú‚îÄ‚îÄ darwin_amd64.zip\n‚îú‚îÄ‚îÄ linux_386\n‚îÇ¬†¬† ‚îî‚îÄ‚îÄ terraform\n‚îú‚îÄ‚îÄ linux_386.zip\n‚îú‚îÄ‚îÄ linux_amd64\n‚îÇ¬†¬† ‚îî‚îÄ‚îÄ terraform\n‚îî‚îÄ‚îÄ linux_amd64.zip\n\n4 directories, 8 files\n```\n\n_Note: Cross-compilation uses [gox](https://github.com/mitchellh/gox), which requires toolchains to be built with versions of Go prior to 1.5. In order to successfully cross-compile with older versions of Go, you will need to run `gox -build-toolchain` before running the commands detailed above._\n\n#### Docker\n\nWhen using docker you don't need to have any of the Go development tools installed and you can clone terraform to any location on disk (doesn't have to be in your $GOPATH).  This is useful for users who want to build `master` or a specific branch for testing without setting up a proper Go environment.\n\nFor example, run the following command to build terraform in a linux-based container for macOS.\n\n```sh\ndocker run --rm -v $(pwd):/go/src/github.com/hashicorp/terraform -w /go/src/github.com/hashicorp/terraform -e XC_OS=darwin -e XC_ARCH=amd64 golang:latest bash -c \"apt-get update \u0026\u0026 apt-get install -y zip \u0026\u0026 make bin\"\n```\n\n\n## License\n[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fhashicorp%2Fterraform.svg?type=large)](https://app.fossa.io/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fhashicorp%2Fterraform?ref=badge_large)\n"
  },
  {
    "repo": "hashicorp/consul",
    "content": "# Consul [![Build Status](https://travis-ci.org/hashicorp/consul.svg?branch=master)](https://travis-ci.org/hashicorp/consul) [![Join the chat at https://gitter.im/hashicorp-consul/Lobby](https://badges.gitter.im/hashicorp-consul/Lobby.svg)](https://gitter.im/hashicorp-consul/Lobby?utm_source=badge\u0026utm_medium=badge\u0026utm_campaign=pr-badge\u0026utm_content=badge)\n\n* Website: https://www.consul.io\n* Chat: [Gitter](https://gitter.im/hashicorp-consul/Lobby)\n* Mailing list: [Google Groups](https://groups.google.com/group/consul-tool/)\n\nConsul is a tool for service discovery and configuration. Consul is\ndistributed, highly available, and extremely scalable.\n\nConsul provides several key features:\n\n* **Service Discovery** - Consul makes it simple for services to register\n  themselves and to discover other services via a DNS or HTTP interface.\n  External services such as SaaS providers can be registered as well.\n\n* **Health Checking** - Health Checking enables Consul to quickly alert\n  operators about any issues in a cluster. The integration with service\n  discovery prevents routing traffic to unhealthy hosts and enables service\n  level circuit breakers.\n\n* **Key/Value Storage** - A flexible key/value store enables storing\n  dynamic configuration, feature flagging, coordination, leader election and\n  more. The simple HTTP API makes it easy to use anywhere.\n\n* **Multi-Datacenter** - Consul is built to be datacenter aware, and can\n  support any number of regions without complex configuration.\n\n* **Service Segmentation** - Consul Connect enables secure service-to-service \ncommunication with automatic TLS encryption and identity-based authorization.\n\nConsul runs on Linux, Mac OS X, FreeBSD, Solaris, and Windows. A commercial\nversion called [Consul Enterprise](https://www.hashicorp.com/products/consul)\nis also available.\n\n**Please note**: We take Consul's security and our users' trust very seriously. If you \nbelieve you have found a security issue in Consul, please [responsibly disclose](https://www.hashicorp.com/security#vulnerability-reporting) by \ncontacting us at security@hashicorp.com.\n\n## Quick Start\n\nAn extensive quick start is viewable on the Consul website:\n\nhttps://www.consul.io/intro/getting-started/install.html\n\n## Documentation\n\nFull, comprehensive documentation is viewable on the Consul website:\n\nhttps://www.consul.io/docs\n\n## Contributing\n\nThank you for your interest in contributing! Please refer to [CONTRIBUTING.md](https://github.com/hashicorp/consul/blob/master/.github/CONTRIBUTING.md) for guidance."
  },
  {
    "repo": "github/hub",
    "content": "git + hub = github\n==================\n\nhub is a command line tool that wraps `git` in order to extend it with extra\nfeatures and commands that make working with GitHub easier.\n\n``` sh\n$ hub clone rtomayko/tilt\n\n# expands to:\n$ git clone git://github.com/rtomayko/tilt.git\n```\n\nhub is best aliased as `git`, so you can type `$ git \u003ccommand\u003e` in the shell and\nget all the usual `hub` features. See \"Aliasing\" below.\n\nSee [Usage documentation](https://hub.github.com/hub.1.html) for the list of all\ncommands and their arguments.\n\nInstallation\n------------\n\nDependencies:\n\n* **git 1.7.3** or newer\n\n#### Homebrew\n\n`hub` can be installed through [Homebrew](https://docs.brew.sh/Installation) on macOS:\n\n``` sh\n$ brew install hub\n$ hub version\ngit version 1.7.6\nhub version 2.2.3\n```\n\n#### Windows\n\n`hub` can be installed through [Scoop](http://scoop.sh/) on Windows:\n\n``` sh\n\u003e scoop install hub\n```\n\n#### Fedora Linux\n\nOn Fedora you can install `hub` through DNF:\n\n``` sh\n$ sudo dnf install hub\n$ hub version\ngit version 2.9.3\nhub version 2.2.9\n```\n\n#### Arch Linux\n\nOn Arch Linux you can install `hub` from official repository:\n\n```sh\n$ sudo pacman -S hub\n```\n\n#### Standalone\n\n`hub` can be easily installed as an executable. Download the latest\n[compiled binaries](https://github.com/github/hub/releases) and put it anywhere\nin your executable path.\n\n#### Source\n\nWith your [GOPATH](https://github.com/golang/go/wiki/GOPATH) already set up:\n\n```sh\nmkdir -p \"$GOPATH\"/src/github.com/github\ngit clone \\\n  --config transfer.fsckobjects=false \\\n  --config receive.fsckobjects=false \\\n  --config fetch.fsckobjects=false \\\n  https://github.com/github/hub.git \"$GOPATH\"/src/github.com/github/hub\ncd \"$GOPATH\"/src/github.com/github/hub\nmake install prefix=/usr/local\n```\n\nPrerequisites for compilation are:\n\n* `make`\n* [Go 1.8+](http://golang.org/doc/install)\n* Ruby 1.9+ with Bundler - for generating man pages\n\nAliasing\n--------\n\nUsing hub feels best when it's aliased as `git`. This is not dangerous; your\n_normal git commands will all work_. hub merely adds some sugar.\n\n`hub alias` displays instructions for the current shell. With the `-s` flag, it\noutputs a script suitable for `eval`.\n\nYou should place this command in your `.bash_profile` or other startup script:\n\n``` sh\neval \"$(hub alias -s)\"\n```\n\n#### PowerShell\n\nIf you're using PowerShell, you can set an alias for `hub` by placing the\nfollowing in your PowerShell profile (usually\n`~/Documents/WindowsPowerShell/Microsoft.PowerShell_profile.ps1`):\n\n``` sh\nSet-Alias git hub\n```\n\nA simple way to do this is to run the following from the PowerShell prompt:\n\n``` sh\nAdd-Content $PROFILE \"`nSet-Alias git hub\"\n```\n\nNote: You'll need to restart your PowerShell console in order for the changes to be picked up.\n\nIf your PowerShell profile doesn't exist, you can create it by running the following:\n\n``` sh\nNew-Item -Type file -Force $PROFILE\n```\n\n### Shell tab-completion\n\nhub repository contains tab-completion scripts for bash, zsh and fish.\nThese scripts complement existing completion scripts that ship with git.\n\n[Installation instructions](etc)\n\n* [hub bash completion](https://github.com/github/hub/blob/master/etc/hub.bash_completion.sh)\n* [hub zsh completion](https://github.com/github/hub/blob/master/etc/hub.zsh_completion)\n* [hub fish completion](https://github.com/github/hub/blob/master/etc/hub.fish_completion)\n\nMeta\n----\n\n* Home: \u003chttps://github.com/github/hub\u003e\n* Bugs: \u003chttps://github.com/github/hub/issues\u003e\n* Authors: \u003chttps://github.com/github/hub/contributors\u003e\n"
  },
  {
    "repo": "nsqio/nsq",
    "content": "\u003cp align=\"center\"\u003e\n\u003cimg align=\"left\" width=\"175\" src=\"http://nsq.io/static/img/nsq_blue.png\"\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eSource\u003c/strong\u003e: https://github.com/nsqio/nsq\n\u003cli\u003e\u003cstrong\u003eIssues\u003c/strong\u003e: https://github.com/nsqio/nsq/issues\n\u003cli\u003e\u003cstrong\u003eMailing List\u003c/strong\u003e: \u003ca href=\"https://groups.google.com/d/forum/nsq-users\"\u003ensq-users@googlegroups.com\u003c/a\u003e\n\u003cli\u003e\u003cstrong\u003eIRC\u003c/strong\u003e: #nsq on freenode\n\u003cli\u003e\u003cstrong\u003eDocs\u003c/strong\u003e: http://nsq.io\n\u003cli\u003e\u003cstrong\u003eTwitter\u003c/strong\u003e: \u003ca href=\"https://twitter.com/nsqio\"\u003e@nsqio\u003c/a\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\n[![Build Status](https://secure.travis-ci.org/nsqio/nsq.svg?branch=master)](http://travis-ci.org/nsqio/nsq) [![GitHub release](https://img.shields.io/github/release/nsqio/nsq.svg)](https://github.com/nsqio/nsq/releases/latest) [![Coverage Status](https://coveralls.io/repos/github/nsqio/nsq/badge.svg?branch=master)](https://coveralls.io/github/nsqio/nsq?branch=master)\n\n**NSQ** is a realtime distributed messaging platform designed to operate at scale, handling\nbillions of messages per day.\n\nIt promotes *distributed* and *decentralized* topologies without single points of failure,\nenabling fault tolerance and high availability coupled with a reliable message delivery\nguarantee.  See [features \u0026 guarantees][features_guarantees].\n\nOperationally, **NSQ** is easy to configure and deploy (all parameters are specified on the command\nline and compiled binaries have no runtime dependencies). For maximum flexibility, it is agnostic to\ndata format (messages can be JSON, MsgPack, Protocol Buffers, or anything else). Official Go and\nPython libraries are available out of the box (as well as many other [client\nlibraries][client_libraries]) and, if you're interested in building your own, there's a [protocol\nspec][protocol].\n\nWe publish [binary releases][installing] for linux, darwin, freebsd and windows as well as an official [Docker image][docker_deployment].\n\nNOTE: master is our *development* branch and may not be stable at all times.\n\n## In Production\n\n\u003ca href=\"http://bitly.com\"\u003e\u003cimg src=\"http://nsq.io/static/img/bitly_logo.png\" width=\"84\" align=\"middle\"/\u003e\u003c/a\u003e\u0026nbsp;\u0026nbsp;\n\u003ca href=\"https://www.life360.com/\"\u003e\u003cimg src=\"http://nsq.io/static/img/life360_logo.png\" width=\"100\" align=\"middle\"/\u003e\u003c/a\u003e\u0026nbsp;\u0026nbsp;\n\u003ca href=\"https://www.hailoapp.com/\"\u003e\u003cimg src=\"http://nsq.io/static/img/hailo_logo.png\" width=\"62\" align=\"middle\"/\u003e\u003c/a\u003e\u0026nbsp;\u0026nbsp;\n\u003ca href=\"http://www.simplereach.com/\"\u003e\u003cimg src=\"http://nsq.io/static/img/simplereach_logo.png\" width=\"136\" align=\"middle\"/\u003e\u003c/a\u003e\u0026nbsp;\u0026nbsp;\n\u003ca href=\"https://moz.com/\"\u003e\u003cimg src=\"http://nsq.io/static/img/moz_logo.png\" width=\"108\" align=\"middle\"/\u003e\u003c/a\u003e\u0026nbsp;\u0026nbsp;\n\u003ca href=\"https://path.com/\"\u003e\u003cimg src=\"http://nsq.io/static/img/path_logo.png\" width=\"84\" align=\"middle\"/\u003e\u003c/a\u003e\u003cbr/\u003e\n\n\u003ca href=\"https://segment.com/\"\u003e\u003cimg src=\"http://nsq.io/static/img/segment_logo.png\" width=\"70\" align=\"middle\"/\u003e\u003c/a\u003e\u0026nbsp;\u0026nbsp;\n\u003ca href=\"http://eventful.com/events\"\u003e\u003cimg src=\"http://nsq.io/static/img/eventful_logo.png\" width=\"95\" align=\"middle\"/\u003e\u003c/a\u003e\u0026nbsp;\u0026nbsp;\n\u003ca href=\"http://www.energyhub.com\"\u003e\u003cimg src=\"http://nsq.io/static/img/energyhub_logo.png\" width=\"99\" align=\"middle\"/\u003e\u003c/a\u003e\u0026nbsp;\u0026nbsp;\n\u003ca href=\"https://project-fifo.net\"\u003e\u003cimg src=\"http://nsq.io/static/img/project_fifo.png\" width=\"97\" align=\"middle\"/\u003e\u003c/a\u003e\u0026nbsp;\u0026nbsp;\n\u003ca href=\"http://trendrr.com\"\u003e\u003cimg src=\"http://nsq.io/static/img/trendrr_logo.png\" width=\"97\" align=\"middle\"/\u003e\u003c/a\u003e\u0026nbsp;\u0026nbsp;\n\u003ca href=\"https://reonomy.com/\"\u003e\u003cimg src=\"http://nsq.io/static/img/reonomy_logo.png\" width=\"100\" align=\"middle\"/\u003e\u003c/a\u003e\u003cbr/\u003e\n\n\u003ca href=\"http://hw-ops.com\"\u003e\u003cimg src=\"http://nsq.io/static/img/heavy_water.png\" width=\"50\" align=\"middle\"/\u003e\u003c/a\u003e\u0026nbsp;\u0026nbsp;\n\u003ca href=\"http://www.getlytics.com/\"\u003e\u003cimg src=\"http://nsq.io/static/img/lytics.png\" width=\"100\" align=\"middle\"/\u003e\u003c/a\u003e\u0026nbsp;\u0026nbsp;\n\u003ca href=\"http://mediaforge.com\"\u003e\u003cimg src=\"http://nsq.io/static/img/rakuten.png\" width=\"100\" align=\"middle\"/\u003e\u003c/a\u003e\u0026nbsp;\u0026nbsp;\n\u003ca href=\"http://socialradar.com\"\u003e\u003cimg src=\"http://nsq.io/static/img/socialradar_logo.png\" width=\"100\" align=\"middle\"/\u003e\u003c/a\u003e\u0026nbsp;\u0026nbsp;\n\u003ca href=\"http://wistia.com\"\u003e\u003cimg src=\"http://nsq.io/static/img/wistia_logo.png\" width=\"140\" align=\"middle\"/\u003e\u003c/a\u003e\u0026nbsp;\u0026nbsp;\n\u003ca href=\"https://stripe.com/\"\u003e\u003cimg src=\"http://nsq.io/static/img/stripe_logo.png\" width=\"96\" align=\"middle\"/\u003e\u003c/a\u003e\u003cbr/\u003e\n\n\u003ca href=\"https://www.soundest.com/\"\u003e\u003cimg src=\"http://nsq.io/static/img/soundest_logo.png\" width=\"96\" align=\"middle\"/\u003e\u003c/a\u003e\u0026nbsp;\u0026nbsp;\n\u003ca href=\"https://www.docker.com/\"\u003e\u003cimg src=\"http://nsq.io/static/img/docker_logo.png\" width=\"100\" align=\"middle\"/\u003e\u003c/a\u003e\u0026nbsp;\u0026nbsp;\n\u003ca href=\"http://www.getweave.com/\"\u003e\u003cimg src=\"http://nsq.io/static/img/weave_logo.png\" width=\"94\" align=\"middle\"/\u003e\u003c/a\u003e\u0026nbsp;\u0026nbsp;\n\u003ca href=\"http://www.shipwire.com\"\u003e\u003cimg src=\"http://nsq.io/static/img/shipwire_logo.png\" width=\"97\" align=\"middle\"/\u003e\u003c/a\u003e\u0026nbsp;\u0026nbsp;\n\u003ca href=\"http://digg.com\"\u003e\u003cimg src=\"http://nsq.io/static/img/digg_logo.png\" width=\"97\" align=\"middle\"/\u003e\u003c/a\u003e\u0026nbsp;\u0026nbsp;\n\u003ca href=\"http://www.scalabull.com/\"\u003e\u003cimg src=\"http://nsq.io/static/img/scalabull_logo.png\" width=\"97\" align=\"middle\"/\u003e\u003c/a\u003e\u003cbr/\u003e\n\n\u003ca href=\"http://www.augury.com/\"\u003e\u003cimg src=\"http://nsq.io/static/img/augury_logo.png\" width=\"97\" align=\"middle\"/\u003e\u003c/a\u003e\u0026nbsp;\u0026nbsp;\n\u003ca href=\"http://www.buzzfeed.com/\"\u003e\u003cimg src=\"http://nsq.io/static/img/buzzfeed_logo.png\" width=\"97\" align=\"middle\"/\u003e\u003c/a\u003e\u0026nbsp;\u0026nbsp;\n\u003ca href=\"http://eztable.com\"\u003e\u003cimg src=\"http://nsq.io/static/img/eztable_logo.png\" width=\"97\" align=\"middle\"/\u003e\u003c/a\u003e\u0026nbsp;\u0026nbsp;\n\u003ca href=\"http://www.dotabuff.com/\"\u003e\u003cimg src=\"http://nsq.io/static/img/dotabuff_logo.png\" width=\"97\" align=\"middle\"/\u003e\u003c/a\u003e\u0026nbsp;\u0026nbsp;\n\u003ca href=\"https://www.fastly.com/\"\u003e\u003cimg src=\"http://nsq.io/static/img/fastly_logo.png\" width=\"97\" align=\"middle\"/\u003e\u003c/a\u003e\u0026nbsp;\u0026nbsp;\n\u003ca href=\"https://talky.io\"\u003e\u003cimg src=\"http://nsq.io/static/img/talky_logo.png\" width=\"97\" align=\"middle\"/\u003e\u003c/a\u003e\u003cbr/\u003e\n\n\u003ca href=\"https://groupme.com\"\u003e\u003cimg src=\"http://nsq.io/static/img/groupme_logo.png\" width=\"97\" align=\"middle\"/\u003e\u003c/a\u003e\u0026nbsp;\u0026nbsp;\n\u003ca href=\"https://deis.com\"\u003e\u003cimg src=\"http://nsq.io/static/img/deis_logo.svg\" width=\"75\" align=\"middle\"/\u003e\u003c/a\u003e\u0026nbsp;\u0026nbsp;\n\u003ca href=\"https://wiredcraft.com\"\u003e\u003cimg src=\"http://nsq.io/static/img/wiredcraft_logo.jpg\" width=\"97\" align=\"middle\"/\u003e\u003c/a\u003e\u0026nbsp;\u0026nbsp;\n\u003ca href=\"https://sproutsocial.com\"\u003e\u003cimg src=\"http://nsq.io/static/img/sproutsocial_logo.png\" width=\"90\" align=\"middle\"/\u003e\u003c/a\u003e\u0026nbsp;\u0026nbsp;\n\u003ca href=\"http://fandom.wikia.com\"\u003e\u003cimg src=\"http://nsq.io/static/img/fandom_logo.svg\" width=\"100\" align=\"middle\"/\u003e\u003c/a\u003e\u0026nbsp;\u0026nbsp;\n\u003ca href=\"https://gitee.com\"\u003e\u003cimg src=\"http://nsq.io/static/img/gitee_logo.svg\" width=\"140\" align=\"middle\"/\u003e\u003c/a\u003e\u003cbr/\u003e\n\u003ca href=\"https://bytedance.com\"\u003e\u003cimg src=\"https://bytedance.com/static/images/logo@2x.png\" width=\"140\" align=\"middle\"/\u003e\u003c/a\u003e\u0026nbsp;\u0026nbsp;\n\n## Code of Conduct\n\nHelp us keep NSQ open and inclusive. Please read and follow our [Code of Conduct](CODE_OF_CONDUCT.md).\n\n## Authors\n\nNSQ was designed and developed by Matt Reiferson ([@imsnakes][snakes_twitter]) and Jehiah Czebotar\n([@jehiah][jehiah_twitter]) but wouldn't have been possible without the support of\n[bitly][bitly] and all our [contributors][contributors].\n\nLogo created by Wolasi Konu ([@kisalow][wolasi_twitter]).\n\n[protocol]: http://nsq.io/clients/tcp_protocol_spec.html\n[installing]: http://nsq.io/deployment/installing.html\n[docker_deployment]: http://nsq.io/deployment/docker.html\n[snakes_twitter]: https://twitter.com/imsnakes\n[jehiah_twitter]: https://twitter.com/jehiah\n[bitly]: https://bitly.com\n[features_guarantees]: http://nsq.io/overview/features_and_guarantees.html\n[contributors]: https://github.com/nsqio/nsq/graphs/contributors\n[client_libraries]: http://nsq.io/clients/client_libraries.html\n[wolasi_twitter]: https://twitter.com/kisalow\n"
  },
  {
    "repo": "minio/minio",
    "content": "# Minio Quickstart Guide\n[![Slack](https://slack.minio.io/slack?type=svg)](https://slack.minio.io) [![Go Report Card](https://goreportcard.com/badge/minio/minio)](https://goreportcard.com/report/minio/minio) [![Docker Pulls](https://img.shields.io/docker/pulls/minio/minio.svg?maxAge=604800)](https://hub.docker.com/r/minio/minio/) [![codecov](https://codecov.io/gh/minio/minio/branch/master/graph/badge.svg)](https://codecov.io/gh/minio/minio)\n\nMinio is an object storage server released under Apache License v2.0. It is compatible with Amazon S3 cloud storage service. It is best suited for storing unstructured data such as photos, videos, log files, backups and container / VM images. Size of an object can range from a few KBs to a maximum of 5TB.\n\nMinio server is light enough to be bundled with the application stack, similar to NodeJS, Redis and MySQL.\n\n## Docker Container\n### Stable\n```\ndocker pull minio/minio\ndocker run -p 9000:9000 minio/minio server /data\n```\n\n### Edge\n```\ndocker pull minio/minio:edge\ndocker run -p 9000:9000 minio/minio:edge server /data\n```\nNote: Docker will not display the autogenerated keys unless you start the container with the `-it`(interactive TTY) argument. Generally, it is not recommended to use autogenerated keys with containers. Please visit Minio Docker quickstart guide for more information [here](https://docs.minio.io/docs/minio-docker-quickstart-guide)\n\n## macOS\n### Homebrew\nInstall minio packages using [Homebrew](http://brew.sh/)\n```sh\nbrew install minio/stable/minio\nminio server /data\n```\n\n\u003e NOTE: If you previously installed minio using `brew install minio` then it is recommended that you reinstall minio from `minio/stable/minio` official repo instead.\n```sh\nbrew uninstall minio\nbrew install minio/stable/minio\n```\n\n### Binary Download\n| Platform| Architecture | URL|\n| ----------| -------- | ------|\n|Apple macOS|64-bit Intel|https://dl.minio.io/server/minio/release/darwin-amd64/minio |\n```sh\nchmod 755 minio\n./minio server /data\n```\n\n## GNU/Linux\n### Binary Download\n| Platform| Architecture | URL|\n| ----------| -------- | ------|\n|GNU/Linux|64-bit Intel|https://dl.minio.io/server/minio/release/linux-amd64/minio |\n```sh\nwget https://dl.minio.io/server/minio/release/linux-amd64/minio\nchmod +x minio\n./minio server /data\n```\n\n## Microsoft Windows\n### Binary Download\n| Platform| Architecture | URL|\n| ----------| -------- | ------|\n|Microsoft Windows|64-bit|https://dl.minio.io/server/minio/release/windows-amd64/minio.exe |\n```sh\nminio.exe server D:\\Photos\n```\n\n## FreeBSD\n### Port\nInstall minio packages using [pkg](https://github.com/freebsd/pkg)\n\n```sh\npkg install minio\nsysrc minio_enable=yes\nsysrc minio_disks=/home/user/Photos\nservice minio start\n```\n\n## Install from Source\nSource installation is only intended for developers and advanced users. If you do not have a working Golang environment, please follow [How to install Golang](https://docs.minio.io/docs/how-to-install-golang).\n\n```sh\ngo get -u github.com/minio/minio\n```\n\n## Allow port access for Firewalls\n\nBy default Minio uses the port 9000 to listen for incoming connections. If your platform blocks the port by default, you may need to enable access to the port.\n\n### iptables\n\nFor hosts with iptables enabled (RHEL, CentOS, etc), you can use `iptables` command to enable all traffic coming to specific ports. Use below command to allow\naccess to port 9000\n\n```sh\niptables -A INPUT -p tcp --dport 9000 -j ACCEPT\nservice iptables restart\n```\n\nBelow command enables all incoming traffic to ports ranging from 9000 to 9010.\n\n```sh\niptables -A INPUT -p tcp --dport 9000:9010 -j ACCEPT\nservice iptables restart\n```\n\n### ufw\n\nFor hosts with ufw enabled (Debian based distros), you can use `ufw` command to allow traffic to specific ports. Use below command to allow access to port 9000\n\n```sh\nufw allow 9000\n```\n\nBelow command enables all incoming traffic to ports ranging from 9000 to 9010.\n\n```sh\nufw allow 9000:9010/tcp\n```\n\n### firewall-cmd\n\nFor hosts with firewall-cmd enabled (CentOS), you can use `firewall-cmd` command to allow traffic to specific ports. Use below commands to allow access to port 9000\n\n```sh\nfirewall-cmd --get-active-zones\n```\n\nThis command gets the active zone(s). Now, apply port rules to the relevant zones returned above. For example if the zone is `public`, use\n\n```sh\nfirewall-cmd --zone=public --add-port=9000/tcp --permanent\n```\n\nNote that `permanent` makes sure the rules are persistent across firewall start, restart or reload. Finally reload the firewall for changes to take effect.\n\n```sh\nfirewall-cmd --reload\n```\n\n## Test using Minio Browser\nMinio Server comes with an embedded web based object browser. Point your web browser to http://127.0.0.1:9000 ensure your server has started successfully.\n\n![Screenshot](https://github.com/minio/minio/blob/master/docs/screenshots/minio-browser.png?raw=true)\n\n## Test using Minio Client `mc`\n`mc` provides a modern alternative to UNIX commands like ls, cat, cp, mirror, diff etc. It supports filesystems and Amazon S3 compatible cloud storage services. Follow the Minio Client [Quickstart Guide](https://docs.minio.io/docs/minio-client-quickstart-guide) for further instructions.\n\n## Pre-existing data\nWhen deployed on a single drive, Minio server lets clients access any pre-existing data in the data directory. For example, if Minio is started with the command  `minio server /mnt/data`, any pre-existing data in the `/mnt/data` directory would be accessible to the clients.\n\nThe above statement is also valid for all gateway backends.\n\n## Explore Further\n- [Minio Erasure Code QuickStart Guide](https://docs.minio.io/docs/minio-erasure-code-quickstart-guide)\n- [Use `mc` with Minio Server](https://docs.minio.io/docs/minio-client-quickstart-guide)\n- [Use `aws-cli` with Minio Server](https://docs.minio.io/docs/aws-cli-with-minio)\n- [Use `s3cmd` with Minio Server](https://docs.minio.io/docs/s3cmd-with-minio)\n- [Use `minio-go` SDK with Minio Server](https://docs.minio.io/docs/golang-client-quickstart-guide)\n- [The Minio documentation website](https://docs.minio.io)\n\n## Contribute to Minio Project\nPlease follow Minio [Contributor's Guide](https://github.com/minio/minio/blob/master/CONTRIBUTING.md)\n\n\n## License\n[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Fminio%2Fminio.svg?type=large)](https://app.fossa.io/projects/git%2Bgithub.com%2Fminio%2Fminio?ref=badge_large)\n"
  },
  {
    "repo": "istio/istio",
    "content": "# Istio\n\n[![CircleCI](https://circleci.com/gh/istio/istio.svg?style=shield)](https://circleci.com/gh/istio/istio)\n[![Go Report Card](https://goreportcard.com/badge/github.com/istio/istio)](https://goreportcard.com/report/github.com/istio/istio)\n[![GoDoc](https://godoc.org/istio.io/istio?status.svg)](https://godoc.org/istio.io/istio)\n[![codecov.io](https://codecov.io/github/istio/istio/coverage.svg?branch=master)](https://codecov.io/github/istio/istio?branch=master)\n\nAn open platform to connect, manage, and secure microservices.\n\n- [Introduction](#introduction)\n- [Repositories](#repositories)\n- [Issue management](#issue-management)\n\nIn addition, here are some other documents you may wish to read:\n\n- [Istio Community](https://github.com/istio/community) - describes how to get involved and contribute to the Istio project\n- [Istio Developer's Guide](https://github.com/istio/istio/wiki/Dev-Guide) - explains how to set up and use an Istio development environment\n- [Project Conventions](https://github.com/istio/istio/wiki/Dev-Conventions) - describes the conventions we use within the code base\n- [Creating Fast and Lean Code](https://github.com/istio/istio/wiki/Dev-Writing-Fast-and-Lean-Code) - performance-oriented advice and guidelines for the code base\n\nYou'll find many other useful documents on our [Wiki](https://github.com/istio/istio/wiki).\n\n## Introduction\n\nIstio is an open platform for providing a uniform way to integrate\nmicroservices, manage traffic flow across microservices, enforce policies\nand aggregate telemetry data. Istio's control plane provides an abstraction\nlayer over the underlying cluster management platform, such as Kubernetes,\nMesos, etc.\n\nVisit [istio.io](https://istio.io) for in-depth information about using Istio.\n\nIstio is composed of these components:\n\n- **Envoy** - Sidecar proxies per microservice to handle ingress/egress traffic\n   between services in the cluster and from a service to external\n   services. The proxies form a _secure microservice mesh_ providing a rich\n   set of functions like discovery, rich layer-7 routing, circuit breakers,\n   policy enforcement and telemetry recording/reporting\n   functions.\n\n  \u003e Note: The service mesh is not an overlay network. It\n  \u003e simplifies and enhances how microservices in an application talk to each\n  \u003e other over the network provided by the underlying platform.\n\n- **Mixer** - Central component that is leveraged by the proxies and microservices\n   to enforce policies such as authorization, rate limits, quotas, authentication, request\n   tracing and telemetry collection.\n\n- **Pilot** - A component responsible for configuring the proxies at runtime.\n\n- **Citadel** - A centralized component responsible for certificate issuance and rotation.\n\n- **Node Agent** - A per-node component responsible for certificate issuance and rotation.\n\n- **Galley**- Central component for validating, ingesting, aggregating, transforming and distributing config within Istio.\n\nIstio currently supports Kubernetes and Consul-based environments. We plan support for additional platforms such as\nCloud Foundry, and Mesos in the near future.\n\n## Repositories\n\nThe Istio project is divided across a few GitHub repositories.\n\n- [istio/istio](README.md). This is the main repository that you are\ncurrently looking at. It hosts Istio's core components and also\nthe sample programs and the various documents that govern the Istio open source\nproject. It includes:\n  - [security](security/). This directory contains security related code,\nincluding Citadel (acting as Certificate Authority), node agent, etc.\n  - [pilot](pilot/). This directory\ncontains platform-specific code to populate the\n[abstract service model](https://istio.io/docs/concepts/traffic-management/overview.html), dynamically reconfigure the proxies\nwhen the application topology changes, as well as translate\n[routing rules](https://istio.io/docs/reference/config/istio.networking.v1alpha3/) into proxy specific configuration.\n  - [istioctl](istioctl/). This directory contains code for the\n[_istioctl_](https://istio.io/docs/reference/commands/istioctl.html) command line utility.\n  - [mixer](mixer/). This directory\ncontains code to enforce various policies for traffic passing through the\nproxies, and collect telemetry data from proxies and services. There\nare plugins for interfacing with various cloud platforms, policy\nmanagement services, and monitoring services.\n\n- [istio/api](https://github.com/istio/api). This repository defines\ncomponent-level APIs and common configuration formats for the Istio platform.\n\n- [istio/proxy](https://github.com/istio/proxy). The Istio proxy contains\nextensions to the [Envoy proxy](https://github.com/envoyproxy/envoy) (in the form of\nEnvoy filters), that allow the proxy to delegate policy enforcement\ndecisions to Mixer.\n\n## Issue management\n\nWe use GitHub combined with ZenHub to track all of our bugs and feature requests. Each issue we track has a variety of metadata:\n\n- **Epic**. An epic represents a feature area for Istio as a whole. Epics are fairly broad in scope and are basically product-level things.\nEach issue is ultimately part of an epic.\n\n- **Milestone**. Each issue is assigned a milestone. This is 0.1, 0.2, ..., or 'Nebulous Future'. The milestone indicates when we\nthink the issue should get addressed.\n\n- **Priority/Pipeline**. Each issue has a priority which is represented by the Pipeline field within GitHub. Priority can be one of\nP0, P1, P2, or \u003eP2. The priority indicates how important it is to address the issue within the milestone. P0 says that the\nmilestone cannot be considered achieved if the issue isn't resolved.\n\nWe don't annotate issues with Releases; Milestones are used instead. We don't use GitHub projects at all, that\nsupport is disabled for our organization.\n"
  },
  {
    "repo": "mattermost/mattermost-server",
    "content": "# [![Mattermost](https://user-images.githubusercontent.com/33878967/33095422-7c8aa7a4-ceb8-11e7-810a-4b261fdff6d6.png)](https://mattermost.org)\n\nMattermost is an open source, private cloud, Slack-alternative from [https://mattermost.org](https://mattermost.org).\n\nIt's written in Golang and React and runs as a single Linux binary with MySQL or PostgreSQL. Every month on the 16th [a new compiled version is released under an MIT license](https://www.mattermost.org/download/).\n\n- [Review product documentation](http://docs.mattermost.com/).\n- [Review developer documentation](http://developers.mattermost.com/).\n- [Download compiled version](https://mattermost.org/download).\n\n\u003cimg width=\"1006\" alt=\"screenshot at nov 29 14-11-32\" src=\"https://user-images.githubusercontent.com/29708087/33394101-404e23e4-d50f-11e7-8fe5-99d4802a9768.png\"\u003e\n\n## Try out Mattermost\n\n- [Join the Mattermost Contributor's server](https://pre-release.mattermost.com/) (latest nightly builds, unstable)\n- [Join the Mattermost Demo server](https://demo.mattermost.com) (latest stable version)\n\n## Deploy on Heroku\n\n[![Deploy a Preview](https://www.herokucdn.com/deploy/button.svg)](https://heroku.com/deploy?template=https://github.com/mattermost/mattermost-heroku)\n\n_Note: Heroku preview does not include email or persistent storage_\n\n## Deploy on a Cloud Platform via Bitnami\n\n[Auto-deploy Mattermost](https://about.mattermost.com/download/#bitnami) to Amazon Web Services, Azure, Google Cloud Platform, or Oracle Cloud Platform via Bitnami.\n\n## Install on Your Own Machine\n\n- [One-line Docker Preview](http://docs.mattermost.com/install/docker-local-machine.html#one-line-docker-install) \n- [Developer Machine Setup](https://docs.mattermost.com/developer/dev-setup.html)\n- [Production Install Guides using Linux Binary](http://www.mattermost.org/installation/)\n- [Production Docker Install](https://docs.mattermost.com/install/prod-docker.html) \n\n## Native Mobile and Desktop Apps\n\nIn addition to the web interface, you can also download Mattermost clients for [Android](https://about.mattermost.com/mattermost-android-app/), [iOS](https://about.mattermost.com/mattermost-ios-app/), [Windows PC](https://docs.mattermost.com/install/desktop.html#windows-10-windows-8-1-windows-7), [Mac OSX](https://docs.mattermost.com/install/desktop.html#mac-os-x-10-9), and [Linux](https://docs.mattermost.com/install/desktop.html#linux-beta).\n\n[![Google Play](https://user-images.githubusercontent.com/33878967/33095356-39b6fbf8-ceb8-11e7-8a61-c3a18fa5e658.png)](https://about.mattermost.com/mattermost-android-app/)  [![App Store](https://user-images.githubusercontent.com/33878967/33095353-397e69b4-ceb8-11e7-8175-f95a97d5274f.png)](https://about.mattermost.com/mattermost-ios-app/)  [![Windows PC](https://user-images.githubusercontent.com/33878967/33095357-39cab8d2-ceb8-11e7-89a6-67dccc571ca3.png)](https://docs.mattermost.com/install/desktop.html#windows-10-windows-8-1-windows-7)  [![Mac OSX](https://user-images.githubusercontent.com/33878967/33095355-39a36f2a-ceb8-11e7-9b33-73d4f6d5d6c1.png)](https://docs.mattermost.com/install/desktop.html#mac-os-x-10-9)  [![Linux](https://user-images.githubusercontent.com/33878967/33095354-3990e256-ceb8-11e7-965d-b00a16e578de.png)](https://docs.mattermost.com/install/desktop.html#linux-beta)\n\n## Get Security Bulletins\n\nReceive notifications of critical security updates. The sophistication of online attackers is perpetually increasing. If you are deploying Mattermost it is highly recommended you subscribe to the Mattermost Security Bulletin mailing list for updates on critical security releases.\n \n- [Subscribe here](https://about.mattermost.com/security-bulletin/)\n\n## Get Involved\n\n- [Contribute Code](http://docs.mattermost.com/developer/contribution-guide.html)\n- [Find \"Help Wanted\" projects](https://github.com/mattermost/mattermost-server/issues?page=1\u0026q=is%3Aissue+is%3Aopen+%22Help+Wanted%22\u0026utf8=%E2%9C%93)\n- [Join Developer Discussion on a Mattermost Server for contributors](https://pre-release.mattermost.com/signup_user_complete/?id=f1924a8db44ff3bb41c96424cdc20676)\n- [File Bugs](http://www.mattermost.org/filing-issues/)\n- [Share Feature Ideas](https://www.mattermost.org/feature-ideas/)\n- [Get Troubleshooting Help](https://forum.mattermost.org/t/how-to-use-the-troubleshooting-forum/150)\n- [Help translate Mattermost](http://docs.mattermost.com/developer/localization.html#translation-process)\n\n## Learn More\n\n- [API Options - webhooks, slash commands, drivers and web service](https://api.mattermost.com/)\n- [See who's using Mattermost](https://about.mattermost.com/success-stories/)\n- [Browse over 700 Mattermost integrations](https://about.mattermost.com/community-applications/) \n\n## Get the Latest News\n\n- **Twitter** - Follow [Mattermost](https://twitter.com/mattermost)\n- **Blog** - Get the latest updates from the [Mattermost blog](https://about.mattermost.com/blog/).\n- **Email** - Subscribe to our [newsletter](http://mattermost.us11.list-manage.com/subscribe?u=6cdba22349ae374e188e7ab8e\u0026id=2add1c8034) (1 or 2 per month)\n- **IRC** - Join the #matterbridge channel on [Freenode](https://freenode.net/) (thanks to [matterircd](https://github.com/42wim/matterircd))\n\nAny other questions, mail us at info@mattermost.com. We‚Äôd love to meet you!\n"
  }
]