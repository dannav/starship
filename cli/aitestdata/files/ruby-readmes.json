[
  {
    "repo": "rails/rails",
    "content": "# Welcome to Rails\n\n## What's Rails?\n\nRails is a web-application framework that includes everything needed to\ncreate database-backed web applications according to the\n[Model-View-Controller (MVC)](https://en.wikipedia.org/wiki/Model-view-controller)\npattern.\n\nUnderstanding the MVC pattern is key to understanding Rails. MVC divides your\napplication into three layers: Model, View, and Controller, each with a specific responsibility.\n\n## Model layer\n\nThe _**Model layer**_ represents the domain model (such as Account, Product,\nPerson, Post, etc.) and encapsulates the business logic specific to\nyour application. In Rails, database-backed model classes are derived from\n`ActiveRecord::Base`. [Active Record](activerecord/README.rdoc) allows you to present the data from\ndatabase rows as objects and embellish these data objects with business logic\nmethods.\nAlthough most Rails models are backed by a database, models can also be ordinary\nRuby classes, or Ruby classes that implement a set of interfaces as provided by\nthe [Active Model](activemodel/README.rdoc) module.\n\n## Controller layer\n\nThe _**Controller layer**_ is responsible for handling incoming HTTP requests and\nproviding a suitable response. Usually this means returning HTML, but Rails controllers\ncan also generate XML, JSON, PDFs, mobile-specific views, and more. Controllers load and\nmanipulate models, and render view templates in order to generate the appropriate HTTP response.\nIn Rails, incoming requests are routed by Action Dispatch to an appropriate controller, and\ncontroller classes are derived from `ActionController::Base`. Action Dispatch and Action Controller\nare bundled together in [Action Pack](actionpack/README.rdoc).\n\n## View layer\n\nThe _**View layer**_ is composed of \"templates\" that are responsible for providing\nappropriate representations of your application's resources. Templates can\ncome in a variety of formats, but most view templates are HTML with embedded\nRuby code (ERB files). Views are typically rendered to generate a controller response,\nor to generate the body of an email. In Rails, View generation is handled by [Action View](actionview/README.rdoc).\n\n## Frameworks and libraries\n\n[Active Record](activerecord/README.rdoc), [Active Model](activemodel/README.rdoc), [Action Pack](actionpack/README.rdoc), and [Action View](actionview/README.rdoc) can each be used independently outside Rails.\nIn addition to that, Rails also comes with [Action Mailer](actionmailer/README.rdoc), a library\nto generate and send emails; [Active Job](activejob/README.md), a\nframework for declaring jobs and making them run on a variety of queuing\nbackends; [Action Cable](actioncable/README.md), a framework to\nintegrate WebSockets with a Rails application; [Active Storage](activestorage/README.md), a library to attach cloud\nand local files to Rails applications;\nand [Active Support](activesupport/README.rdoc), a collection\nof utility classes and standard library extensions that are useful for Rails,\nand may also be used independently outside Rails.\n\n## Getting Started\n\n1. Install Rails at the command prompt if you haven't yet:\n\n        $ gem install rails\n\n2. At the command prompt, create a new Rails application:\n\n        $ rails new myapp\n\n   where \"myapp\" is the application name.\n\n3. Change directory to `myapp` and start the web server:\n\n        $ cd myapp\n        $ rails server\n\n   Run with `--help` or `-h` for options.\n\n4. Go to `http://localhost:3000` and you'll see:\n\"Yay! You’re on Rails!\"\n\n5. Follow the guidelines to start developing your application. You may find\n   the following resources handy:\n    * [Getting Started with Rails](https://guides.rubyonrails.org/getting_started.html)\n    * [Ruby on Rails Guides](https://guides.rubyonrails.org)\n    * [The API Documentation](https://api.rubyonrails.org)\n    * [Ruby on Rails Tutorial](https://www.railstutorial.org/book)\n\n## Contributing\n\n[![Code Triage Badge](https://www.codetriage.com/rails/rails/badges/users.svg)](https://www.codetriage.com/rails/rails)\n\nWe encourage you to contribute to Ruby on Rails! Please check out the\n[Contributing to Ruby on Rails guide](https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for guidelines about how to proceed. [Join us!](https://contributors.rubyonrails.org)\n\nTrying to report a possible security vulnerability in Rails? Please\ncheck out our [security policy](https://rubyonrails.org/security/) for\nguidelines about how to proceed.\n\nEveryone interacting in Rails and its sub-projects' codebases, issue trackers, chat rooms, and mailing lists is expected to follow the Rails [code of conduct](https://rubyonrails.org/conduct/).\n\n## Code Status\n\n[![Build Status](https://travis-ci.org/rails/rails.svg?branch=master)](https://travis-ci.org/rails/rails)\n\n## License\n\nRuby on Rails is released under the [MIT License](https://opensource.org/licenses/MIT).\n"
  },
  {
    "repo": "jekyll/jekyll",
    "content": "# [Jekyll](https://jekyllrb.com/)\n\n[![Gem Version](https://img.shields.io/gem/v/jekyll.svg)][ruby-gems]\n[![Linux Build Status](https://img.shields.io/travis/jekyll/jekyll/master.svg?label=Linux%20build)][travis]\n[![Windows Build status](https://img.shields.io/appveyor/ci/jekyll/jekyll/master.svg?label=Windows%20build)][appveyor]\n[![Maintainability](https://api.codeclimate.com/v1/badges/8ba0cb5b17bb9848e128/maintainability)][codeclimate]\n[![Test Coverage](https://api.codeclimate.com/v1/badges/8ba0cb5b17bb9848e128/test_coverage)][coverage]\n[![Security](https://hakiri.io/github/jekyll/jekyll/master.svg)][hakiri]\n[![Backers on Open Collective](https://opencollective.com/jekyll/backers/badge.svg)](#backers)\n[![Sponsors on Open Collective](https://opencollective.com/jekyll/sponsors/badge.svg)](#sponsors)\n\n[ruby-gems]: https://rubygems.org/gems/jekyll\n[codeclimate]: https://codeclimate.com/github/jekyll/jekyll\n[coverage]: https://codeclimate.com/github/jekyll/jekyll/coverage\n[hakiri]: https://hakiri.io/github/jekyll/jekyll/master\n[travis]: https://travis-ci.org/jekyll/jekyll\n[appveyor]: https://ci.appveyor.com/project/jekyll/jekyll/branch/master\n\nJekyll is a simple, blog-aware, static site generator perfect for personal, project, or organization sites. Think of it like a file-based CMS, without all the complexity. Jekyll takes your content, renders Markdown and Liquid templates, and spits out a complete, static website ready to be served by Apache, Nginx or another web server. Jekyll is the engine behind [GitHub Pages](https://pages.github.com), which you can use to host sites right from your GitHub repositories.\n\n## Philosophy\n\nJekyll does what you tell it to do — no more, no less. It doesn't try to outsmart users by making bold assumptions, nor does it burden them with needless complexity and configuration. Put simply, Jekyll gets out of your way and allows you to concentrate on what truly matters: your content.\n\nSee: https://jekyllrb.com/philosophy\n\n## Getting Started\n\n* [Install](https://jekyllrb.com/docs/installation/) the gem\n* Read up about its [Usage](https://jekyllrb.com/docs/usage/) and [Configuration](https://jekyllrb.com/docs/configuration/)\n* Take a gander at some existing [Sites](https://wiki.github.com/jekyll/jekyll/sites)\n* [Fork](https://github.com/jekyll/jekyll/fork) and [Contribute](https://jekyllrb.com/docs/contributing/) your own modifications\n* Have questions? Check out our official forum community [Jekyll Talk](https://talk.jekyllrb.com/) or [`#jekyll` on irc.freenode.net](https://botbot.me/freenode/jekyll/)\n\n## Diving In\n\n* [Migrate](http://import.jekyllrb.com/docs/home/) from your previous system\n* Learn how [Front Matter](https://jekyllrb.com/docs/front-matter/) works\n* Put information on your site with [Variables](https://jekyllrb.com/docs/variables/)\n* Customize the [Permalinks](https://jekyllrb.com/docs/permalinks/) your posts are generated with\n* Use the built-in [Liquid Extensions](https://jekyllrb.com/docs/templates/) to make your life easier\n* Use custom [Plugins](https://jekyllrb.com/docs/plugins/) to generate content specific to your site\n* Watch [video tutorials from Giraffe Academy](https://jekyllrb.com/tutorials/video-walkthroughs/)\n\n## Need help?\n\nIf you don't find the answer to your problem in our [docs](https://jekyllrb.com/docs/), or in the [troubleshooting section](https://jekyllrb.com/docs/troubleshooting/), ask the [community](https://jekyllrb.com/docs/community/) for help.\n\n## Code of Conduct\n\nIn order to have a more open and welcoming community, Jekyll adheres to a\n[code of conduct](CODE_OF_CONDUCT.markdown) adapted from the Ruby on Rails code of\nconduct.\n\nPlease adhere to this code of conduct in any interactions you have in the\nJekyll community. It is strictly enforced on all official Jekyll\nrepositories, websites, and resources. If you encounter someone violating\nthese terms, please let one of our [core team members](https://jekyllrb.com/team/#core-team) know and we will address it as soon as possible.\n\n## Credits\n\n### Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up in this README with a link to your website. [Become a sponsor!](https://opencollective.com/jekyll#sponsor)\n\n\u003ca href=\"https://opencollective.com/jekyll/sponsor/0/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/jekyll/sponsor/0/avatar.svg\" /\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/jekyll/sponsor/1/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/jekyll/sponsor/1/avatar.svg\" /\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/jekyll/sponsor/2/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/jekyll/sponsor/2/avatar.svg\" /\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/jekyll/sponsor/3/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/jekyll/sponsor/3/avatar.svg\" /\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/jekyll/sponsor/4/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/jekyll/sponsor/4/avatar.svg\" /\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/jekyll/sponsor/5/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/jekyll/sponsor/5/avatar.svg\" /\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/jekyll/sponsor/6/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/jekyll/sponsor/6/avatar.svg\" /\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/jekyll/sponsor/7/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/jekyll/sponsor/7/avatar.svg\" /\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/jekyll/sponsor/8/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/jekyll/sponsor/8/avatar.svg\" /\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/jekyll/sponsor/9/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/jekyll/sponsor/9/avatar.svg\" /\u003e\u003c/a\u003e\n\n### Contributors\n\nThis project exists thanks to all the people who contribute.\n\u003ca href=\"../../graphs/contributors\"\u003e\u003cimg src=\"https://opencollective.com/jekyll/contributors.svg?width=890\u0026button=false\" /\u003e\u003c/a\u003e\n\n### Backers\n\nThank you to all our backers! 🙏 [Become a backer](https://opencollective.com/jekyll#backer)\n\n\u003ca href=\"https://opencollective.com/jekyll#backers\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/jekyll/backers.svg?width=890\" /\u003e\u003c/a\u003e\n\n## License\n\nSee the [LICENSE](https://github.com/jekyll/jekyll/blob/master/LICENSE) file.\n"
  },
  {
    "repo": "Homebrew/legacy-homebrew",
    "content": "# Homebrew (Legacy)\nThis repository has been deprecated and split into two repositories:\n- Homebrew formulae/packages: [Homebrew/homebrew-core](https://github.com/Homebrew/homebrew-core) (former contents of `Library/Formula`)\n- Homebrew package manager: [Homebrew/brew](https://github.com/Homebrew/brew)\n\nPlease note: you don't need to move pull requests or issues over from this. We will handle all migrations.\n"
  },
  {
    "repo": "discourse/discourse",
    "content": "\u003ca href=\"http://www.discourse.org/\"\u003e![Logo](images/discourse.png)\u003c/a\u003e\n\nDiscourse is the 100% open source discussion platform built for the next decade of the Internet. Use it as a:\n\n- mailing list\n- discussion forum\n- long-form chat room\n\nTo learn more about the philosophy and goals of the project, [visit **discourse.org**](http://www.discourse.org).\n\n## Screenshots\n\n\n\u003ca href=\"https://bbs.boingboing.net\"\u003e\u003cimg alt=\"Boing Boing\" src=\"https://cloud.githubusercontent.com/assets/1385470/25397876/3fe6cdac-29c0-11e7-8a41-9d0c0279f5a3.png\" width=\"720px\"\u003e\u003c/a\u003e\n\u003ca href=\"https://twittercommunity.com/\"\u003e\u003cimg src=\"https://cloud.githubusercontent.com/assets/1385470/25397920/71b24e4c-29c0-11e7-8bcf-7a47b888412e.png\" width=\"720px\"\u003e\u003c/a\u003e\n\u003ca href=\"http://discuss.howtogeek.com\"\u003e\u003cimg src=\"https://cloud.githubusercontent.com/assets/1385470/25398049/f0995962-29c0-11e7-99d7-a3b9c4f0b357.png\" width=\"720px\"\u003e\u003c/a\u003e\n\u003ca href=\"https://talk.turtlerockstudios.com/\"\u003e\u003cimg src=\"https://cloud.githubusercontent.com/assets/1385470/25398115/2d560d96-29c1-11e7-9a96-b0134a4fedff.png\" width=\"720px\"\u003e\u003c/a\u003e\n\n\u003cimg src=\"https://www.discourse.org/a/img/about/mobile-devices-2x.jpg\" alt=\"Mobile\" width=\"414\"\u003e\n\nBrowse [lots more notable Discourse instances](https://www.discourse.org/customers).\n\n## Development\n\nTo get your environment setup, follow the community setup guide for your operating system.\n\n1. If you're on macOS, try the [macOS development guide](https://meta.discourse.org/t/beginners-guide-to-install-discourse-on-macos-for-development/15772).\n1. If you're on Ubuntu, try the [Ubuntu development guide](https://meta.discourse.org/t/beginners-guide-to-install-discourse-on-ubuntu-for-development/14727).\n1. If you're on Windows, try the [Windows 10 development guide](https://meta.discourse.org/t/beginners-guide-to-install-discourse-on-windows-10-for-development/75149).\n\nIf you're familiar with how Rails works and are comfortable setting up your own environment, you can also try out the [**Discourse Advanced Developer Guide**](docs/DEVELOPER-ADVANCED.md), which is aimed primarily at Ubuntu and macOS environments.\n\nBefore you get started, ensure you have the following minimum versions: [Ruby 2.5+](http://www.ruby-lang.org/en/downloads/), [PostgreSQL 10+](http://www.postgresql.org/download/), [Redis 2.6+](http://redis.io/download). If you're having trouble, please see our [**TROUBLESHOOTING GUIDE**](docs/TROUBLESHOOTING.md) first!\n\n## Setting up Discourse\n\nIf you want to set up a Discourse forum for production use, see our [**Discourse Install Guide**](docs/INSTALL.md).\n\nIf you're looking for business class hosting, see [discourse.org/buy](https://www.discourse.org/buy/).\n\n## Requirements\n\nDiscourse is built for the *next* 10 years of the Internet, so our requirements are high:\n\n| Browsers              | Tablets      | Phones       |\n| --------------------- | ------------ | ------------ |\n| Safari 6.1+           | iPad 3+      | iOS 8+       |\n| Google Chrome 32+     | Android 4.3+ | Android 4.3+ |\n| Internet Explorer 11+ |              |              |\n| Firefox 27+           |              |              |\n\n## Built With\n\n- [Ruby on Rails](https://github.com/rails/rails) \u0026mdash; Our back end API is a Rails app. It responds to requests RESTfully in JSON.\n- [Ember.js](https://github.com/emberjs/ember.js) \u0026mdash; Our front end is an Ember.js app that communicates with the Rails API.\n- [PostgreSQL](http://www.postgresql.org/) \u0026mdash; Our main data store is in Postgres.\n- [Redis](http://redis.io/) \u0026mdash; We use Redis as a cache and for transient data.\n\nPlus *lots* of Ruby Gems, a complete list of which is at [/master/Gemfile](https://github.com/discourse/discourse/blob/master/Gemfile).\n\n## Contributing\n\n[![Build Status](https://api.travis-ci.org/discourse/discourse.svg?branch=master)](https://travis-ci.org/discourse/discourse)\n\nDiscourse is **100% free** and **open source**. We encourage and support an active, healthy community that\naccepts contributions from the public \u0026ndash; including you!\n\nBefore contributing to Discourse:\n\n1. Please read the complete mission statements on [**discourse.org**](http://www.discourse.org). Yes we actually believe this stuff; you should too.\n2. Read and sign the [**Electronic Discourse Forums Contribution License Agreement**](http://discourse.org/cla).\n3. Dig into [**CONTRIBUTING.MD**](CONTRIBUTING.md), which covers submitting bugs, requesting new features, preparing your code for a pull request, etc.\n4. Always strive to collaborate [with mutual respect](https://github.com/discourse/discourse/blob/master/docs/code-of-conduct.md).\n5. Not sure what to work on? [**We've got some ideas.**](http://meta.discourse.org/t/so-you-want-to-help-out-with-discourse/3823)\n\n\nWe look forward to seeing your pull requests!\n\n## Security\n\nWe take security very seriously at Discourse; all our code is 100% open source and peer reviewed. Please read [our security guide](https://github.com/discourse/discourse/blob/master/docs/SECURITY.md) for an overview of security measures in Discourse, or if you wish to report a security issue.\n\n## The Discourse Team\n\nThe original Discourse code contributors can be found in [**AUTHORS.MD**](docs/AUTHORS.md). For a complete list of the many individuals that contributed to the design and implementation of Discourse, please refer to [the official Discourse blog](http://blog.discourse.org/2013/02/the-discourse-team/) and [GitHub's list of contributors](https://github.com/discourse/discourse/contributors).\n\n\n## Copyright / License\n\nCopyright 2014 - 2018 Civilized Discourse Construction Kit, Inc.\n\nLicensed under the GNU General Public License Version 2.0 (or later);\nyou may not use this work except in compliance with the License.\nYou may obtain a copy of the License in the LICENSE file, or at:\n\n   http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\nDiscourse logo and “Discourse Forum” ®, Civilized Discourse Construction Kit, Inc.\n\n## Dedication\n\nDiscourse is built with [love, Internet style.](http://www.youtube.com/watch?v=Xe1TZaElTAs)\n"
  },
  {
    "repo": "fastlane/fastlane",
    "content": "\u003ch3 align=\"center\"\u003e\n  \u003ca href=\"https://github.com/fastlane/fastlane/blob/master/fastlane/assets/fastlane_text.png\"\u003e\n  \u003cimg src=\"https://github.com/fastlane/fastlane/blob/master/fastlane/assets/fastlane_text.png?raw=true\" alt=\"fastlane Logo\" width=\"500\"\u003e\n  \u003c/a\u003e\n\u003c/h3\u003e\n\n[![Twitter: @FastlaneTools](https://img.shields.io/badge/contact-@FastlaneTools-blue.svg?style=flat)](https://twitter.com/FastlaneTools)\n[![License](https://img.shields.io/badge/license-MIT-green.svg?style=flat)](https://github.com/fastlane/fastlane/blob/master/LICENSE)\n[![Gem](https://img.shields.io/gem/v/fastlane.svg?style=flat)](https://rubygems.org/gems/fastlane)\n[![Build Status](https://img.shields.io/circleci/project/github/fastlane/fastlane/master.svg)](https://circleci.com/gh/fastlane/fastlane)\n\n_fastlane_ is a tool for iOS and Android developers to automate tedious tasks like generating screenshots, dealing with provisioning profiles, and releasing your application.\n\n\u003chr /\u003e\n\u003ch2 align=\"center\"\u003e\n  ✨ All fastlane docs were moved to \u003ca href=\"https://docs.fastlane.tools/\"\u003edocs.fastlane.tools\u003c/a\u003e ✨\n\u003c/h2\u003e\n\u003chr /\u003e\n\n## Need Help?\n\nBefore submitting a new GitHub issue, please make sure to\n\n- Check out [docs.fastlane.tools](https://docs.fastlane.tools)\n- Search for [existing GitHub issues](https://github.com/fastlane/fastlane/issues)\n\nIf the above doesn't help, please [submit an issue](https://github.com/fastlane/fastlane/issues) on GitHub and provide information about your setup, in particular the output of the `fastlane env` command.\n\n**Note**: If you want to report a regression in _fastlane_ (something that has worked before, but broke with a new release), please mark your issue title as such using `[Regression] Your title here`. This enables us to quickly detect and fix regressions.\n\n## _fastlane_ team\n\n\u003c!-- This table is regenerated and resorted on each release --\u003e\n\u003ctable id='team'\u003e\n\u003ctr\u003e\n\u003ctd id='aaron-brager'\u003e\n\u003ca href='https://github.com/getaaron'\u003e\n\u003cimg src='https://github.com/getaaron.png?size=140'\u003e\n\u003c/a\u003e\n\u003ch4 align='center'\u003e\u003ca href='https://twitter.com/getaaron'\u003eAaron Brager\u003c/a\u003e\u003c/h4\u003e\n\u003c/td\u003e\n\u003ctd id='jimmy-dee'\u003e\n\u003ca href='https://github.com/jdee'\u003e\n\u003cimg src='https://github.com/jdee.png?size=140'\u003e\n\u003c/a\u003e\n\u003ch4 align='center'\u003eJimmy Dee\u003c/h4\u003e\n\u003c/td\u003e\n\u003ctd id='joshua-liebowitz'\u003e\n\u003ca href='https://github.com/taquitos'\u003e\n\u003cimg src='https://github.com/taquitos.png?size=140'\u003e\n\u003c/a\u003e\n\u003ch4 align='center'\u003e\u003ca href='https://twitter.com/taquitos'\u003eJoshua Liebowitz\u003c/a\u003e\u003c/h4\u003e\n\u003c/td\u003e\n\u003ctd id='luka-mirosevic'\u003e\n\u003ca href='https://github.com/lmirosevic'\u003e\n\u003cimg src='https://github.com/lmirosevic.png?size=140'\u003e\n\u003c/a\u003e\n\u003ch4 align='center'\u003e\u003ca href='https://twitter.com/lmirosevic'\u003eLuka Mirosevic\u003c/a\u003e\u003c/h4\u003e\n\u003c/td\u003e\n\u003ctd id='olivier-halligon'\u003e\n\u003ca href='https://github.com/AliSoftware'\u003e\n\u003cimg src='https://github.com/AliSoftware.png?size=140'\u003e\n\u003c/a\u003e\n\u003ch4 align='center'\u003e\u003ca href='https://twitter.com/aligatr'\u003eOlivier Halligon\u003c/a\u003e\u003c/h4\u003e\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd id='maksym-grebenets'\u003e\n\u003ca href='https://github.com/mgrebenets'\u003e\n\u003cimg src='https://github.com/mgrebenets.png?size=140'\u003e\n\u003c/a\u003e\n\u003ch4 align='center'\u003e\u003ca href='https://twitter.com/mgrebenets'\u003eMaksym Grebenets\u003c/a\u003e\u003c/h4\u003e\n\u003c/td\u003e\n\u003ctd id='jan-piotrowski'\u003e\n\u003ca href='https://github.com/janpio'\u003e\n\u003cimg src='https://github.com/janpio.png?size=140'\u003e\n\u003c/a\u003e\n\u003ch4 align='center'\u003e\u003ca href='https://twitter.com/Sujan'\u003eJan Piotrowski\u003c/a\u003e\u003c/h4\u003e\n\u003c/td\u003e\n\u003ctd id='felix-krause'\u003e\n\u003ca href='https://github.com/KrauseFx'\u003e\n\u003cimg src='https://github.com/KrauseFx.png?size=140'\u003e\n\u003c/a\u003e\n\u003ch4 align='center'\u003e\u003ca href='https://twitter.com/KrauseFx'\u003eFelix Krause\u003c/a\u003e\u003c/h4\u003e\n\u003c/td\u003e\n\u003ctd id='josh-holtz'\u003e\n\u003ca href='https://github.com/joshdholtz'\u003e\n\u003cimg src='https://github.com/joshdholtz.png?size=140'\u003e\n\u003c/a\u003e\n\u003ch4 align='center'\u003e\u003ca href='https://twitter.com/joshdholtz'\u003eJosh Holtz\u003c/a\u003e\u003c/h4\u003e\n\u003c/td\u003e\n\u003ctd id='jorge-revuelta-h'\u003e\n\u003ca href='https://github.com/minuscorp'\u003e\n\u003cimg src='https://github.com/minuscorp.png?size=140'\u003e\n\u003c/a\u003e\n\u003ch4 align='center'\u003e\u003ca href='https://twitter.com/minuscorp'\u003eJorge Revuelta H\u003c/a\u003e\u003c/h4\u003e\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd id='iulian-onofrei'\u003e\n\u003ca href='https://github.com/revolter'\u003e\n\u003cimg src='https://github.com/revolter.png?size=140'\u003e\n\u003c/a\u003e\n\u003ch4 align='center'\u003e\u003ca href='https://twitter.com/Revolt666'\u003eIulian Onofrei\u003c/a\u003e\u003c/h4\u003e\n\u003c/td\u003e\n\u003ctd id='fumiya-nakamura'\u003e\n\u003ca href='https://github.com/nafu'\u003e\n\u003cimg src='https://github.com/nafu.png?size=140'\u003e\n\u003c/a\u003e\n\u003ch4 align='center'\u003e\u003ca href='https://twitter.com/nafu003'\u003eFumiya Nakamura\u003c/a\u003e\u003c/h4\u003e\n\u003c/td\u003e\n\u003ctd id='manu-wallner'\u003e\n\u003ca href='https://github.com/milch'\u003e\n\u003cimg src='https://github.com/milch.png?size=140'\u003e\n\u003c/a\u003e\n\u003ch4 align='center'\u003e\u003ca href='https://twitter.com/acrooow'\u003eManu Wallner\u003c/a\u003e\u003c/h4\u003e\n\u003c/td\u003e\n\u003ctd id='helmut-januschka'\u003e\n\u003ca href='https://github.com/hjanuschka'\u003e\n\u003cimg src='https://github.com/hjanuschka.png?size=140'\u003e\n\u003c/a\u003e\n\u003ch4 align='center'\u003e\u003ca href='https://twitter.com/hjanuschka'\u003eHelmut Januschka\u003c/a\u003e\u003c/h4\u003e\n\u003c/td\u003e\n\u003ctd id='kohki-miki'\u003e\n\u003ca href='https://github.com/giginet'\u003e\n\u003cimg src='https://github.com/giginet.png?size=140'\u003e\n\u003c/a\u003e\n\u003ch4 align='center'\u003e\u003ca href='https://twitter.com/giginet'\u003eKohki Miki\u003c/a\u003e\u003c/h4\u003e\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd id='andrew-mcburney'\u003e\n\u003ca href='https://github.com/armcburney'\u003e\n\u003cimg src='https://github.com/armcburney.png?size=140'\u003e\n\u003c/a\u003e\n\u003ch4 align='center'\u003e\u003ca href='https://twitter.com/armcburney'\u003eAndrew McBurney\u003c/a\u003e\u003c/h4\u003e\n\u003c/td\u003e\n\u003ctd id='danielle-tomlinson'\u003e\n\u003ca href='https://github.com/DanToml'\u003e\n\u003cimg src='https://github.com/DanToml.png?size=140'\u003e\n\u003c/a\u003e\n\u003ch4 align='center'\u003e\u003ca href='https://twitter.com/DanToml'\u003eDanielle Tomlinson\u003c/a\u003e\u003c/h4\u003e\n\u003c/td\u003e\n\u003ctd id='matthew-ellis'\u003e\n\u003ca href='https://github.com/matthewellis'\u003e\n\u003cimg src='https://github.com/matthewellis.png?size=140'\u003e\n\u003c/a\u003e\n\u003ch4 align='center'\u003e\u003ca href='https://twitter.com/mellis1995'\u003eMatthew Ellis\u003c/a\u003e\u003c/h4\u003e\n\u003c/td\u003e\n\u003ctd id='stefan-natchev'\u003e\n\u003ca href='https://github.com/snatchev'\u003e\n\u003cimg src='https://github.com/snatchev.png?size=140'\u003e\n\u003c/a\u003e\n\u003ch4 align='center'\u003e\u003ca href='https://twitter.com/snatchev'\u003eStefan Natchev\u003c/a\u003e\u003c/h4\u003e\n\u003c/td\u003e\n\u003ctd id='jérôme-lacoste'\u003e\n\u003ca href='https://github.com/lacostej'\u003e\n\u003cimg src='https://github.com/lacostej.png?size=140'\u003e\n\u003c/a\u003e\n\u003ch4 align='center'\u003e\u003ca href='https://twitter.com/lacostej'\u003eJérôme Lacoste\u003c/a\u003e\u003c/h4\u003e\n\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/table\u003e\n\nSpecial thanks to all [contributors](https://github.com/fastlane/fastlane/graphs/contributors) for extending and improving _fastlane_.\n\n## Contribute to _fastlane_\n\nCheck out [CONTRIBUTING.md](CONTRIBUTING.md) for more information on how to help with _fastlane_.\n\n## Code of Conduct\n\nHelp us keep _fastlane_ open and inclusive. Please read and follow our [Code of Conduct](https://github.com/fastlane/fastlane/blob/master/CODE_OF_CONDUCT.md).\n\n## Metrics\n \n_fastlane_ tracks a few key metrics to understand how developers are using the tool and to help us know what areas need improvement. No personal/sensitive information is ever collected. Metrics that are collected include: \n \n* The number of _fastlane_ runs\n* A salted hash of the app identifier or package name, which helps us anonymously identify unique usage of _fastlane_\n \nYou can easily opt-out of metrics collection by adding `opt_out_usage` at the top of your `Fastfile` or by setting the environment variable `FASTLANE_OPT_OUT_USAGE`. [Check out the metrics code on GitHub](https://github.com/fastlane/fastlane/tree/master/fastlane_core/lib/fastlane_core/analytics)\n\n## License\n\nThis project is licensed under the terms of the MIT license. See the [LICENSE](LICENSE) file.\n\n\u003e This project and all fastlane tools are in no way affiliated with Apple Inc. This project is open source under the MIT license, which means you have full access to the source code and can modify it to fit your own needs. All fastlane tools run on your own computer or server, so your credentials or other sensitive information will never leave your own computer. You are responsible for how you use fastlane tools.\n\n\u003chr /\u003e\n\u003ch2 align=\"center\"\u003e\n  ✨ All fastlane docs were moved to \u003ca href=\"https://docs.fastlane.tools/\"\u003edocs.fastlane.tools\u003c/a\u003e ✨\n\u003c/h2\u003e\n\u003chr /\u003e\n"
  },
  {
    "repo": "bayandin/awesome-awesomeness",
    "content": "# Awesome Awesomeness\n\nA curated list of amazingly awesome awesomeness.\n\n- Programming Languages\n\t- [Ansible](https://github.com/jdauphant/awesome-ansible)\n\t- [AutoHotkey](https://github.com/ahkscript/awesome-AutoHotkey)\n\t- [AutoIt](https://github.com/J2TeaM/awesome-AutoIt)\n\t- [Assembler](https://github.com/jaspergould/awesome-asm)\n\t- [C](https://notabug.org/koz.ross/awesome-c)\n\t- [C/C++](https://github.com/fffaraz/awesome-cpp)\n\t- [CMake](https://github.com/onqtam/awesome-cmake)\n\t- Clojure\n\t\t- [by @mbuczko](https://github.com/mbuczko/awesome-clojure)\n\t\t- [by @razum2um](https://github.com/razum2um/awesome-clojure)\n\t- [ColdFusion](https://github.com/seancoyne/awesome-coldfusion)\n\t- Common Lisp\n\t\t- [Common Lisp Libraries](https://github.com/CodyReichert/awesome-cl)\n\t\t- [Learning Common Lisp](https://github.com/GustavBertram/awesome-common-lisp-learning-list)\n\t- [Crystal](https://github.com/veelenga/awesome-crystal)\n\t- [D](https://github.com/zhaopuming/awesome-d)\n\t- [Delphi](https://github.com/Fr0sT-Brutal/awesome-delphi)\n\t- [Elixir](https://github.com/h4cc/awesome-elixir)\n\t- [Elm](https://github.com/isRuslan/awesome-elm)\n\t- Erlang\n\t\t- [by @0xAX](https://github.com/0xAX/erlang-bookmarks)\n\t\t- [by @drobakowski](https://github.com/drobakowski/awesome-erlang)\n\t\t- [by @unbalancedparentheses](https://github.com/unbalancedparentheses/spawnedshelter)\n\t- [F#](https://github.com/fsprojects/awesome-fsharp)\n\t- [Fortran](https://github.com/rabbiabram/awesome-fortran)\n\t- [Go](https://github.com/avelino/awesome-go)\n\t- [Go Patterns](https://github.com/tmrts/go-patterns)\n\t- [Groovy](https://github.com/kdabir/awesome-groovy)\n\t- [Haskell](https://github.com/krispo/awesome-haskell)\n\t- [Idris](https://github.com/joaomilho/awesome-idris)\n\t- [Java](https://github.com/akullpp/awesome-java)\n\t- [JavaScript](https://github.com/sorrycc/awesome-javascript)\n\t\t- [Angular 2](https://github.com/AngularClass/awesome-angular)\n\t\t- [Ember.js](https://github.com/nmec/awesome-ember)\n\t\t- [JavaScript Learning Resources](https://github.com/micromata/awesome-javascript-learning)\n\t\t- [Koa](https://github.com/ellerbrock/awesome-koa)\n\t\t- [Node.js](https://github.com/sindresorhus/awesome-nodejs)\n\t\t- [React](https://github.com/enaqx/awesome-react)\n\t\t- [Svelte](https://github.com/flagello/awesome-sveltejs)\n\t\t- [VueJS](https://github.com/vuejs/awesome-vue)\n\t- [Julia](https://github.com/svaksha/Julia.jl)\n\t- [Kotlin](https://github.com/KotlinBy/awesome-kotlin)\n\t- Lua\n\t\t- [by @forhappy](https://github.com/forhappy/awesome-lua)\n\t\t- [by @lewisjellis](https://github.com/LewisJEllis/awesome-lua)\n\t- [MongoDB](https://github.com/ximaoxo/awesome-mongodb)\n\t- [MySQL](https://github.com/shlomi-noach/awesome-mysql)\n\t- .NET\n\t\t- [by @quozd](https://github.com/quozd/awesome-dotnet)\n\t\t- [by @tallesl](https://github.com/tallesl/net-libraries-that-make-your-life-easier)\n\t\t- [by @thangchung](https://github.com/thangchung/awesome-dotnet-core)\n\t- [OCaml](https://github.com/rizo/awesome-ocaml)\n\t- [Perl](https://github.com/hachiojipm/awesome-perl)\n\t- [PHP](https://github.com/ziadoz/awesome-php)\n\t- [Postgres](https://github.com/dhamaniasad/awesome-postgres)\n\t- Python\n\t\t- [by @kirang89](https://github.com/kirang89/pycrumbs)\n\t\t- [by @svaksha](https://github.com/svaksha/pythonidae)\n\t\t- [by @trekhleb](https://github.com/trekhleb/learn-python)\n\t\t- [by @vinta](https://github.com/vinta/awesome-python)\n\t\t- [awesome-python-in-education](https://github.com/quobit/awesome-python-in-education)\n\t- [R](https://github.com/qinwf/awesome-R)\n\t- Ruby\n\t\t- [by @dreikanter](https://github.com/dreikanter/ruby-bookmarks)\n\t\t- [by @markets](https://github.com/markets/awesome-ruby)\n\t\t- [by @Sdogruyol](https://github.com/Sdogruyol/awesome-ruby)\n\t- [Rust](https://github.com/rust-unofficial/awesome-rust)\n\t- [SAS](https://github.com/huyingjie/awesome-SAS)\n\t- [Scala](https://github.com/lauris/awesome-scala)\n\t- [Shell](https://github.com/alebcay/awesome-shell)\n\t- Swift\n\t\t- [by @matteocrippa](https://github.com/matteocrippa/awesome-swift)\n\t\t- [by @MaxChen](https://github.com/MaxChen/awesome-swift-and-tutorial-resources)\n\t\t- [by @Wolg](https://github.com/Wolg/awesome-swift)\n\t\t- [from ZEEF by @Edubits](https://swift.zeef.com/robin.eggenkamp)\n\t- TypeScript\n\t\t- [by @brookshi](https://github.com/brookshi/awesome-typescript-projects)\n\t\t- [by @dzharii](https://github.com/dzharii/awesome-typescript)\n\t\t- [by @ellerbrock](https://github.com/ellerbrock/awesome-typescript)\n\n- General\n\t- [.htaccess](https://github.com/phanan/htaccess)\n\t- Accessibility\n\t\t- [by @a11yproject](https://github.com/a11yproject/a11yproject.com)\n\t\t- [by @brunopulis](https://github.com/brunopulis/awesome-a11y)\n\t- [Agolia](https://github.com/algolia/awesome-algolia)\n\t- [Algorithms](https://github.com/tayllan/awesome-algorithms)\n\t\t- [Algorithms Visualisation](https://github.com/enjalot/algovis)\n\t\t- [Big O Notation](https://github.com/okulbilisim/awesome-big-o)\n\t- [Amazon Web Services](https://github.com/donnemartin/awesome-aws)\n\t- [Analytics](https://github.com/onurakpolat/awesome-analytics)\n\t- [Android](https://github.com/JStumpp/awesome-android)\n\t\t- [Android Release Notes](https://github.com/pedronveloso/awesome-android-release-notes)\n\t\t- [Android Security](https://github.com/ashishb/android-security-awesome)\n\t\t- [Android UI](https://github.com/wasabeef/awesome-android-ui)\n\t- [Arduino](https://github.com/Lembed/Awesome-arduino)\n\t- [Artificial intelligence](https://github.com/owainlewis/awesome-artificial-intelligence)\n\t- API\n\t\t- [by @Kikobeats](https://github.com/Kikobeats/awesome-api)\n\t\t- [by @toddmotto](https://github.com/toddmotto/public-apis)\n\t- [Apple](https://github.com/joeljfischer/awesome-apple)\n\t\t- [OS X](https://github.com/iCHAIT/awesome-macOS)\n\t\t- [OS X and iOS Security](https://github.com/ashishb/osx-and-ios-security-awesome)\n\t- [Beacons](https://github.com/beaconinside/awesome-beacon)\n\t- Big data\n\t\t- [by @onurakpolat](https://github.com/onurakpolat/awesome-bigdata)\n\t\t- [by @zenkay](https://github.com/zenkay/bigdata-ecosystem)\n\t\t- [Hadoop](https://github.com/youngwookim/awesome-hadoop)\n\t- Blockchain\n\t\t- [by @0xtokens](https://github.com/0xtokens/awesome-blockchain)\n\t\t- [by @imbaniac](https://github.com/imbaniac/awesome-blockchain)\n\t\t- [by @coderplex](https://github.com/coderplex/awesome-blockchain)\n\t\t- [by @hitripod](https://github.com/hitripod/awesome-blockchain)\n\t\t- [by @iNiKe](https://github.com/iNiKe/awesome-blockchain)\n\t\t- [by @igorbarinov](https://github.com/igorbarinov/awesome-blockchain)\n\t\t- [by @istinspring](https://github.com/istinspring/awesome-blockchain)\n\t\t- [by @openblockchains](https://github.com/openblockchains/awesome-blockchains)\n\t\t- [by @kennethreitz](https://github.com/kennethreitz/awesome-coins)\n\t\t- [awesome-token-sale](https://github.com/holographicio/awesome-token-sale)\n\t\t- Bitcoin\n\t\t\t- [by @btcbrdev](https://github.com/btcbrdev/awesome-btcdev)\n\t\t\t- [by @igorbarinov](https://github.com/igorbarinov/awesome-bitcoin)\n\t\t- Ethereum\n\t\t\t- [by @vinsgo](https://github.com/vinsgo/awesome-ethereum)\n\t\t\t- [awesome-ethereum-virtual-machine](https://github.com/pirapira/awesome-ethereum-virtual-machine)\n\t\t\t- [by @Tom2718](https://github.com/Tom2718/Awesome-Ethereum)\n\t\t- [Ripple](https://github.com/vhpoet/awesome-ripple)\n\t- [Boilerplates](https://github.com/melvin0008/awesome-projects-boilerplates)\n\t- Books\n\t\t- [Free Programming Books](https://github.com/EbookFoundation/free-programming-books)\n\t\t- [Free Software Testing Books](https://github.com/ligurio/free-software-testing-books)\n\t\t- [Mind Expanding Books](https://github.com/hackerkid/Mind-Expanding-Books)\n\t- [Bootstrap](https://github.com/therebelrobot/awesome-bootstrap)\n\t- [Captcha](https://github.com/ZYSzys/awesome-captcha)\n\t- [Challenges](https://github.com/mauriciovieira/awesome-challenges)\n\t- [Code Formatters](https://github.com/rishirdua/awesome-code-formatters)\n\t- [Community Detection](https://github.com/benedekrozemberczki/awesome-community-detection)\n\t- [Competitive Programming](https://github.com/lnishan/awesome-competitive-programming)\n\t- [Computer Vision](https://github.com/jbhuang0604/awesome-computer-vision)\n\t- [Conferences](https://github.com/RichardLitt/awesome-conferences)\n\t- [Continuous Delivery](https://github.com/ciandcd/awesome-ciandcd)\n\t- [Conversational UI](https://github.com/mortenjust/awesome-conversational/)\n\t- [Cordova](https://github.com/busterc/awesome-cordova)\n\t- [Courses](https://github.com/prakhar1989/awesome-courses)\n\t- [Creative Commons Media](https://github.com/shime/creative-commons-media)\n\t- Cryptography\n\t\t- [by @MaciejCzyzewski](https://github.com/MaciejCzyzewski/retter)\n\t\t- [by @sobolevn](https://github.com/sobolevn/awesome-cryptography)\n\t\t- [by @coinpride](https://github.com/coinpride/CryptoList)\n\t- [CSS](https://github.com/sotayamashita/awesome-css)\n\t\t- [CSS Frameworks](https://github.com/troxler/awesome-css-frameworks)\n\t- [Data Science](https://github.com/bulutyazilim/awesome-datascience)\n\t- [Data Visualization](https://github.com/fasouto/awesome-dataviz)\n\t- [Database](https://github.com/numetriclabz/awesome-db)\n\t\t- [SQLAlchemy](https://github.com/dahlia/awesome-sqlalchemy)\n\t- [Datasets](https://github.com/caesar0301/awesome-public-datasets)\n\t- Deep Learning\n\t\t- [by @ChristosChristofidis](https://github.com/ChristosChristofidis/awesome-deep-learning)\n\t\t- [by @guillaume-chevalier](https://github.com/guillaume-chevalier/awesome-deep-learning-resources)\n\t\t- [by @tigerneil](https://github.com/tigerneil/awesome-deep-rl)\n\t- [Design Patterns](https://github.com/DovAmir/awesome-design-patterns)\n\t- [Dev Env](https://github.com/jondot/awesome-devenv)\n\t- [DevOps](https://github.com/joubertredrat/awesome-devops)\n\t- [Docker](https://github.com/veggiemonk/awesome-docker)\n\t- [Documentation](https://github.com/PharkMillups/beautiful-docs)\n\t- [Dotfiles](https://github.com/webpro/awesome-dotfiles)\n\t- [Electron](https://github.com/sindresorhus/awesome-electron)\n\t- [Emacs](https://github.com/emacs-tw/awesome-emacs)\n\t- [Falsehood](https://github.com/kdeldycke/awesome-falsehood)\n\t- [FIRST Robotics Competition](https://github.com/andrewda/awesome-frc)\n\t- [FluidApp Resources](https://github.com/lborgav/awesome-fluidapp)\n\t- [Flutter](https://github.com/Solido/awesome-flutter)\n\t- [Fonts](https://github.com/brabadu/awesome-fonts)\n\t- [Free Services](https://github.com/ripienaar/free-for-dev)\n\t- Frontend\n\t\t- [by @dypsilon](https://github.com/dypsilon/frontend-dev-bookmarks)\n\t\t- [by @moklick](https://github.com/moklick/frontend-stuff)\n\t- [Game Development](https://github.com/ellisonleao/magictools)\n\t- [Games](https://github.com/leereilly/games)\n\t- GIF\n\t\t- [by @Kikobeats](https://github.com/Kikobeats/awesome-gif)\n\t\t- [by @Syskaw](https://github.com/Syskaw/awesome-gif)\n\t- [Gists](https://github.com/vsouza/awesome-gists)\n\t- [Git](https://github.com/dictcp/awesome-git)\n\t- [GitHub](https://github.com/Kikobeats/awesome-github)\n\t\t- [Browser extensions for GitHub](https://github.com/stefanbuck/awesome-browser-extensions-for-github)\n\t\t- [GitHub - Chinese](https://github.com/AntBranch/awesome-github)\n\t\t- [Toolkits for Github](https://github.com/xohozu/awesome-toolkit)\n\t- [Graph Embedding](https://github.com/benedekrozemberczki/awesome-graph-embedding)\n\t- [GraphQL](https://github.com/chentsulin/awesome-graphql)\n\t- [Growth Hacking](https://github.com/btomashvili/awesome-growth-hacking)\n\t- Guides\n\t\t- [by @narkoz](https://github.com/narkoz/guides)\n\t\t- [by @RichardLitt](https://github.com/RichardLitt/awesome-styleguides)\n\t- [Hacking](https://github.com/carpedm20/awesome-hacking)\n\t- [HTML5](https://github.com/diegocard/awesome-html5)\n\t- [Honeypots](https://github.com/paralax/awesome-honeypots)\n\t- [Hyper](https://github.com/bnb/awesome-hyper)\n\t- [Incident Response](https://github.com/meirwah/awesome-incident-response)\n\t- [Images](https://github.com/heyalexej/awesome-images)\n\t- [Internet of Things (IOT)](https://github.com/HQarroum/awesome-iot)\n\t- [iOS](https://github.com/vsouza/awesome-ios)\n\t\t- [Cocoa Controls](https://github.com/v-braun/awesome-cocoa)\n\t\t- [Open Source Apps](https://github.com/dkhamsing/open-source-ios-apps)\n\t\t- [UI](https://github.com/cjwirth/awesome-ios-ui)\n\t- [JSON](https://github.com/burningtree/awesome-json)\n\t- [JVM](https://github.com/deephacks/awesome-jvm)\n\t- [Koans](https://github.com/ahmdrefat/awesome-koans)\n\t- [Laravel](https://github.com/chiraggude/awesome-laravel)\n\t- [Leadership and Management](https://github.com/LappleApple/awesome-leading-and-managing)\n\t- [Lego](https://github.com/adius/awesome-lego)\n\t- [Linux Containers](https://github.com/Friz-zy/awesome-linux-containers)\n\t- [Linux resources](https://github.com/itech001/awesome-linux-resources)\n\t- Lists\n\t\t- [by @bayandin](https://github.com/bayandin/awesome-awesomeness)\n\t\t- [by @jnv](https://github.com/jnv/lists)\n\t\t- [by @sindresorhus](https://github.com/sindresorhus/awesome)\n\t- [Mac]\n\t\t- [by @xyNNN](https://github.com/xyNNN/awesome-mac)\n\t\t- [by @justin-j](https://github.com/justin-j/awesome-mac-apps)\n\t- [Machine Learning](https://github.com/josephmisiti/awesome-machine-learning)\n\t- [Malware Analysis](https://github.com/rshipp/awesome-malware-analysis)\n\t- [Material Design](https://github.com/sachin1092/awesome-material)\n\t- [Matlab](https://github.com/mikecroucher/awesome-MATLAB)\n\t- [Mental Health](https://github.com/dreamingechoes/awesome-mental-health)\n\t- [micro:bit](https://github.com/carlosperate/awesome-microbit)\n\t- [Mobile marketing and development](https://github.com/alec-c4/awesome-mobile)\n\t- [Monitoring](https://github.com/crazy-canux/awesome-monitoring)\n\t- [Motion Design for Web](https://github.com/lucasmaiaesilva/awesome-motion-design-web)\n\t- [Nginx](https://github.com/fcambus/nginx-resources)\n\t- Newsletters\n\t\t- [by @vredniy](https://github.com/vredniy/awesome-newsletters)\n\t\t- [by @webpro](https://github.com/webpro/awesome-newsletters)\n\t\t- [by @mpron](https://github.com/mpron/awesome-newsletters)\n\t- [No Login Web Apps](https://github.com/aviaryan/awesome-no-login-web-apps)\n\t- [Open Science](https://github.com/silky/awesome-open-science)\n\t- [Open Source Photography](https://github.com/ibaaj/awesome-OpenSourcePhotography)\n\t- [Papers](https://github.com/papers-we-love/papers-we-love)\n\t- [Podcasts](https://github.com/Ghosh/awesome-podcasts)\n\t- [Pipelines](https://github.com/pditommaso/awesome-pipeline)\n\t- [Product Manager](https://github.com/hugo53/awesome-ProductManager)\n\t- Protocols\n\t\t- [OSC](https://github.com/amir-arad/awesome-osc) (open sound control)\n\t- [Pentest Cheat Sheets](https://github.com/coreb1t/awesome-pentest-cheat-sheets)\n\t- [Pentester](https://github.com/m1guelpf/awesome-pentester)\n\t- [Quick Look Plugins](https://github.com/sindresorhus/quick-look-plugins)\n\t- [Random-Forest](https://github.com/kjw0612/awesome-random-forest)\n\t- [RaspberryPI](https://github.com/blackout314/awesome-raspberry-pi)\n\t- [React Native](https://github.com/jondot/awesome-react-native)\n\t- [README](https://github.com/matiassingers/awesome-readme)\n\t- [Regex](https://github.com/aloisdg/awesome-regex)\n\t- [Remote Job](https://github.com/lukasz-madon/awesome-remote-job)\n\t- [Remote Work](https://github.com/hugo53/awesome-RemoteWork)\n\t- [REST](https://github.com/marmelab/awesome-rest)\n\t- [Robotics](https://github.com/Kiloreux/awesome-robotics)\n\t- [RNN](https://github.com/kjw0612/awesome-rnn)\n\t- [Scalability](https://github.com/binhnguyennus/awesome-scalability)\n\t- [Science Fiction](https://github.com/sindresorhus/awesome-scifi)\n\t- Search Engine Optimization (SEO)\n\t\t- [by @marcobiedermann](https://github.com/marcobiedermann/search-engine-optimization)\n\t\t- [by @sneg55](https://github.com/sneg55/curatedseotools)\n\t\t- [by @teles](https://github.com/teles/awesome-seo)\n\t- [Security](https://github.com/sbilly/awesome-security)\n\t- [Selfhosted](https://github.com/Kickball/awesome-selfhosted)\n\t- [Serverless](https://github.com/anaibol/awesome-serverless)\n\t- [Service Fabric](https://github.com/lawrencegripper/awesome-servicefabric)\n\t- [Services Engineering](https://github.com/mmcgrana/services-engineering)\n\t- [Sheet Music](https://github.com/adius/awesome-sheet-music)\n\t- [Slack](https://github.com/matiassingers/awesome-slack)\n\t- [Sound](https://github.com/hwclass/awesome-sound)\n\t- [Space](https://github.com/elburz/awesome-space)\n\t\t- [Books and manuals](https://github.com/Hunter-Github/awesome-space-books)\n\t- [Speech and Natural Language Processing](https://github.com/edobashira/speech-language-processing)\n\t\t- [NLP with Ruby](https://github.com/arbox/nlp-with-ruby)\n\t- [Sphinx Documentation](https://github.com/yoloseem/awesome-sphinxdoc)\n\t- [Startup](https://github.com/KrishMunot/awesome-startup)\n\t- [Static Analysis](https://github.com/mre/awesome-static-analysis/)\n\t- [Styleguides](https://github.com/RichardLitt/awesome-styleguides)\n\t- [Sublime Text](https://github.com/dreikanter/sublime-bookmarks)\n\t- [SVG](https://github.com/willianjusten/awesome-svg)\n\t- [Swedish](https://github.com/gurre/awesome-swedish-opensource)\n\t- [Sysadmin](https://github.com/kahun/awesome-sysadmin)\n\t- [Tailwind CSS](https://github.com/merchedhq/awesome-tailwindcss)\n\t- [Talks](https://github.com/JanVanRyswyck/awesome-talks)\n\t\t- [Gaming](https://github.com/hzoo/awesome-gametalks)\n\t- [Telegram](https://github.com/ebertti/awesome-telegram)\n\t- [Test Automation](https://github.com/atinfo/awesome-test-automation)\n\t- [Tools](https://github.com/cjbarber/ToolsOfTheTrade)\n\t- [Twilio](https://github.com/Twilio-org/awesome-twilio)\n\t- [Unity](https://github.com/RyanNielson/awesome-unity)\n\t- [UI Styleguide](https://github.com/kevinwuhoo/ui-styleguides)\n\t\t- [UI Components for Styleguide](https://github.com/anubhavsrivastava/awesome-ui-component-library)\n\t- [UNIX](https://github.com/sirredbeard/Awesome-UNIX)\n\t- [Vagrant](https://github.com/iJackUA/awesome-vagrant)\n\t- Vim\n\t\t- [by @akrawchyk](https://github.com/akrawchyk/awesome-vim)\n\t\t- [by @matteocrippa](https://github.com/matteocrippa/awesome-vim)\n\t- [Web Performance Optimization](https://github.com/davidsonfellipe/awesome-wpo)\n\t- [WebComponents](https://github.com/mateusortiz/webcomponents-the-right-way)\n\t- [Wordpress](https://github.com/miziomon/awesome-wordpress)\n\t- [Workshops](https://github.com/therebelrobot/awesome-workshopper)\n\t- [Xamarin](https://github.com/benoitjadinon/awesome-xamarin)\n\t- XMPP\n\t\t- [Ejabberd](https://github.com/shantanu-deshmukh/awesome-ejabberd)\n\t- [Typography](https://github.com/Jolg42/awesome-typography)\n\n## License\n\n[![Creative Commons License](http://i.creativecommons.org/l/by/4.0/88x31.png)](https://creativecommons.org/licenses/by/4.0/)\n\nThis work is licensed under a [Creative Commons Attribution 4.0 International License](http://creativecommons.org/licenses/by/4.0/).\n"
  },
  {
    "repo": "gitlabhq/gitlabhq",
    "content": "# GitLab\n\n## Test coverage\n\n- [![Ruby coverage](https://gitlab.com/gitlab-org/gitlab-ce/badges/master/coverage.svg?job=coverage)](https://gitlab-org.gitlab.io/gitlab-ce/coverage-ruby) Ruby\n- [![JavaScript coverage](https://gitlab.com/gitlab-org/gitlab-ce/badges/master/coverage.svg?job=karma)](https://gitlab-org.gitlab.io/gitlab-ce/coverage-javascript) JavaScript\n\n## Canonical source\n\nThe canonical source of GitLab Community Edition is [hosted on GitLab.com](https://gitlab.com/gitlab-org/gitlab-ce/).\n\n## Open source software to collaborate on code\n\nTo see how GitLab looks please see the [features page on our website](https://about.gitlab.com/features/).\n\n- Manage Git repositories with fine grained access controls that keep your code secure\n- Perform code reviews and enhance collaboration with merge requests\n- Complete continuous integration (CI) and CD pipelines to builds, test, and deploy your applications\n- Each project can also have an issue tracker, issue board, and a wiki\n- Used by more than 100,000 organizations, GitLab is the most popular solution to manage Git repositories on-premises\n- Completely free and open source (MIT Expat license)\n\n## Hiring\n\nWe're hiring developers, support people, and production engineers all the time, please see our [jobs page](https://about.gitlab.com/jobs/).\n\n## Editions\n\nThere are two editions of GitLab:\n\n- GitLab Community Edition (CE) is available freely under the MIT Expat license.\n- GitLab Enterprise Edition (EE) includes [extra features](https://about.gitlab.com/pricing/#compare-options) that are more useful for organizations with more than 100 users. To use EE and get official support please [become a subscriber](https://about.gitlab.com/pricing/).\n\n## Website\n\nOn [about.gitlab.com](https://about.gitlab.com/) you can find more information about:\n\n- [Subscriptions](https://about.gitlab.com/pricing/)\n- [Consultancy](https://about.gitlab.com/consultancy/)\n- [Community](https://about.gitlab.com/community/)\n- [Hosted GitLab.com](https://about.gitlab.com/gitlab-com/) use GitLab as a free service\n- [GitLab Enterprise Edition](https://about.gitlab.com/features/#enterprise) with additional features aimed at larger organizations.\n- [GitLab CI](https://about.gitlab.com/gitlab-ci/) a continuous integration (CI) server that is easy to integrate with GitLab.\n\n## Requirements\n\nPlease see the [requirements documentation](doc/install/requirements.md) for system requirements and more information about the supported operating systems.\n\n## Installation\n\nThe recommended way to install GitLab is with the [Omnibus packages](https://about.gitlab.com/downloads/) on our package server.\nCompared to an installation from source, this is faster and less error prone.\nJust select your operating system, download the respective package (Debian or RPM) and install it using the system's package manager.\n\nThere are various other options to install GitLab, please refer to the [installation page on the GitLab website](https://about.gitlab.com/installation/) for more information.\n\nYou can access a new installation with the login **`root`** and password **`5iveL!fe`**, after login you are required to set a unique password.\n\n## Contributing\n\nGitLab is an open source project and we are very happy to accept community contributions. Please refer to [Contributing to GitLab page](https://about.gitlab.com/contributing/) for more details.\n\n## Licensing\n\nGitLab Community Edition (CE) is available freely under the MIT Expat license.\n\nAll third party components incorporated into the GitLab Software are licensed under the original license provided by the owner of the applicable component.\n\nAll Documentation content that resides under the `doc/` directory of this repository is licensed under Creative Commons: CC BY-SA 4.0.\n\n## Install a development environment\n\nTo work on GitLab itself, we recommend setting up your development environment with [the GitLab Development Kit](https://gitlab.com/gitlab-org/gitlab-development-kit).\nIf you do not use the GitLab Development Kit you need to install and setup all the dependencies yourself, this is a lot of work and error prone.\nOne small thing you also have to do when installing it yourself is to copy the example development unicorn configuration file:\n\n    cp config/unicorn.rb.example.development config/unicorn.rb\n\nInstructions on how to start GitLab and how to run the tests can be found in the [getting started section of the GitLab Development Kit](https://gitlab.com/gitlab-org/gitlab-development-kit#getting-started).\n\n## Software stack\n\nGitLab is a Ruby on Rails application that runs on the following software:\n\n- Ubuntu/Debian/CentOS/RHEL/OpenSUSE\n- Ruby (MRI) 2.4\n- Git 2.8.4+\n- Redis 2.8+\n- PostgreSQL (preferred) or MySQL\n\nFor more information please see the [architecture documentation](https://docs.gitlab.com/ce/development/architecture.html).\n\n## UX design\n\nPlease adhere to the [UX Guide](doc/development/ux_guide/index.md) when creating designs and implementing code.\n\n## Third-party applications\n\nThere are a lot of [third-party applications integrating with GitLab](https://about.gitlab.com/applications/). These include GUI Git clients, mobile applications and API wrappers for various languages.\n\n## GitLab release cycle\n\nFor more information about the release process see the [release documentation](https://gitlab.com/gitlab-org/release-tools/blob/master/README.md).\n\n## Upgrading\n\nFor upgrading information please see our [update page](https://about.gitlab.com/update/).\n\n## Documentation\n\nAll documentation can be found on [docs.gitlab.com/ce/](https://docs.gitlab.com/ce/).\n\n## Getting help\n\nPlease see [Getting help for GitLab](https://about.gitlab.com/getting-help/) on our website for the many options to get help.\n\n## Why?\n\n[Read here](https://about.gitlab.com/why/)\n\n## Is it any good?\n\n[Yes](https://news.ycombinator.com/item?id=3067434)\n\n## Is it awesome?\n\n[These people](https://twitter.com/gitlab/likes) seem to like it.\n\n"
  },
  {
    "repo": "huginn/huginn",
    "content": "![Huginn](https://raw.github.com/huginn/huginn/master/media/huginn-logo.png \"Your agents are standing by.\")\n\n-----\n\n## What is Huginn?\n\nHuginn is a system for building agents that perform automated tasks for you online.  They can read the web, watch for events, and take actions on your behalf.  Huginn's Agents create and consume events, propagating them along a directed graph.  Think of it as a hackable version of IFTTT or Zapier on your own server.  You always know who has your data.  You do.\n\n![the origin of the name](https://raw.githubusercontent.com/huginn/huginn/master/doc/imgs/the-name.png)\n\n#### Here are some of the things that you can do with Huginn:\n\n* Track the weather and get an email when it's going to rain (or snow) tomorrow (\"Don't forget your umbrella!\")\n* List terms that you care about and receive emails when their occurrence on Twitter changes.  (For example, want to know when something interesting has happened in the world of Machine Learning?  Huginn will watch the term \"machine learning\" on Twitter and tell you when there is a spike in discussion.)\n* Watch for air travel or shopping deals\n* Follow your project names on Twitter and get updates when people mention them\n* Scrape websites and receive emails when they change\n* Connect to Adioso, HipChat, Basecamp, Growl, FTP, IMAP, Jabber, JIRA, MQTT, nextbus, Pushbullet, Pushover, RSS, Bash, Slack, StubHub, translation APIs, Twilio, Twitter, Wunderground, and Weibo, to name a few.\n* Send digest emails with things that you care about at specific times during the day\n* Track counts of high frequency events and send an SMS within moments when they spike, such as the term \"san francisco emergency\"\n* Send and receive WebHooks\n* Run custom JavaScript or CoffeeScript functions\n* Track your location over time\n* Create Amazon Mechanical Turk workflows as the inputs, or outputs, of agents (the Amazon Turk Agent is called the \"HumanTaskAgent\"). For example: \"Once a day, ask 5 people for a funny cat photo; send the results to 5 more people to be rated; send the top-rated photo to 5 people for a funny caption; send to 5 final people to rate for funniest caption; finally, post the best captioned photo on my blog.\"\n\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/huginn/huginn?utm_source=badge\u0026utm_medium=badge\u0026utm_campaign=pr-badge\u0026utm_content=badge) [![Changelog #199](https://img.shields.io/badge/changelog-%23199-lightgrey.svg)](https://changelog.com/199)\n\nJoin us in our [Gitter room](https://gitter.im/huginn/huginn) to discuss the project.\n\n### Join us!\n\nWant to help with Huginn?  All contributions are encouraged!  You could make UI improvements, [add new Agents](https://github.com/huginn/huginn/wiki/Creating-a-new-agent), write [documentation and tutorials](https://github.com/huginn/huginn/wiki), or try tackling [issues tagged with #help-wanted](https://github.com/huginn/huginn/issues?direction=desc\u0026labels=help-wanted\u0026page=1\u0026sort=created\u0026state=open).  Please fork, add specs, and send pull requests!\n\nReally want a fix or feature? Want to solve some community issues and earn some extra coffee money? Take a look at the [current bounties on Bountysource](https://www.bountysource.com/trackers/282580-huginn).\n\nHave an awesome idea but not feeling quite up to contributing yet? Head over to our [Official 'suggest an agent' thread ](https://github.com/huginn/huginn/issues/353) and tell us!\n\n## Examples\n\nPlease checkout the [Huginn Introductory Screencast](http://vimeo.com/61976251)!\n\nAnd now, some example screenshots.  Below them are instructions to get you started.\n\n![Example list of agents](https://raw.githubusercontent.com/huginn/huginn/master/doc/imgs/your-agents.png)\n\n![Event flow diagram](https://raw.githubusercontent.com/huginn/huginn/master/doc/imgs/diagram.png)\n\n![Detecting peaks in Twitter](https://raw.githubusercontent.com/huginn/huginn/master/doc/imgs/peaks.png)\n\n![Logging your location over time](https://raw.githubusercontent.com/huginn/huginn/master/doc/imgs/my-locations.png)\n\n![Making a new agent](https://raw.githubusercontent.com/huginn/huginn/master/doc/imgs/new-agent.png)\n\n## Getting Started\n\n### Docker\n\nThe quickest and easiest way to check out Huginn is to use the official Docker image. Have a look at the [documentation](https://github.com/huginn/huginn/blob/master/doc/docker/install.md).\n\n### Local Installation\n\nIf you just want to play around, you can simply fork this repository, then perform the following steps:\n\n* Run `git remote add upstream https://github.com/huginn/huginn.git` to add the main repository as a remote for your fork.\n* Copy `.env.example` to `.env` (`cp .env.example .env`) and edit `.env`, at least updating the `APP_SECRET_TOKEN` variable.\n* Make sure that you have MySQL or PostgreSQL installed. (On a Mac, the easiest way is with [Homebrew](http://brew.sh/). If you're going to use PostgreSQL, you'll need to prepend all commands below with `DATABASE_ADAPTER=postgresql`.)\n* Run `bundle` to install dependencies\n* Run `bundle exec rake db:create`, `bundle exec rake db:migrate`, and then `bundle exec rake db:seed` to create a development database with some example Agents.\n* Run `bundle exec foreman start`, visit [http://localhost:3000/][localhost], and login with the username of `admin` and the password of `password`.\n* Setup some Agents!\n* Read the [wiki][wiki] for usage examples and to get started making new Agents.\n* Periodically run `git fetch upstream` and then `git checkout master \u0026\u0026 git merge upstream/master` to merge in the newest version of Huginn.\n\nNote: By default, emails are intercepted in the `development` Rails environment, which is what you just setup.  You can view\nthem at [http://localhost:3000/letter_opener](http://localhost:3000/letter_opener). If you'd like to send real emails via SMTP when playing\nwith Huginn locally, set `SEND_EMAIL_IN_DEVELOPMENT` to `true` in your `.env` file.\n\nIf you need more detailed instructions, see the [Novice setup guide][novice-setup-guide].\n\n[localhost]: http://localhost:3000/\n[wiki]: https://github.com/huginn/huginn/wiki\n[novice-setup-guide]: https://github.com/huginn/huginn/wiki/Novice-setup-guide\n\n### Develop\n\nAll agents have specs! And there's also acceptance tests that simulate running Huginn in a headless browser.\n\n* Install PhantomJS 2.1.1 or greater:\n  * Using [Node Package Manager](https://www.npmjs.com/): `npm install phantomjs`\n  * Using [Homebrew](http://brew.sh/) on OSX `brew install phantomjs`\n* Run all specs with `bundle exec rspec`\n* Run a specific spec with `bundle exec rspec path/to/specific/test_spec.rb`.\n* Read more about rspec for rails [here](https://github.com/rspec/rspec-rails).\n\n## Using Huginn Agent gems\n\nHuginn Agents can now be written as external gems and be added to your Huginn installation with the `ADDITIONAL_GEMS` environment variable. See the `Additional Agent gems` section of `.env.example` for more information.\n\nIf you'd like to write your own Huginn Agent Gem, please see [huginn_agent](https://github.com/huginn/huginn_agent).\n\nOur general intention is to encourage complex and specific Agents to be written as Gems, while continuing to add new general-purpose Agents to the core Huginn repository.\n\n## Deployment\n\nPlease see [the Huginn Wiki](https://github.com/huginn/huginn/wiki#deploying-huginn) for detailed deployment strategies for different providers.\n\n### Heroku\n\nTry Huginn on Heroku: [![Deploy](https://www.herokucdn.com/deploy/button.png)](https://heroku.com/deploy) (Takes a few minutes to setup. Read the [documentation](https://github.com/huginn/huginn/blob/master/doc/heroku/install.md) while you are waiting and be sure to click 'View it' after launch!)\n\nHuginn launches on the free version of Heroku [with significant limitations](https://github.com/huginn/huginn/blob/master/doc/heroku/install.md). For non-experimental use, we strongly recommend Heroku's 1GB paid plan or our Docker container.\n\n### OpenShift Online (v3)\n\nTry Huginn on OpenShift Online (v3): `oc new-app -f https://raw.githubusercontent.com/huginn/huginn/master/openshift/templates/huginn-mysql.json` or `oc new-app -f https://raw.githubusercontent.com/huginn/huginn/master/openshift/templates/huginn-postgresql.json`. You can also use the web console to import either json file by going to \"Add to Project\" -\u003e \"Import YAML/JSON\".\n\nIf you are on the Starter plan, make sure to follow the [guide](https://docs.openshift.com/online/getting_started/beyond_the_basics.html#btb-creating-a-new-application-from-source-code) to remove any existing application.\n\n### Manual installation on any server\n\nHave a look at the [installation guide](https://github.com/huginn/huginn/blob/master/doc/manual/README.md).\n\n### Optional Setup\n\n#### Setup for private development\n\nSee [private development instructions](https://github.com/huginn/huginn/wiki/Private-development-instructions) on the wiki.\n\n#### Enable the WeatherAgent\n\nIn order to use the WeatherAgent you need an [API key with Wunderground](http://www.wunderground.com/weather/api/). Signup for one and then change the value of `api_key: your-key` in your seeded WeatherAgent.\n\nNote, Wunderground no longer offers free API keys. You can still use the WeatherAgent by setting the service key to darksky, and getting an [API key from DarkSky](https://darksky.net/dev).\n\n#### Disable SSL\n\nWe assume your deployment will run over SSL. This is a very good idea! However, if you wish to turn this off, you'll probably need to edit `config/initializers/devise.rb` and modify the line containing `config.rememberable_options = { :secure =\u003e true }`.  You will also need to edit `config/environments/production.rb` and modify the value of `config.force_ssl`.\n\n## License\n\nHuginn is provided under the MIT License.\n\nHuginn was originally created by [@cantino](https://github.com/cantino) in 2013. Since then, many people's dedicated contributions have made it what it is today.\n\n[![Build Status](https://travis-ci.org/huginn/huginn.svg)](https://travis-ci.org/huginn/huginn) [![Coverage Status](https://coveralls.io/repos/cantino/huginn/badge.svg)](https://coveralls.io/r/cantino/huginn) [![Dependency Status](https://gemnasium.com/huginn/huginn.svg)](https://gemnasium.com/huginn/huginn) [![Bountysource](https://www.bountysource.com/badge/tracker?tracker_id=282580)](https://www.bountysource.com/trackers/282580-huginn?utm_source=282580\u0026utm_medium=shield\u0026utm_campaign=TRACKER_BADGE)\n"
  },
  {
    "repo": "freeCodeCamp/devdocs",
    "content": "# [DevDocs](https://devdocs.io) [![Build Status](https://travis-ci.org/freeCodeCamp/devdocs.svg?branch=master)](https://travis-ci.org/freeCodeCamp/devdocs)\n\nDevDocs combines multiple API documentations in a fast, organized, and searchable interface.\n\n* Created by [Thibaut Courouble](https://thibaut.me)\n\nKeep track of development news:\n\n* Join the contributor chat room on [Gitter](https://gitter.im/FreeCodeCamp/DevDocs)\n* Watch the repository on [GitHub](https://github.com/freeCodeCamp/devdocs/subscription)\n* Follow [@DevDocs](https://twitter.com/DevDocs) on Twitter\n* Join the [mailing list](https://groups.google.com/d/forum/devdocs)\n\n**Table of Contents:** [Quick Start](#quick-start) · [Vision](#vision) · [App](#app) · [Scraper](#scraper) · [Commands](#available-commands) · [Contributing](#contributing) · [License](#copyright--license) · [Questions?](#questions)\n\n## Quick Start\n\nUnless you wish to contribute to the project, I recommend using the hosted version at [devdocs.io](https://devdocs.io). It's up-to-date and works offline out-of-the-box.\n\nDevDocs is made of two pieces: a Ruby scraper that generates the documentation and metadata, and a JavaScript app powered by a small Sinatra app.\n\nDevDocs requires Ruby 2.5.1, libcurl, and a JavaScript runtime supported by [ExecJS](https://github.com/rails/execjs#readme) (included in OS X and Windows; [Node.js](https://nodejs.org/en/) on Linux). Once you have these installed, run the following commands:\n\n```\ngit clone https://github.com/freeCodeCamp/devdocs.git \u0026\u0026 cd devdocs\ngem install bundler\nbundle install\nbundle exec thor docs:download --default\nbundle exec rackup\n```\n\nFinally, point your browser at [localhost:9292](http://localhost:9292) (the first request will take a few seconds to compile the assets). You're all set.\n\nThe `thor docs:download` command is used to download pre-generated documentations from DevDocs's servers (e.g. `thor docs:download html css`). You can see the list of available documentations and versions by running `thor docs:list`. To update all downloaded documentations, run `thor docs:download --installed`.\n\n**Note:** there is currently no update mechanism other than `git pull origin master` to update the code and `thor docs:download --installed` to download the latest version of the docs. To stay informed about new releases, be sure to [watch](https://github.com/freeCodeCamp/devdocs/subscription) this repository.\n\nAlternatively, DevDocs may be started as a Docker container:\n\n```\n# First, build the image\ngit clone https://github.com/freeCodeCamp/devdocs.git \u0026\u0026 cd devdocs\ndocker build -t thibaut/devdocs .\n\n# Finally, start a DevDocs container (access http://localhost:9292)\ndocker run --name devdocs -d -p 9292:9292 thibaut/devdocs\n```\n\n## Vision\n\nDevDocs aims to make reading and searching reference documentation fast, easy and enjoyable.\n\nThe app's main goals are to: keep load times as short as possible; improve the quality, speed, and order of search results; maximize the use of caching and other performance optimizations; maintain a clean and readable user interface; be fully functional offline; support full keyboard navigation; reduce “context switch” by using a consistent typography and design across all documentations; reduce clutter by focusing on a specific category of content (API/reference) and indexing only the minimum useful to most developers.\n\n**Note:** DevDocs is neither a programming guide nor a search engine. All our content is pulled from third-party sources and the project doesn't intend to compete with full-text search engines. Its backbone is metadata; each piece of content is identified by a unique, \"obvious\" and short string. Tutorials, guides and other content that don't meet this requirement are outside the scope of the project.\n\n## App\n\nThe web app is all client-side JavaScript, written in [CoffeeScript](http://coffeescript.org), and powered by a small [Sinatra](http://www.sinatrarb.com)/[Sprockets](https://github.com/rails/sprockets) application. It relies on files generated by the [scraper](#scraper).\n\nMany of the code's design decisions were driven by the fact that the app uses XHR to load content directly into the main frame. This includes stripping the original documents of most of their HTML markup (e.g. scripts and stylesheets) to avoid polluting the main frame, and prefixing all CSS class names with an underscore to prevent conflicts.\n\nAnother driving factor is performance and the fact that everything happens in the browser. `applicationCache` (which comes with its own set of constraints) and `localStorage` are used to speed up the boot time, while memory consumption is kept in check by allowing the user to pick his/her own set of documentations. The search algorithm is kept simple because it needs to be fast even searching through 100,000 strings.\n\nDevDocs being a developer tool, the browser requirements are high:\n\n* Recent versions of Firefox, Chrome, or Opera\n* Safari 9.1+\n* Edge 16+\n* iOS 10+\n\nThis allows the code to take advantage of the latest DOM and HTML5 APIs and make developing DevDocs a lot more fun!\n\n## Scraper\n\nThe scraper is responsible for generating the documentation and index files (metadata) used by the [app](#app). It's written in Ruby under the `Docs` module.\n\nThere are currently two kinds of scrapers: `UrlScraper` which downloads files via HTTP and `FileScraper` which reads them from the local filesystem. They both make copies of HTML documents, recursively following links that match a set of rules and applying all sorts of modifications along the way, in addition to building an index of the files and their metadata. Documents are parsed using [Nokogiri](http://nokogiri.org).\n\nModifications made to each document include:\n\n* removing content such as the document structure (`\u003chtml\u003e`, `\u003chead\u003e`, etc.), comments, empty nodes, etc.\n* fixing links (e.g. to remove duplicates)\n* replacing all external (not scraped) URLs with their fully qualified counterpart\n* replacing all internal (scraped) URLs with their unqualified and relative counterpart\n* adding content, such as a title and link to the original document\n\nThese modifications are applied via a set of filters using the [HTML::Pipeline](https://github.com/jch/html-pipeline) library. Each scraper includes filters specific to itself, one of which is tasked with figuring out the pages' metadata.\n\nThe end result is a set of normalized HTML partials and two JSON files (index + offline data). Because the index files are loaded separately by the [app](#app) following the user's preferences, the scraper also creates a JSON manifest file containing information about the documentations currently available on the system (such as their name, version, update date, etc.).\n\nMore information about scrapers and filters is available on the [wiki](https://github.com/freeCodeCamp/devdocs/wiki).\n\n## Available Commands\n\nThe command-line interface uses [Thor](http://whatisthor.com). To see all commands and options, run `thor list` from the project's root.\n\n```\n# Server\nrackup              # Start the server (ctrl+c to stop)\nrackup --help       # List server options\n\n# Docs\nthor docs:list      # List available documentations\nthor docs:download  # Download one or more documentations\nthor docs:manifest  # Create the manifest file used by the app\nthor docs:generate  # Generate/scrape a documentation\nthor docs:page      # Generate/scrape a documentation page\nthor docs:package   # Package a documentation for use with docs:download\nthor docs:clean     # Delete documentation packages\n\n# Console\nthor console        # Start a REPL\nthor console:docs   # Start a REPL in the \"Docs\" module\nNote: tests can be run quickly from within the console using the \"test\" command. Run \"help test\"\nfor usage instructions.\n\n# Tests\nthor test:all       # Run all tests\nthor test:docs      # Run \"Docs\" tests\nthor test:app       # Run \"App\" tests\n\n# Assets\nthor assets:compile # Compile assets (not required in development mode)\nthor assets:clean   # Clean old assets\n```\n\nIf multiple versions of Ruby are installed on your system, commands must be run through `bundle exec`.\n\n## Contributing\n\nContributions are welcome. Please read the [contributing guidelines](https://github.com/freeCodeCamp/devdocs/blob/master/.github/CONTRIBUTING.md).\n\nDevDocs's own documentation is available on the [wiki](https://github.com/freeCodeCamp/devdocs/wiki).\n\n## Copyright / License\n\nCopyright 2013-2018 Thibaut Courouble and [other contributors](https://github.com/freeCodeCamp/devdocs/graphs/contributors)\n\nThis software is licensed under the terms of the Mozilla Public License v2.0. See the [COPYRIGHT](https://github.com/freeCodeCamp/devdocs/blob/master/COPYRIGHT) and [LICENSE](https://github.com/freeCodeCamp/devdocs/blob/master/LICENSE) files.\n\nPlease do not use the name DevDocs to endorse or promote products derived from this software without my permission, except as may be necessary to comply with the notice/attribution requirements.\n\nI also wish that any documentation file generated using this software be attributed to DevDocs. Let's be fair to all contributors by giving credit where credit's due. Thanks!\n\n## Questions?\n\nIf you have any questions, please feel free to ask them on the [mailing list](https://groups.google.com/d/forum/devdocs).\n"
  },
  {
    "repo": "plataformatec/devise",
    "content": "![Devise Logo](https://raw.github.com/plataformatec/devise/master/devise.png)\n\nBy [Plataformatec](http://plataformatec.com.br/).\n\n[![Build Status](https://api.travis-ci.org/plataformatec/devise.svg?branch=master)](http://travis-ci.org/plataformatec/devise)\n[![Code Climate](https://codeclimate.com/github/plataformatec/devise.svg)](https://codeclimate.com/github/plataformatec/devise)\n\nThis README is [also available in a friendly navigable format](http://devise.plataformatec.com.br/).\n\nDevise is a flexible authentication solution for Rails based on Warden. It:\n\n* Is Rack based;\n* Is a complete MVC solution based on Rails engines;\n* Allows you to have multiple models signed in at the same time;\n* Is based on a modularity concept: use only what you really need.\n\nIt's composed of 10 modules:\n\n* [Database Authenticatable](http://www.rubydoc.info/github/plataformatec/devise/master/Devise/Models/DatabaseAuthenticatable): hashes and stores a password in the database to validate the authenticity of a user while signing in. The authentication can be done both through POST requests or HTTP Basic Authentication.\n* [Omniauthable](http://www.rubydoc.info/github/plataformatec/devise/master/Devise/Models/Omniauthable): adds OmniAuth (https://github.com/omniauth/omniauth) support.\n* [Confirmable](http://www.rubydoc.info/github/plataformatec/devise/master/Devise/Models/Confirmable): sends emails with confirmation instructions and verifies whether an account is already confirmed during sign in.\n* [Recoverable](http://www.rubydoc.info/github/plataformatec/devise/master/Devise/Models/Recoverable): resets the user password and sends reset instructions.\n* [Registerable](http://www.rubydoc.info/github/plataformatec/devise/master/Devise/Models/Registerable): handles signing up users through a registration process, also allowing them to edit and destroy their account.\n* [Rememberable](http://www.rubydoc.info/github/plataformatec/devise/master/Devise/Models/Rememberable): manages generating and clearing a token for remembering the user from a saved cookie.\n* [Trackable](http://www.rubydoc.info/github/plataformatec/devise/master/Devise/Models/Trackable): tracks sign in count, timestamps and IP address.\n* [Timeoutable](http://www.rubydoc.info/github/plataformatec/devise/master/Devise/Models/Timeoutable): expires sessions that have not been active in a specified period of time.\n* [Validatable](http://www.rubydoc.info/github/plataformatec/devise/master/Devise/Models/Validatable): provides validations of email and password. It's optional and can be customized, so you're able to define your own validations.\n* [Lockable](http://www.rubydoc.info/github/plataformatec/devise/master/Devise/Models/Lockable): locks an account after a specified number of failed sign-in attempts. Can unlock via email or after a specified time period.\n\n## Table of Contents\n\n\u003c!-- TOC depthFrom:1 depthTo:6 withLinks:1 orderedList:0 --\u003e\n\n- [Information](#information)\n\t- [The Devise wiki](#the-devise-wiki)\n\t- [Bug reports](#bug-reports)\n\t- [StackOverflow and Mailing List](#stackoverflow-and-mailing-list)\n\t- [RDocs](#rdocs)\n\t- [Example applications](#example-applications)\n\t- [Extensions](#extensions)\n\t- [Contributing](#contributing)\n- [Starting with Rails?](#starting-with-rails)\n- [Getting started](#getting-started)\n\t- [Controller filters and helpers](#controller-filters-and-helpers)\n\t- [Configuring Models](#configuring-models)\n\t- [Strong Parameters](#strong-parameters)\n\t- [Configuring views](#configuring-views)\n\t- [Configuring controllers](#configuring-controllers)\n\t- [Configuring routes](#configuring-routes)\n\t- [I18n](#i18n)\n\t- [Test helpers](#test-helpers)\n\t- [Controller tests](#controller-tests)\n\t- [Integration tests](#integration-tests)\n\t- [OmniAuth](#omniauth)\n\t- [Configuring multiple models](#configuring-multiple-models)\n\t- [ActiveJob Integration](#activejob-integration)\n\t- [Password reset tokens and Rails logs](#password-reset-tokens-and-rails-logs)\n\t- [Other ORMs](#other-orms)\n- [Additional information](#additional-information)\n\t- [Heroku](#heroku)\n\t- [Warden](#warden)\n\t- [Contributors](#contributors)\n- [License](#license)\n\n\u003c!-- /TOC --\u003e\n\n\n\n## Information\n\n### The Devise wiki\n\nThe Devise Wiki has lots of additional information about Devise including many \"how-to\" articles and answers to the most frequently asked questions. Please browse the Wiki after finishing this README:\n\nhttps://github.com/plataformatec/devise/wiki\n\n### Bug reports\n\nIf you discover a problem with Devise, we would like to know about it. However, we ask that you please review these guidelines before submitting a bug report:\n\nhttps://github.com/plataformatec/devise/wiki/Bug-reports\n\nIf you have discovered a security related bug, please do *NOT* use the GitHub issue tracker. Send an email to opensource@plataformatec.com.br.\n\n### StackOverflow and Mailing List\n\nIf you have any questions, comments, or concerns, please use StackOverflow instead of the GitHub issue tracker:\n\nhttp://stackoverflow.com/questions/tagged/devise\n\nThe deprecated mailing list can still be read on\n\nhttps://groups.google.com/group/plataformatec-devise\n\n### RDocs\n\nYou can view the Devise documentation in RDoc format here:\n\nhttp://rubydoc.info/github/plataformatec/devise/master/frames\n\nIf you need to use Devise with previous versions of Rails, you can always run \"gem server\" from the command line after you install the gem to access the old documentation.\n\n### Example applications\n\nThere are a few example applications available on GitHub that demonstrate various features of Devise with different versions of Rails. You can view them here:\n\nhttps://github.com/plataformatec/devise/wiki/Example-Applications\n\n### Extensions\n\nOur community has created a number of extensions that add functionality above and beyond what is included with Devise. You can view a list of available extensions and add your own here:\n\nhttps://github.com/plataformatec/devise/wiki/Extensions\n\n### Contributing\n\nWe hope that you will consider contributing to Devise. Please read this short overview for some information about how to get started:\n\nhttps://github.com/plataformatec/devise/wiki/Contributing\n\nYou will usually want to write tests for your changes.  To run the test suite, go into Devise's top-level directory and run `bundle install` and `bin/test`.\nDevise works with multiple Ruby and Rails versions, and ActiveRecord and Mongoid ORMs, which means you can run the test suite with some modifiers: `DEVISE_ORM` and `BUNDLE_GEMFILE`.\n\n### DEVISE_ORM\nSince Devise support both Mongoid and ActiveRecord, we rely on this variable to run specific code for each ORM.\nThe default value of `DEVISE_ORM` is `active_record`. To run the tests for mongoid, you can pass `mongoid`:\n```\nDEVISE_ORM=mongoid bin/test\n\n==\u003e Devise.orm = :mongoid\n```\nWhen running the tests for Mongoid, you will need to have a MongoDB server (version 2.0 or newer) running on your system.\n\nPlease note that the command output will show the variable value being used.\n\n### BUNDLE_GEMFILE\nWe can use this variable to tell bundler what Gemfile it should use (instead of the one in the current directory).\nInside the [gemfiles](https://github.com/plataformatec/devise/tree/master/gemfiles) directory, we have one for each version of Rails we support. When you send us a pull request, it may happen that the test suite breaks on Travis using some of them. If that's the case, you can simulate the same environment using the `BUNDLE_GEMFILE` variable.\nFor example, if the tests broke using Ruby 2.4.2 and Rails 4.1, you can do the following:\n```bash\nrbenv shell 2.4.2 # or rvm use 2.4.2\nBUNDLE_GEMFILE=gemfiles/Gemfile.rails-4.1-stable bundle install\nBUNDLE_GEMFILE=gemfiles/Gemfile.rails-4.1-stable bin/test\n```\n\nYou can also combine both of them if the tests broke for Mongoid:\n```bash\nBUNDLE_GEMFILE=gemfiles/Gemfile.rails-4.1-stable bundle install\nBUNDLE_GEMFILE=gemfiles/Gemfile.rails-4.1-stable DEVISE_ORM=mongoid bin/test\n```\n\n## Starting with Rails?\n\nIf you are building your first Rails application, we recommend you *do not* use Devise. Devise requires a good understanding of the Rails Framework. In such cases, we advise you to start a simple authentication system from scratch. Today, we have three resources that should help you get started:\n\n* Michael Hartl's online book: https://www.railstutorial.org/book/modeling_users\n* Ryan Bates' Railscast: http://railscasts.com/episodes/250-authentication-from-scratch\n* Codecademy's Ruby on Rails: Authentication and Authorization: http://www.codecademy.com/en/learn/rails-auth\n\nOnce you have solidified your understanding of Rails and authentication mechanisms, we assure you Devise will be very pleasant to work with. :smiley:\n\n## Getting started\n\nDevise 4.0 works with Rails 4.1 onwards. Add the following line to your Gemfile:\n\n```ruby\ngem 'devise'\n```\n\nThen run `bundle install`\n\nNext, you need to run the generator:\n\n```console\n$ rails generate devise:install\n```\n\nAt this point, a number of instructions will appear in the console. Among these instructions, you'll need to set up the default URL options for the Devise mailer in each environment. Here is a possible configuration for `config/environments/development.rb`:\n\n```ruby\nconfig.action_mailer.default_url_options = { host: 'localhost', port: 3000 }\n```\n\nThe generator will install an initializer which describes ALL of Devise's configuration options. It is *imperative* that you take a look at it. When you are done, you are ready to add Devise to any of your models using the generator.\n\n\nIn the following command you will replace `MODEL` with the class name used for the application’s users (it’s frequently `User` but could also be `Admin`). This will create a model (if one does not exist) and configure it with the default Devise modules. The generator also configures your `config/routes.rb` file to point to the Devise controller.\n\n```console\n$ rails generate devise MODEL\n```\n\nNext, check the MODEL for any additional configuration options you might want to add, such as confirmable or lockable. If you add an option, be sure to inspect the migration file (created by the generator if your ORM supports them) and uncomment the appropriate section.  For example, if you add the confirmable option in the model, you'll need to uncomment the Confirmable section in the migration.\n\nThen run `rails db:migrate`\n\nYou should restart your application after changing Devise's configuration options (this includes stopping spring). Otherwise, you will run into strange errors, for example, users being unable to login and route helpers being undefined.\n\n### Controller filters and helpers\n\nDevise will create some helpers to use inside your controllers and views. To set up a controller with user authentication, just add this before_action (assuming your devise model is 'User'):\n\n```ruby\nbefore_action :authenticate_user!\n```\n\nFor Rails 5, note that `protect_from_forgery` is no longer prepended to the `before_action` chain, so if you have set `authenticate_user` before `protect_from_forgery`, your request will result in \"Can't verify CSRF token authenticity.\" To resolve this, either change the order in which you call them, or use `protect_from_forgery prepend: true`.\n\nIf your devise model is something other than User, replace \"_user\" with \"_yourmodel\". The same logic applies to the instructions below.\n\nTo verify if a user is signed in, use the following helper:\n\n```ruby\nuser_signed_in?\n```\n\nFor the current signed-in user, this helper is available:\n\n```ruby\ncurrent_user\n```\n\nYou can access the session for this scope:\n\n```ruby\nuser_session\n```\n\nAfter signing in a user, confirming the account or updating the password, Devise will look for a scoped root path to redirect to. For instance, when using a `:user` resource, the `user_root_path` will be used if it exists; otherwise, the default `root_path` will be used. This means that you need to set the root inside your routes:\n\n```ruby\nroot to: 'home#index'\n```\n\nYou can also override `after_sign_in_path_for` and `after_sign_out_path_for` to customize your redirect hooks.\n\nNotice that if your Devise model is called `Member` instead of `User`, for example, then the helpers available are:\n\n```ruby\nbefore_action :authenticate_member!\n\nmember_signed_in?\n\ncurrent_member\n\nmember_session\n```\n\n### Configuring Models\n\nThe Devise method in your models also accepts some options to configure its modules. For example, you can choose the cost of the hashing algorithm with:\n\n```ruby\ndevise :database_authenticatable, :registerable, :confirmable, :recoverable, stretches: 12\n```\n\nBesides `:stretches`, you can define `:pepper`, `:encryptor`, `:confirm_within`, `:remember_for`, `:timeout_in`, `:unlock_in` among other options. For more details, see the initializer file that was created when you invoked the \"devise:install\" generator described above. This file is usually located at `/config/initializers/devise.rb`.\n\n### Strong Parameters\n\n![The Parameter Sanitizer API has changed for Devise 4](http://messages.hellobits.com/warning.svg?message=The%20Parameter%20Sanitizer%20API%20has%20changed%20for%20Devise%204)\n\n*For previous Devise versions see https://github.com/plataformatec/devise/tree/3-stable#strong-parameters*\n\nWhen you customize your own views, you may end up adding new attributes to forms. Rails 4 moved the parameter sanitization from the model to the controller, causing Devise to handle this concern at the controller as well.\n\nThere are just three actions in Devise that allow any set of parameters to be passed down to the model, therefore requiring sanitization. Their names and default permitted parameters are:\n\n* `sign_in` (`Devise::SessionsController#create`) - Permits only the authentication keys (like `email`)\n* `sign_up` (`Devise::RegistrationsController#create`) - Permits authentication keys plus `password` and `password_confirmation`\n* `account_update` (`Devise::RegistrationsController#update`) - Permits authentication keys plus `password`, `password_confirmation` and `current_password`\n\nIn case you want to permit additional parameters (the lazy way™), you can do so using a simple before filter in your `ApplicationController`:\n\n```ruby\nclass ApplicationController \u003c ActionController::Base\n  before_action :configure_permitted_parameters, if: :devise_controller?\n\n  protected\n\n  def configure_permitted_parameters\n    devise_parameter_sanitizer.permit(:sign_up, keys: [:username])\n  end\nend\n```\n\nThe above works for any additional fields where the parameters are simple scalar types. If you have nested attributes (say you're using `accepts_nested_attributes_for`), then you will need to tell devise about those nestings and types:\n\n```ruby\nclass ApplicationController \u003c ActionController::Base\n  before_action :configure_permitted_parameters, if: :devise_controller?\n\n  protected\n\n  def configure_permitted_parameters\n    devise_parameter_sanitizer.permit(:sign_up, keys: [:first_name, :last_name, address_attributes: [:country, :state, :city, :area, :postal_code]])\n  end\nend\n```\n\nDevise allows you to completely change Devise defaults or invoke custom behaviour by passing a block:\n\nTo permit simple scalar values for username and email, use this\n\n```ruby\ndef configure_permitted_parameters\n  devise_parameter_sanitizer.permit(:sign_in) do |user_params|\n    user_params.permit(:username, :email)\n  end\nend\n```\n\nIf you have some checkboxes that express the roles a user may take on registration, the browser will send those selected checkboxes as an array. An array is not one of Strong Parameters' permitted scalars, so we need to configure Devise in the following way:\n\n```ruby\ndef configure_permitted_parameters\n  devise_parameter_sanitizer.permit(:sign_up) do |user_params|\n    user_params.permit({ roles: [] }, :email, :password, :password_confirmation)\n  end\nend\n```\nFor the list of permitted scalars, and how to declare permitted keys in nested hashes and arrays, see\n\nhttps://github.com/rails/strong_parameters#nested-parameters\n\nIf you have multiple Devise models, you may want to set up a different parameter sanitizer per model. In this case, we recommend inheriting from `Devise::ParameterSanitizer` and adding your own logic:\n\n```ruby\nclass User::ParameterSanitizer \u003c Devise::ParameterSanitizer\n  def initialize(*)\n    super\n    permit(:sign_up, keys: [:username, :email])\n  end\nend\n```\n\nAnd then configure your controllers to use it:\n\n```ruby\nclass ApplicationController \u003c ActionController::Base\n  protected\n\n  def devise_parameter_sanitizer\n    if resource_class == User\n      User::ParameterSanitizer.new(User, :user, params)\n    else\n      super # Use the default one\n    end\n  end\nend\n```\n\nThe example above overrides the permitted parameters for the user to be both `:username` and `:email`. The non-lazy way to configure parameters would be by defining the before filter above in a custom controller. We detail how to configure and customize controllers in some sections below.\n\n### Configuring views\n\nWe built Devise to help you quickly develop an application that uses authentication. However, we don't want to be in your way when you need to customize it.\n\nSince Devise is an engine, all its views are packaged inside the gem. These views will help you get started, but after some time you may want to change them. If this is the case, you just need to invoke the following generator, and it will copy all views to your application:\n\n```console\n$ rails generate devise:views\n```\n\nIf you have more than one Devise model in your application (such as `User` and `Admin`), you will notice that Devise uses the same views for all models. Fortunately, Devise offers an easy way to customize views. All you need to do is set `config.scoped_views = true` inside the `config/initializers/devise.rb` file.\n\nAfter doing so, you will be able to have views based on the role like `users/sessions/new` and `admins/sessions/new`. If no view is found within the scope, Devise will use the default view at `devise/sessions/new`. You can also use the generator to generate scoped views:\n\n```console\n$ rails generate devise:views users\n```\n\nIf you would like to generate only a few sets of views, like the ones for the `registerable` and `confirmable` module,\nyou can pass a list of modules to the generator with the `-v` flag.\n\n```console\n$ rails generate devise:views -v registrations confirmations\n```\n\n### Configuring controllers\n\nIf the customization at the views level is not enough, you can customize each controller by following these steps:\n\n1. Create your custom controllers using the generator which requires a scope:\n\n    ```console\n    $ rails generate devise:controllers [scope]\n    ```\n\n    If you specify `users` as the scope, controllers will be created in `app/controllers/users/`.\n    And the sessions controller will look like this:\n\n    ```ruby\n    class Users::SessionsController \u003c Devise::SessionsController\n      # GET /resource/sign_in\n      # def new\n      #   super\n      # end\n      ...\n    end\n    ```\n    (Use the -c flag to specify a controller, for example: `rails generate devise:controllers users -c=sessions`)\n\n2. Tell the router to use this controller:\n\n    ```ruby\n    devise_for :users, controllers: { sessions: 'users/sessions' }\n    ```\n\n3. Copy the views from `devise/sessions` to `users/sessions`. Since the controller was changed, it won't use the default views located in `devise/sessions`.\n\n4. Finally, change or extend the desired controller actions.\n\n    You can completely override a controller action:\n\n    ```ruby\n    class Users::SessionsController \u003c Devise::SessionsController\n      def create\n        # custom sign-in code\n      end\n    end\n    ```\n\n    Or you can simply add new behaviour to it:\n\n    ```ruby\n    class Users::SessionsController \u003c Devise::SessionsController\n      def create\n        super do |resource|\n          BackgroundWorker.trigger(resource)\n        end\n      end\n    end\n    ```\n\n    This is useful for triggering background jobs or logging events during certain actions.\n\nRemember that Devise uses flash messages to let users know if sign in was successful or unsuccessful. Devise expects your application to call `flash[:notice]` and `flash[:alert]` as appropriate. Do not print the entire flash hash, print only specific keys. In some circumstances, Devise adds a `:timedout` key to the flash hash, which is not meant for display. Remove this key from the hash if you intend to print the entire hash.\n\n### Configuring routes\n\nDevise also ships with default routes. If you need to customize them, you should probably be able to do it through the devise_for method. It accepts several options like :class_name, :path_prefix and so on, including the possibility to change path names for I18n:\n\n```ruby\ndevise_for :users, path: 'auth', path_names: { sign_in: 'login', sign_out: 'logout', password: 'secret', confirmation: 'verification', unlock: 'unblock', registration: 'register', sign_up: 'cmon_let_me_in' }\n```\n\nBe sure to check `devise_for` [documentation](http://www.rubydoc.info/github/plataformatec/devise/master/ActionDispatch/Routing/Mapper%3Adevise_for) for details.\n\nIf you have the need for more deep customization, for instance to also allow \"/sign_in\" besides \"/users/sign_in\", all you need to do is create your routes normally and wrap them in a `devise_scope` block in the router:\n\n```ruby\ndevise_scope :user do\n  get 'sign_in', to: 'devise/sessions#new'\nend\n```\n\nThis way, you tell Devise to use the scope `:user` when \"/sign_in\" is accessed. Notice `devise_scope` is also aliased as `as` in your router.\n\nPlease note: You will still need to add `devise_for` in your routes in order to use helper methods such as `current_user`.\n\n```ruby\ndevise_for :users, skip: :all\n```\n\n### I18n\n\nDevise uses flash messages with I18n, in conjunction with the flash keys :notice and :alert. To customize your app, you can set up your locale file:\n\n```yaml\nen:\n  devise:\n    sessions:\n      signed_in: 'Signed in successfully.'\n```\n\nYou can also create distinct messages based on the resource you've configured using the singular name given in routes:\n\n```yaml\nen:\n  devise:\n    sessions:\n      user:\n        signed_in: 'Welcome user, you are signed in.'\n      admin:\n        signed_in: 'Hello admin!'\n```\n\nThe Devise mailer uses a similar pattern to create subject messages:\n\n```yaml\nen:\n  devise:\n    mailer:\n      confirmation_instructions:\n        subject: 'Hello everybody!'\n        user_subject: 'Hello User! Please confirm your email'\n      reset_password_instructions:\n        subject: 'Reset instructions'\n```\n\nTake a look at our locale file to check all available messages. You may also be interested in one of the many translations that are available on our wiki:\n\nhttps://github.com/plataformatec/devise/wiki/I18n\n\nCaution: Devise Controllers inherit from ApplicationController. If your app uses multiple locales, you should be sure to set I18n.locale in ApplicationController.\n\n### Test helpers\n\nDevise includes some test helpers for controller and integration tests.\nIn order to use them, you need to include the respective module in your test\ncases/specs.\n\n### Controller tests\n\nController tests require that you include `Devise::Test::ControllerHelpers` on\nyour test case or its parent `ActionController::TestCase` superclass.\nFor Rails 5, include `Devise::Test::IntegrationHelpers` instead, since the superclass\nfor controller tests has been changed to ActionDispatch::IntegrationTest\n(for more details, see the [Integration tests](#integration-tests) section).\n\n```ruby\nclass PostsControllerTest \u003c ActionController::TestCase\n  include Devise::Test::ControllerHelpers\nend\n```\n\nIf you're using RSpec, you can put the following inside a file named\n`spec/support/devise.rb` or in your `spec/spec_helper.rb` (or\n`spec/rails_helper.rb` if you are using `rspec-rails`):\n\n```ruby\nRSpec.configure do |config|\n  config.include Devise::Test::ControllerHelpers, type: :controller\n  config.include Devise::Test::ControllerHelpers, type: :view\nend\n```\n\nJust be sure that this inclusion is made *after* the `require 'rspec/rails'` directive.\n\nNow you are ready to use the `sign_in` and `sign_out` methods on your controller\ntests:\n\n```ruby\nsign_in @user\nsign_in @user, scope: :admin\n```\n\nIf you are testing Devise internal controllers or a controller that inherits\nfrom Devise's, you need to tell Devise which mapping should be used before a\nrequest. This is necessary because Devise gets this information from the router,\nbut since controller tests do not pass through the router, it needs to be stated\nexplicitly. For example, if you are testing the user scope, simply use:\n\n```ruby\ntest 'GET new' do\n  # Mimic the router behavior of setting the Devise scope through the env.\n  @request.env['devise.mapping'] = Devise.mappings[:user]\n\n  # Use the sign_in helper to sign in a fixture `User` record.\n  sign_in users(:alice)\n\n  get :new\n\n  # assert something\nend\n```\n\n### Integration tests\n\nIntegration test helpers are available by including the\n`Devise::Test::IntegrationHelpers` module.\n\n```ruby\nclass PostsTests \u003c ActionDispatch::IntegrationTest\n  include Devise::Test::IntegrationHelpers\nend\n```\n\nNow you can use the following `sign_in` and `sign_out` methods in your integration\ntests:\n\n```ruby\nsign_in users(:bob)\nsign_in users(:bob), scope: :admin\n\nsign_out :user\n```\n\nRSpec users can include the `IntegrationHelpers` module on their `:feature` specs.\n\n```ruby\nRSpec.configure do |config|\n  config.include Devise::Test::IntegrationHelpers, type: :feature\nend\n```\n\nUnlike controller tests, integration tests do not need to supply the\n`devise.mapping` `env` value, as the mapping can be inferred by the routes that\nare executed in your tests.\n\nYou can read more about testing your Rails 3 - Rails 4 controllers with RSpec in the wiki:\n\n* https://github.com/plataformatec/devise/wiki/How-To:-Test-controllers-with-Rails-3-and-4-%28and-RSpec%29\n\n### OmniAuth\n\nDevise comes with OmniAuth support out of the box to authenticate with other providers. To use it, simply specify your OmniAuth configuration in `config/initializers/devise.rb`:\n\n```ruby\nconfig.omniauth :github, 'APP_ID', 'APP_SECRET', scope: 'user,public_repo'\n```\n\nYou can read more about OmniAuth support in the wiki:\n\n* https://github.com/plataformatec/devise/wiki/OmniAuth:-Overview\n\n### Configuring multiple models\n\nDevise allows you to set up as many Devise models as you want. If you want to have an Admin model with just authentication and timeout features, in addition to the User model above, just run:\n\n```ruby\n# Create a migration with the required fields\ncreate_table :admins do |t|\n  t.string :email\n  t.string :encrypted_password\n  t.timestamps null: false\nend\n\n# Inside your Admin model\ndevise :database_authenticatable, :timeoutable\n\n# Inside your routes\ndevise_for :admins\n\n# Inside your protected controller\nbefore_action :authenticate_admin!\n\n# Inside your controllers and views\nadmin_signed_in?\ncurrent_admin\nadmin_session\n```\n\nAlternatively, you can simply run the Devise generator.\n\nKeep in mind that those models will have completely different routes. They **do not** and **cannot** share the same controller for sign in, sign out and so on. In case you want to have different roles sharing the same actions, we recommend that you use a role-based approach, by either providing a role column or using a dedicated gem for authorization.\n\n### ActiveJob Integration\n\nIf you are using Rails 4.2 and ActiveJob to deliver ActionMailer messages in the\nbackground through a queuing back-end, you can send Devise emails through your\nexisting queue by overriding the `send_devise_notification` method in your model.\n\n```ruby\ndef send_devise_notification(notification, *args)\n  devise_mailer.send(notification, self, *args).deliver_later\nend\n```\n\n### Password reset tokens and Rails logs\n\nIf you enable the [Recoverable](http://rubydoc.info/github/plataformatec/devise/master/Devise/Models/Recoverable) module, note that a stolen password reset token could give an attacker access to your application. Devise takes effort to generate random, secure tokens, and stores only token digests in the database, never plaintext. However the default logging behavior in Rails can cause plaintext tokens to leak into log files:\n\n1. Action Mailer logs the entire contents of all outgoing emails to the DEBUG level. Password reset tokens delivered to users in email will be leaked.\n2. Active Job logs all arguments to every enqueued job at the INFO level. If you configure Devise to use `deliver_later` to send password reset emails, password reset tokens will be leaked.\n\nRails sets the production logger level to DEBUG by default. Consider changing your production logger level to WARN if you wish to prevent tokens from being leaked into your logs. In `config/environments/production.rb`:\n\n```ruby\nconfig.log_level = :warn\n```\n\n\n### Other ORMs\n\nDevise supports ActiveRecord (default) and Mongoid. To select another ORM, simply require it in the initializer file.\n\n## Additional information\n\n### Heroku\n\nUsing Devise on Heroku with Ruby on Rails 3.2 requires setting:\n\n```ruby\nconfig.assets.initialize_on_precompile = false\n```\n\nRead more about the potential issues at http://guides.rubyonrails.org/asset_pipeline.html\n\n### Warden\n\nDevise is based on Warden, which is a general Rack authentication framework created by Daniel Neighman. We encourage you to read more about Warden here:\n\nhttps://github.com/hassox/warden\n\n### Contributors\n\nWe have a long list of valued contributors. Check them all at:\n\nhttps://github.com/plataformatec/devise/graphs/contributors\n\n## License\n\nMIT License. Copyright 2009-2018 Plataformatec. http://plataformatec.com.br\n\nYou are not granted rights or licenses to the trademarks of Plataformatec, including without limitation the Devise name or logo.\n"
  },
  {
    "repo": "hashicorp/vagrant",
    "content": "# Vagrant\n\n* Website: [https://www.vagrantup.com/](https://www.vagrantup.com/)\n* Source: [https://github.com/hashicorp/vagrant](https://github.com/hashicorp/vagrant)\n* [![Gitter chat](https://badges.gitter.im/mitchellh/vagrant.png)](https://gitter.im/mitchellh/vagrant)\n* Mailing list: [Google Groups](https://groups.google.com/group/vagrant-up)\n* IRC: #vagrant on freenode.org\n\nVagrant is a tool for building and distributing development environments.\n\nDevelopment environments managed by Vagrant can run on local virtualized\nplatforms such as VirtualBox or VMware, in the cloud via AWS or OpenStack,\nor in containers such as with Docker or raw LXC.\n\nVagrant provides the framework and configuration format to create and\nmanage complete portable development environments. These development\nenvironments can live on your computer or in the cloud, and are portable\nbetween Windows, Mac OS X, and Linux.\n\n## Quick Start\n\nFor the quick-start, we'll bring up a development machine on\n[VirtualBox](https://www.virtualbox.org/) because it is free and works\non all major platforms. Vagrant can, however, work with almost any\nsystem such as [OpenStack](https://www.openstack.org/), [VMware](https://www.vmware.com/), [Docker](https://docs.docker.com/), etc.\n\nFirst, make sure your development machine has\n[VirtualBox](https://www.virtualbox.org/)\ninstalled. After this,\n[download and install the appropriate Vagrant package for your OS](https://www.vagrantup.com/downloads.html).\n\nTo build your first virtual environment:\n\n    vagrant init hashicorp/precise32\n    vagrant up\n\nNote: The above `vagrant up` command will also trigger Vagrant to download the\n`precise32` box via the specified URL. Vagrant only does this if it detects that\nthe box doesn't already exist on your system.\n\n## Getting Started Guide\n\nTo learn how to build a fully functional development environment, follow the\n[getting started guide](https://www.vagrantup.com/docs/getting-started/index.html).\n\n## Installing from Source\n\nIf you want the bleeding edge version of Vagrant, we try to keep master pretty stable\nand you're welcome to give it a shot. Please review the installation page [here](https://www.vagrantup.com/docs/installation/source.html).\n\n## Contributing to Vagrant\n\nOnce your Vagrant bundle is installed from Git repository, you can run the test suite with:\n\n    bundle exec rake\n\nThis will run the unit test suite, which should come back all green!\n\nPlease take time to read the [HashiCorp Community Guidelines](https://www.hashicorp.com/community-guidelines) and the [Vagrant Contributing Guide](https://github.com/hashicorp/vagrant/blob/master/.github/CONTRIBUTING.md).\n\nThen you're good to go!\n\n### Acceptance Tests\n\nVagrant also comes with an acceptance test suite that does black-box\ntests of various Vagrant components. Note that these tests are **extremely\nslow** because actual VMs are spun up and down. The full test suite can\ntake hours. Instead, try to run focused component tests.\n\nTo run the acceptance test suite, first copy `vagrant-spec.config.example.rb`\nto `vagrant-spec.config.rb` and modify it to valid values. The places you\nshould fill in are clearly marked.\n\nNext, see the components that can be tested:\n\n```\n$ rake acceptance:components\ncli\nprovider/virtualbox/basic\n...\n```\n\nThen, run one of those components:\n\n```\n$ rake acceptance:run COMPONENTS=\"cli\"\n...\n```\n"
  },
  {
    "repo": "tootsuite/mastodon",
    "content": "![Mastodon](https://i.imgur.com/NhZc40l.png)\n========\n\n[![GitHub release](https://img.shields.io/github/release/tootsuite/mastodon.svg)][releases]\n[![Build Status](https://img.shields.io/circleci/project/github/tootsuite/mastodon.svg)][circleci]\n[![Code Climate](https://img.shields.io/codeclimate/maintainability/tootsuite/mastodon.svg)][code_climate]\n[![Translation status](https://weblate.joinmastodon.org/widgets/mastodon/-/svg-badge.svg)][weblate]\n[![Docker Pulls](https://img.shields.io/docker/pulls/tootsuite/mastodon.svg)][docker]\n\n[releases]: https://github.com/tootsuite/mastodon/releases\n[circleci]: https://circleci.com/gh/tootsuite/mastodon\n[code_climate]: https://codeclimate.com/github/tootsuite/mastodon\n[weblate]: https://weblate.joinmastodon.org/engage/mastodon/\n[docker]: https://hub.docker.com/r/tootsuite/mastodon/\n\nMastodon is a **free, open-source social network server** based on ActivityPub. Follow friends and discover new ones. Publish anything you want: links, pictures, text, video. All servers of Mastodon are interoperable as a federated network, i.e. users on one server can seamlessly communicate with users from another one. This includes non-Mastodon software that also implements ActivityPub!\n\nClick below to **learn more** in a video:\n\n[![Screenshot](https://blog.joinmastodon.org/2018/06/why-activitypub-is-the-future/ezgif-2-60f1b00403.gif)][youtube_demo]\n\n[youtube_demo]: https://www.youtube.com/watch?v=IPSbNdBmWKE\n\n## Navigation \n\n- [Project homepage 🐘](https://joinmastodon.org)\n- [Support the development via Patreon][patreon]\n- [View sponsors](https://joinmastodon.org/sponsors)\n- [Blog](https://blog.joinmastodon.org)\n- [Documentation](https://docs.joinmastodon.org)\n- [Browse Mastodon servers](https://joinmastodon.org/#getting-started)\n- [Browse Mastodon apps](https://joinmastodon.org/apps)\n\n[patreon]: https://www.patreon.com/mastodon\n\n## Features\n\n\u003cimg src=\"https://docs.joinmastodon.org/elephant.svg\" align=\"right\" width=\"30%\" /\u003e\n\n**No vendor lock-in: Fully interoperable with any conforming platform**\n\nIt doesn't have to be Mastodon, whatever implements ActivityPub is part of the social network! [Learn more](https://blog.joinmastodon.org/2018/06/why-activitypub-is-the-future/)\n\n**Real-time, chronological timeline updates**\n\nSee the updates of people you're following appear in real-time in the UI via WebSockets. There's a firehose view as well!\n\n**Media attachments like images and short videos**\n\nUpload and view images and WebM/MP4 videos attached to the updates. Videos with no audio track are treated like GIFs; normal videos are looped - like vines!\n\n**Safety and moderation tools**\n\nPrivate posts, locked accounts, phrase filtering, muting, blocking and all sorts of other features, along with a reporting and moderation system. [Learn more](https://blog.joinmastodon.org/2018/07/cage-the-mastodon/)\n\n**OAuth2 and a straightforward REST API**\n\nMastodon acts as an OAuth2 provider so 3rd party apps can use the REST and Streaming APIs, resulting in a rich app ecosystem with a lot of choice!\n\n## Deployment\n\n**Tech stack:**\n\n- **Ruby on Rails** powers the REST API and other web pages\n- **React.js** and Redux are used for the dynamic parts of the interface\n- **Node.js** powers the streaming API\n\n**Requirements:**\n\n- **PostgreSQL** 9.5+\n- **Redis**\n- **Ruby** 2.4+\n- **Node.js** 8+\n\nThe repository includes deployment configurations for **Docker and docker-compose**, but also a few specific platforms like **Heroku**, **Scalingo**, and **Nanobox**. The [**stand-alone** installation guide](https://docs.joinmastodon.org/administration/installation/) is available in the documentation.\n\nA **Vagrant** configuration is included for development purposes.\n\n## Contributing\n\nMastodon is **free, open source software** licensed under **AGPLv3**.\n\nYou can open issues for bugs you've found or features you think are missing. You can also submit pull requests to this repository, or submit translations using Weblate. To get started, take a look at [CONTRIBUTING.md](CONTRIBUTING.md)\n\n**IRC channel**: #mastodon on irc.freenode.net\n\n## License\n\nCopyright (C) 2016-2018 Eugen Rochko \u0026 other Mastodon contributors (see [AUTHORS.md](AUTHORS.md))\n\nThis program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License along with this program. If not, see \u003chttps://www.gnu.org/licenses/\u003e.\n"
  },
  {
    "repo": "Homebrew/brew",
    "content": "# Homebrew\n[![GitHub release](https://img.shields.io/github/release/Homebrew/brew.svg)](https://github.com/Homebrew/brew/releases)\n\nFeatures, usage and installation instructions are [summarised on the homepage](https://brew.sh). Terminology (e.g. the difference between a Cellar, Tap, Cask and so forth) is [explained here](https://docs.brew.sh/Formula-Cookbook#homebrew-terminology).\n\n## What Packages Are Available?\n1. Type `brew search` for a list.\n2. Or visit [formulae.brew.sh](https://formulae.brew.sh) to browse packages online.\n3. Or use `brew search --desc \u003ckeyword\u003e` to browse packages from the command line.\n\n## More Documentation\n`brew help`, `man brew` or check [our documentation](https://docs.brew.sh/).\n\n## Troubleshooting\nFirst, please run `brew update` and `brew doctor`.\n\nSecond, read the [Troubleshooting Checklist](https://docs.brew.sh/Troubleshooting).\n\n**If you don't read these it will take us far longer to help you with your problem.**\n\n## Contributing\n[![Azure Pipelines](https://img.shields.io/vso/build/Homebrew/56a87eb4-3180-495a-9117-5ed6c79da737/1.svg)](https://dev.azure.com/Homebrew/Homebrew/_build/latest?definitionId=1)\n[![Codecov](https://img.shields.io/codecov/c/github/Homebrew/brew.svg)](https://codecov.io/gh/Homebrew/brew)\n\nWe'd love you to contribute to Homebrew. First, please read our [Contribution Guide](CONTRIBUTING.md) and [Code of Conduct](CODE_OF_CONDUCT.md#code-of-conduct).\n\nWe explicitly welcome contributions from people who have never contributed to open-source before: we were all beginners once! We can help build on a partially working pull request with the aim of getting it merged. We are also actively seeking to diversify our contributors and especially welcome contributions from women from all backgrounds and people of colour.\n\nA good starting point for contributing is running `brew audit --strict` with some of the packages you use (e.g. `brew audit --strict wget` if you use `wget`) and then read through the warnings, try to fix them until `brew audit --strict` shows no results and [submit a pull request](https://docs.brew.sh/How-To-Open-a-Homebrew-Pull-Request). If no formulae you use have warnings you can run `brew audit --strict` without arguments to have it run on all packages and pick one.\n\nAlternatively, for something more substantial, check out one of the issues labeled `help wanted` in [Homebrew/brew](https://github.com/homebrew/brew/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22) or [Homebrew/homebrew-core](https://github.com/homebrew/homebrew-core/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22).\n\nGood luck!\n\n## Security\nPlease report security issues to our [HackerOne](https://hackerone.com/homebrew/).\n\n## Who Are You?\nHomebrew's lead maintainer is [Mike McQuaid](https://github.com/mikemcquaid).\n\nHomebrew's project leadership committee is [Mike McQuaid](https://github.com/mikemcquaid), [JCount](https://github.com/jcount), [Misty De Meo](https://github.com/mistydemeo) and [Markus Reiter](https://github.com/reitermarkus).\n\nHomebrew/brew's other current maintainers are [Claudia](https://github.com/claui), [Michka Popoff](https://github.com/imichka), [Shaun Jackman](https://github.com/sjackman), [Chongyu Zhu](https://github.com/lembacon), [Vitor Galvao](https://github.com/vitorgalvao), [JCount](https://github.com/jcount), [Misty De Meo](https://github.com/mistydemeo), [Gautham Goli](https://github.com/GauthamGoli), [Markus Reiter](https://github.com/reitermarkus), [Steven Peters](https://github.com/scpeters), [Jonathan Chang](https://github.com/jonchang) and [William Woodruff](https://github.com/woodruffw).\n\nHomebrew/brew's Linux support (and Linuxbrew) maintainers are [Michka Popoff](https://github.com/imichka) and [Shaun Jackman](https://github.com/sjackman).\n\nHomebrew/homebrew-core's other current maintainers are [Claudia](https://github.com/claui), [Michka Popoff](https://github.com/imichka), [Shaun Jackman](https://github.com/sjackman), [Chongyu Zhu](https://github.com/lembacon), [Izaak Beekman](https://github.com/zbeekman), [Sean Molenaar](https://github.com/SMillerDev), [Jan Viljanen](https://github.com/javian), [Jason Tedor](https://github.com/jasontedor), [Viktor Szakats](https://github.com/vszakats), [FX Coudert](https://github.com/fxcoudert), [Thierry Moisan](https://github.com/moisan), [Steven Peters](https://github.com/scpeters), [JCount](https://github.com/jcount), [Misty De Meo](https://github.com/mistydemeo) and [Tom Schoonjans](https://github.com/tschoonj).\n\nFormer maintainers with significant contributions include [commitay](https://github.com/commitay), [Dominyk Tiller](https://github.com/DomT4), [Tim Smith](https://github.com/tdsmith), [Baptiste Fontaine](https://github.com/bfontaine), [Xu Cheng](https://github.com/xu-cheng), [Martin Afanasjew](https://github.com/UniqMartin), [Brett Koonce](https://github.com/asparagui), [Charlie Sharpsteen](https://github.com/Sharpie), [Jack Nagel](https://github.com/jacknagel), [Adam Vandenberg](https://github.com/adamv), [Andrew Janke](https://github.com/apjanke), [Alex Dunn](https://github.com/dunn), [neutric](https://github.com/neutric), [Tomasz Pajor](https://github.com/nijikon), [Uladzislau Shablinski](https://github.com/vladshablinsky), [Alyssa Ross](https://github.com/alyssais), [ilovezfs](https://github.com/ilovezfs) and Homebrew's creator: [Max Howell](https://github.com/mxcl).\n\n## Community\n- [discourse.brew.sh (forum)](https://discourse.brew.sh)\n- [freenode.net\\#machomebrew (IRC)](irc://irc.freenode.net/#machomebrew)\n- [@MacHomebrew (Twitter)](https://twitter.com/MacHomebrew)\n\n## License\nCode is under the [BSD 2-clause \"Simplified\" License](LICENSE.txt).\nDocumentation is under the [Creative Commons Attribution license](https://creativecommons.org/licenses/by/4.0/).\n\n## Donations\nHomebrew is a non-profit project run entirely by unpaid volunteers. We need your funds to pay for software, hardware and hosting around continuous integration and future improvements to the project. Every donation will be spent on making Homebrew better for our users.\n\nPlease consider a regular donation through Patreon:\n\n[![Donate with Patreon](https://img.shields.io/badge/patreon-donate-green.svg)](https://www.patreon.com/homebrew)\n\nAlternatively, if you'd rather make a one-off payment:\n\n- [Donate with PayPal](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick\u0026hosted_button_id=V6ZE57MJRYC8L)\n- Donate by USA $ check from a USA bank:\n  - Make check payable to \"Software Freedom Conservancy, Inc.\" and place \"Directed donation: Homebrew\" in the memo field. Checks should then be mailed to:\n    - Software Freedom Conservancy, Inc.\n      137 Montague ST  STE 380\n      BROOKLYN, NY 11201             USA\n- Donate by wire transfer: contact accounting@sfconservancy.org for wire transfer details.\n\nHomebrew is a member of the [Software Freedom Conservancy](https://sfconservancy.org) which provides us with an ability to receive tax-deductible, Homebrew earmarked donations (and [many other services](https://sfconservancy.org/members/services/)). Software Freedom Conservancy, Inc. is a 501(c)(3) organization incorporated in New York, and donations made to it are fully tax-deductible to the extent permitted by law.\n\n## Sponsors\nOur Xserve ESXi boxes for CI are hosted by [MacStadium](https://www.macstadium.com).\n\n[![Powered by MacStadium](https://cloud.githubusercontent.com/assets/125011/22776032/097557ac-eea6-11e6-8ba8-eff22dfd58f1.png)](https://www.macstadium.com)\n\nOur Jenkins CI installation is hosted by [DigitalOcean](https://m.do.co/c/7e39c35d5581).\n\n![DigitalOcean](https://cloud.githubusercontent.com/assets/125011/26827038/4b7b5ade-4ab3-11e7-811b-fed3ab0e934d.png)\n\nOur physical hardware is hosted by [Commsworld](https://www.commsworld.com).\n\n![Commsworld powered by Fluency](https://user-images.githubusercontent.com/125011/30822845-1716bc2c-a222-11e7-843e-ea7c7b6a1503.png)\n\nOur bottles (binary packages) are hosted by [Bintray](https://bintray.com/homebrew).\n\n[![Downloads by Bintray](https://bintray.com/docs/images/downloads_by_bintray_96.png)](https://bintray.com/homebrew)\n\nSecure password storage and syncing is provided by [1Password for Teams](https://1password.com/teams/) by [AgileBits](https://agilebits.com).\n\n[![AgileBits](https://da36klfizjv29.cloudfront.net/assets/branding/agilebits-fcca96e9b8e815c5c48c6b3e98156cb5.png)](https://agilebits.com)\n\nHomebrew is a member of the [Software Freedom Conservancy](https://sfconservancy.org).\n\n[![Software Freedom Conservancy](https://sfconservancy.org/img/conservancy_64x64.png)](https://sfconservancy.org)\n"
  },
  {
    "repo": "ruby/ruby",
    "content": "[![Build Status](https://travis-ci.org/ruby/ruby.svg?branch=trunk)](https://travis-ci.org/ruby/ruby)\n[![Build status](https://ci.appveyor.com/api/projects/status/0sy8rrxut4o0k960/branch/trunk?svg=true)](https://ci.appveyor.com/project/ruby/ruby/branch/trunk)\n[![wercker status](https://app.wercker.com/status/e5e7e1704f62b76525022aa424aef6ef/s/trunk \"wercker status\")](https://app.wercker.com/project/byKey/e5e7e1704f62b76525022aa424aef6ef)\n\n# What's Ruby\n\nRuby is the interpreted scripting language for quick and easy object-oriented\nprogramming. It has many features to process text files and to do system\nmanagement tasks (as in Perl). It is simple, straight-forward, and\nextensible.\n\n## Features of Ruby\n\n*   Simple Syntax\n*   **Normal** Object-oriented Features (e.g. class, method calls)\n*   **Advanced** Object-oriented Features (e.g. mix-in, singleton-method)\n*   Operator Overloading\n*   Exception Handling\n*   Iterators and Closures\n*   Garbage Collection\n*   Dynamic Loading of Object Files (on some architectures)\n*   Highly Portable (works on many Unix-like/POSIX compatible platforms as\n    well as Windows, macOS, Haiku, etc.) cf.\n    https://github.com/ruby/ruby/blob/trunk/doc/contributing.rdoc#platform-maintainers\n\n\n## How to get Ruby\n\nFor a complete list of ways to install Ruby, including using third-party tools\nlike rvm, see:\n\nhttps://www.ruby-lang.org/en/downloads/\n\nThe trunk of the Ruby source tree can be checked out with the following\ncommand:\n\n    $ svn co https://svn.ruby-lang.org/repos/ruby/trunk/ ruby\n\nOr if you are using git then use the following command:\n\n    $ git clone https://github.com/ruby/ruby.git\n\nThere are some other branches under development. Try the following command\nto see the list of branches:\n\n    $ svn ls https://svn.ruby-lang.org/repos/ruby/branches/\n\nOr if you are using git then use the following command:\n\n    $ git ls-remote https://github.com/ruby/ruby.git\n\n## Ruby home page\n\nThe URL of the Ruby home page is:\n\nhttps://www.ruby-lang.org/\n\n## Mailing list\n\nThere is a mailing list to talk about Ruby. To subscribe to this list, please\nsend the following phrase:\n\n    subscribe\n\nin the mail body (not subject) to the address\n\u003cruby-talk-request@ruby-lang.org\u003e.\n\n## How to compile and install\n\nThis is what you need to do to compile and install Ruby:\n\n1.  If you want to use Microsoft Visual C++ to compile Ruby, read\n    [win32/README.win32](win32/README.win32) instead of this document.\n\n2.  If `./configure` does not exist or is older than `configure.ac`, run\n    `autoconf` to (re)generate configure.\n\n3.  Run `./configure`, which will generate `config.h` and `Makefile`.\n\n    Some C compiler flags may be added by default depending on your\n    environment. Specify `optflags=..` and `warnflags=..` as necessary to\n    override them.\n\n4.  Edit `defines.h` if you need. Usually this step will not be needed.\n\n5.  Remove comment mark(`#`) before the module names from `ext/Setup` (or add\n    module names if not present), if you want to link modules statically.\n\n    If you don't want to compile non static extension modules (probably on\n    architectures which do not allow dynamic loading), remove comment mark\n    from the line \"`#option nodynamic`\" in `ext/Setup`.\n\n    Usually this step will not be needed.\n\n6.  Run `make`.\n\n    * On Mac, set RUBY\\_CODESIGN environment variable with a signing identity.\n      It uses the identity to sign `ruby` binary. See also codesign(1).\n\n7.  Optionally, run '`make check`' to check whether the compiled Ruby\n    interpreter works well. If you see the message \"`check succeeded`\", your\n    Ruby works as it should (hopefully).\n\n8.  Optionally, run `make update-gems` and `make extract-gems`.\n\n    If you want to install bundled gems, run `make update-gems` and\n    `make extract-gems` before running `make install`.\n\n9.  Run '`make install`'.\n\n    This command will create the following directories and install files into\n    them.\n\n    *   `${DESTDIR}${prefix}/bin`\n    *   `${DESTDIR}${prefix}/include/ruby-${MAJOR}.${MINOR}.${TEENY}`\n    *   `${DESTDIR}${prefix}/include/ruby-${MAJOR}.${MINOR}.${TEENY}/${PLATFORM}`\n    *   `${DESTDIR}${prefix}/lib`\n    *   `${DESTDIR}${prefix}/lib/ruby`\n    *   `${DESTDIR}${prefix}/lib/ruby/${MAJOR}.${MINOR}.${TEENY}`\n    *   `${DESTDIR}${prefix}/lib/ruby/${MAJOR}.${MINOR}.${TEENY}/${PLATFORM}`\n    *   `${DESTDIR}${prefix}/lib/ruby/site_ruby`\n    *   `${DESTDIR}${prefix}/lib/ruby/site_ruby/${MAJOR}.${MINOR}.${TEENY}`\n    *   `${DESTDIR}${prefix}/lib/ruby/site_ruby/${MAJOR}.${MINOR}.${TEENY}/${PLATFORM}`\n    *   `${DESTDIR}${prefix}/lib/ruby/vendor_ruby`\n    *   `${DESTDIR}${prefix}/lib/ruby/vendor_ruby/${MAJOR}.${MINOR}.${TEENY}`\n    *   `${DESTDIR}${prefix}/lib/ruby/vendor_ruby/${MAJOR}.${MINOR}.${TEENY}/${PLATFORM}`\n    *   `${DESTDIR}${prefix}/lib/ruby/gems/${MAJOR}.${MINOR}.${TEENY}`\n    *   `${DESTDIR}${prefix}/share/man/man1`\n    *   `${DESTDIR}${prefix}/share/ri/${MAJOR}.${MINOR}.${TEENY}/system`\n\n\n    If Ruby's API version is '*x.y.z*', the `${MAJOR}` is '*x*', the\n    `${MINOR}` is '*y*', and the `${TEENY}` is '*z*'.\n\n    **NOTE**: teeny of the API version may be different from one of Ruby's\n    program version\n\n    You may have to be a super user to install Ruby.\n\n\nIf you fail to compile Ruby, please send the detailed error report with the\nerror log and machine/OS type, to help others.\n\nSome extension libraries may not get compiled because of lack of necessary\nexternal libraries and/or headers, then you will need to run '`make distclean-ext`'\nto remove old configuration after installing them in such case.\n\n## Copying\n\nSee the file [COPYING](COPYING).\n\n## Feedback\n\nQuestions about the Ruby language can be asked on the Ruby-Talk mailing list\n(https://www.ruby-lang.org/en/community/mailing-lists) or on websites like\n(https://stackoverflow.com).\n\nBug reports should be filed at https://bugs.ruby-lang.org. Read [HowToReport] for more information.\n\n[HowToReport]: https://bugs.ruby-lang.org/projects/ruby/wiki/HowToReport\n\n## Contributing\n\nSee the file [CONTRIBUTING.md](CONTRIBUTING.md)\n\n\n## The Author\n\nRuby was originally designed and developed by Yukihiro Matsumoto (Matz) in\n1995.\n\n\u003cmatz@ruby-lang.org\u003e\n"
  },
  {
    "repo": "kilimchoi/engineering-blogs",
    "content": "# Software Engineering Blogs [![Awesome](https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg)](https://github.com/sindresorhus/awesome)\n\n### [Companies](#companies-1)\n|     |     |     |     |     |     |     |     |     |\n|:-:  |:-:  |:-:  |:-:  |:-:  |:-:  |:-:  |:-:  |:-:  |\n| [#](#-companies) \t| [A](#a-companies) \t| [B](#b-companies) \t| [C](#c-companies) \t| [D](#d-companies) \t| [E](#e-companies) \t| [F](#f-companies) \t| [G](#g-companies) \t| [H](#h-companies) \t|\n| [I](#i-companies) \t| [J](#j-companies) \t| [K](#k-companies) \t| [L](#l-companies) \t| [M](#m-companies) \t| [N](#n-companies) \t| [O](#o-companies) \t| [P](#p-companies) \t| [Q](#q-companies) \t|\n| [R](#r-companies) \t| [S](#s-companies) \t| [T](#t-companies) \t| [U](#u-companies) \t| [V](#v-companies) \t| [W](#w-companies) \t| [X](#x-companies) \t| [Y](#y-companies) \t| [Z](#z-companies)  \t|\n\n### [Individuals/Group Contributors](#individualsgroup-contributors-1)\n|   \t|   \t|   \t|   \t|   \t|   \t|   \t|   \t|   \t|\n|:-:  |:-:  |:-:  |:-:  |:-:  |:-:  |:-:  |:-:  |:-:  |\n| [#](#-individuals) \t| [A](#a-individuals) \t| [B](#b-individuals) \t| [C](#c-individuals) \t| [D](#d-individuals) \t| [E](#e-individuals) \t| [F](#f-individuals) \t| [G](#g-individuals) \t| [H](#h-individuals) \t|\n| [I](#i-individuals) \t| [J](#j-individuals) \t| [K](#k-individuals) \t| [L](#l-individuals) \t| [M](#m-individuals) \t| [N](#n-individuals) \t| [O](#o-individuals) \t| [P](#p-individuals) \t| [Q](#q-individuals) \t|\n| [R](#r-individuals) \t| [S](#s-individuals) \t| [T](#t-individuals) \t| [U](#u-individuals) \t| [V](#v-individuals) \t| [W](#w-individuals) \t| [X](#x-individuals) \t| [Y](#y-individuals) \t| [Z](#z-individuals)  \t|\n\n### [Products/Technologies](#productstechnologies-1)\n|   \t|   \t|   \t|   \t|   \t|   \t|   \t|   \t|   \t|\n|:-:  |:-:  |:-:  |:-:  |:-:  |:-:  |:-:  |:-:  |:-:  |\n| [#](#-technologies) \t| [A](#a-technologies) \t| [B](#b-technologies) \t| [C](#c-technologies) \t| [D](#d-technologies) \t| [E](#e-technologies) \t| [F](#f-technologies) \t| [G](#g-technologies) \t| [H](#h-technologies) \t|\n| [I](#i-technologies) \t| [J](#j-technologies) \t| [K](#k-technologies) \t| [L](#l-technologies) \t| [M](#m-technologies) \t| [N](#n-technologies) \t| [O](#o-technologies) \t| [P](#p-technologies) \t| [Q](#q-technologies) \t|\n| [R](#r-technologies) \t| [S](#s-technologies) \t| [T](#t-technologies) \t| [U](#u-technologies) \t| [V](#v-technologies) \t| [W](#w-technologies) \t| [X](#x-technologies) \t| [Y](#y-technologies) \t| [Z](#z-technologies)  \t|\n\n### Companies\n\n#### \\# companies\n* 500px https://developers.500px.com/\n* 8th Light https://8thlight.com/blog/\n* 99designs https://99designs.com/tech-blog/\n\n#### A companies\n* AdRoll http://tech.adroll.com/blog/\n* Addepar https://medium.com/build-addepar\n* Affinity https://build.affinity.co/\n* Airbrake https://airbrake.io/blog/\n* AirPair https://www.airpair.com/software-experts\n* Advanced Web Machinery https://advancedweb.hu/\n* Airbnb https://medium.com/airbnb-engineering\n* Airtame https://airtame.engineering\n* Algolia https://blog.algolia.com/\n* Allegro.tech https://allegro.tech\n* Appnexus https://techblog.appnexus.com/\n* Arkency http://blog.arkency.com/\n* Artsy http://artsy.github.io/\n* Asana https://blog.asana.com/category/eng/\n* Atlassian https://developer.atlassian.com/blog/\n* Atomic Object https://spin.atomicobject.com/\n* Auth0 https://auth0.com/blog/\n* Avenue Code http://blog.avenuecode.com/\n* AWS https://aws.amazon.com/blogs/aws/\n* Azavea https://www.azavea.com/blog/category/software-development/\n\n#### B companies\n* Babbel https://bytes.babbel.com/en/\n* Backtrace https://backtrace.io/blog/\n* Badoo https://techblog.badoo.com/\n* Baidu Research http://research.baidu.com/Blog\n* Bandcamp https://bandcamptech.wordpress.com/\n* Base Lab https://lab.getbase.com/category/engineering/\n* Bazaarvoice https://blog.developer.bazaarvoice.com/\n* BBC https://medium.com/bbc-design-engineering/\n* Benchling https://benchling.engineering/\n* BenefitFocus https://www.benefitfocus.com/blogs/design-engineering\n* Bigcommerce http://www.bigeng.io/\n* Binary Studio https://binary-studio.com/blog/\n* Bitly http://word.bitly.com/\n* BitTorrent http://engineering.bittorrent.com/\n* BlaBlaCar http://blablatech.com/blog/\n* BlackRock http://rockthecode.io/\n* Blender https://code.blender.org/\n* Blogfoster http://engineering.blogfoster.com/\n* BloomReach http://engineering.bloomreach.com/\n* Booking.com https://blog.booking.com/\n* Box https://www.box.com/blog/engineering/\n* Boxever http://www.boxever.com/blog/\n* Brandwatch http://engineering.brandwatch.com/\n* Buzzfeed https://www.buzzfeed.com/techblog\n\n#### C companies\n* Canva https://engineering.canva.com\n* Capgemini https://capgemini.github.io/\n* CenturyLink https://www.ctl.io/developers/blog\n* Cerner http://engineering.cerner.com/\n* Chaps https://blog.chaps.io/\n* Chartbeat http://engineering.chartbeat.com/\n* Chef https://blog.chef.io\n* Clever https://engineering.clever.com/\n* CleverTap https://clevertap.com/blog/tag/engineering/\n* CloudBees https://www.cloudbees.com/blog\n* Cloudera https://blog.cloudera.com/\n* Cloudflare https://blog.cloudflare.com/\n* CockroachDB https://www.cockroachlabs.com/blog/\n* Code Better http://codebetter.com/\n* Codelitt https://www.codelitt.com/blog/\n* Codemancers https://crypt.codemancers.com/\n* Codementor https://www.codementor.io/tutorial\n* CodeName One http://www.codenameone.com/blog.html\n* Codeship https://blog.codeship.com/\n* Coinbase https://engineering.coinbase.com/\n* Collective Idea https://collectiveidea.com/blog\n* Commercetools https://techblog.commercetools.com/\n* Condé Nast https://technology.condenast.com/\n* Confluent https://www.confluent.io/blog\n* Convox https://convox.com/blog\n* Coolblue http://devblog.coolblue.nl/\n* Criteo http://engineering.criteolabs.com/\n* Crowdfire https://crowdfire.engineering/\n* Curalate http://engineering.curalate.com/\n\n#### D companies\n* Dailymotion http://engineering.dailymotion.com/\n* Data Artisans https://data-artisans.com/blog/\n* Databricks https://databricks.com/blog\n* DataFox http://eng.datafox.co/\n* Deezer https://deezer.io/\n* DeferPanic https://deferpanic.com/blog/\n* Deis https://deis.com/blog\n* Deliveroo https://deliveroo.engineering/\n* DigitalOcean https://www.digitalocean.com/community/tutorials\n* Discord https://blog.discordapp.com/\n* Docker https://blog.docker.com/category/engineering/\n* DoorDash https://blog.doordash.com/tagged/engineering\n* Drivy https://drivy.engineering/\n* Dropbox https://blogs.dropbox.com/tech/\n\n#### E companies\n* Ebay http://www.ebaytechblog.com/\n* eFounders https://medium.com/unexpected-token\n* Eharmony http://www.eharmony.com/engineering/\n* Elastic https://www.elastic.co/blog/category/engineering\n* Engine Yard https://blog.engineyard.com/\n* Entelo https://sourcecode.entelo.com/\n* Envato https://webuild.envato.com/\n* Envoy https://envoy.engineering/\n* Erlang Solutions https://www.erlang-solutions.com/blog.html\n* Etsy https://codeascraft.com/\n* Eventbrite https://www.eventbrite.com/engineering/\n* Evernote https://evernote.com/blog/\n* Evil Martians https://evilmartians.com/chronicles/\n* Expedia https://techblog.expedia.com/\n\n#### F companies\n* Facebook https://code.facebook.com/posts/\n* Facebook AI Research https://research.facebook.com/blog/ai/\n* Faraday http://blog.faraday.io/\n* Feedzai https://medium.com/feedzaitech\n* Fiftythree http://making.fiftythree.com/\n* Findmypast http://tech.findmypast.com/\n* Finn.no http://tech.finn.no/\n* Firmafon https://dev.firmafon.dk/blog/\n* Flickr http://code.flickr.net/\n* Flipboard http://engineering.flipboard.com/\n* Foursquare https://engineering.foursquare.com/\n* Freeletics https://freeletics.engineering/\n* Funding Circle https://engineering.fundingcircle.com/\n* Future Processing https://www.future-processing.pl/technical-blog/\n* Fynd http://gofynd.io/blog\n\n#### G companies\n* Galois https://galois.com/blog/\n* GameChanger http://tech.gc.com/\n* Geoblink https://tech.geoblink.com\n* Gilt http://tech.gilt.com\n* GIPHY https://engineering.giphy.com/\n* GitHub https://githubengineering.com/\n* GitHub Old https://github.com/blog/category/engineering\n* GoCardless https://gocardless.com/blog/tagged/engineering/\n* Good Eggs https://team.goodeggs.com\n* Google Online Security https://security.googleblog.com/\n* Google Research https://research.googleblog.com/\n* GoSquared https://engineering.gosquared.com/\n* GO-JEK https://blog.gojekengineering.com/\n* Grab http://engineering.grab.com/\n* Grafana https://grafana.com/blog/\n* Grammarly https://tech.grammarly.com/blog/index.html\n* Graphcool https://blog.graph.cool/\n* Grofers https://lambda.grofers.com/\n* Grouper http://blog.joingrouper.com/\n* Groupon https://engineering.groupon.com/\n* Guardian https://www.theguardian.com/info/developer-blog\n* Gusto http://engineering.gusto.com/\n\n#### H companies\n* HackerEarth http://engineering.hackerearth.com/\n* Haptik https://haptik.ai/tech/\n* Harry's http://engineering.harrys.com/\n* Hashnode https://hashnode.blog/\n* Hashrocket https://hashrocket.com/blog\n* Haus https://engineering.haus.com\n* Heap https://heap.engineering/\n* HERE https://developer.here.com/blog\n* Heroku https://blog.heroku.com/engineering\n* HireArt http://code.hireart.com/\n* HomeAway https://tech.homeaway.com/\n* Honeybadger http://blog.honeybadger.io/\n* Hootsuite http://code.hootsuite.com/\n* Hostinger https://www.hostinger.com/blog/engineering/\n* Housing.com https://medium.com/engineering-housing\n* HubSpot http://product.hubspot.com/blog/topic/engineering\n\n#### I companies\n* IBM developerWorks https://developer.ibm.com/dwblog/\n* IFTTT http://engineering.ifttt.com/\n* IMVU https://engineering.imvu.com/\n* Imaginea https://blog.imaginea.com/\n* Imgur https://blog.imgur.com/category/eng/\n* Indeed http://engineering.indeedblog.com/blog/\n* Instacart https://tech.instacart.com/\n* Instagram https://engineering.instagram.com/\n* Intel https://software.intel.com/en-us/blogs/\n* Intent HQ http://engineering.intenthq.com/\n* Intent Media http://intentmedia.com/blog/\n* Intercom https://engineering.intercom.io/\n* Intuit https://quickbooks-engineering.intuit.com/\n* InVision http://engineering.invisionapp.com/\n\n#### J companies\n* Jane Street https://blogs.janestreet.com/category/ocaml/\n* Jet Technology https://tech.jet.com/\n* Jobandtalent https://jobandtalent.engineering/\n* JobTeaser https://medium.com/jobteaser-dev-team/\n* Jolly Good Code https://jollygoodcode.github.io/\n* Just Eat https://tech.just-eat.com/\n\n#### K companies\n* Khan Academy http://engineering.khanacademy.org\n* Kickstarter https://www.kickstarter.com/backing-and-hacking\n* King https://techblog.king.com/\n* Kinvolk https://kinvolk.io/blog/\n* Kogan.com https://devblog.kogan.com/\n* Kolosek https://kolosek.com/blog/\n\n#### L companies\n* Latacora https://latacora.singles/\n* Laterooms http://engineering.laterooms.com/\n* LendingHome https://tech.lendinghome.com/\n* LINE https://engineering.linecorp.com/en/blog\n* LinkedIn https://engineering.linkedin.com/blog\n* LiveChat https://developers.livechatinc.com/blog/\n* LiveRamp https://liveramp.com/engineering/\n* Localytics http://eng.localytics.com/\n* Lyft https://eng.lyft.com/\n\n#### M companies\n* Made Tech https://www.madetech.com/blog\n* Mallow Tech http://blog.mallow-tech.com/\n* MailChimp https://devs.mailchimp.com/blog/\n* Mandrill http://blog.mandrill.com/\n* MapTiler https://www.maptiler.com/blog/\n* Medallia http://engineering.medallia.com/blog/\n* Medium https://medium.com/medium-eng\n* MemSQL http://blog.memsql.com/content/engineering/\n* Mesosphere https://mesosphere.com/blog/\n* Microsoft Python Engineering https://blogs.msdn.microsoft.com/pythonengineering/\n* Mixmax https://mixmax.com/blog/tag/engineering\n* Mixpanel https://code.mixpanel.com/\n* MongoDB https://engineering.mongodb.com/\n* Monsanto http://engineering.monsanto.com/\n* Moove-it https://blog.moove-it.com/\n* Mozilla Automation Team https://planet.mozilla.org/ateam/\n* Mozilla Hacks https://hacks.mozilla.org/\n* Mozilla Release Engineering https://planet.mozilla.org/releng/\n* Myntra https://medium.com/myntra-engineering\n* Myntra Data Science http://sartorialscience.myntrablogs.com/\n\n#### N companies\n* Netflix https://medium.com/netflix-techblog\n* New York Times https://open.blogs.nytimes.com\n* Nextdoor https://engblog.nextdoor.com/\n* Nordic APIs https://nordicapis.com/blog/\n* Novoda https://www.novoda.com/blog/\n* NPR Apps http://blog.apps.npr.org/\n* Nvidia https://blogs.nvidia.com/\n\n#### O companies\n* OCTO Technology https://blog.octo.com/en/\n* Okta https://developer.okta.com/blog/\n* OLX https://tech.olx.com/\n* OmniTI https://omniti.com/seeds/stop-collaborate-and-listen-notify\n* OpenDNS https://engineering.opendns.com/\n* OpenTable http://tech.opentable.com/\n* OpenTable UK http://tech.opentable.co.uk/\n* Oursky https://code.oursky.com/\n* Oyster http://tech.oyster.com/\n* Opensooq http://engineering.opensooq.com/\n\n#### P companies\n* Panorama Education http://engineering.panoramaed.com/\n* Paperless Post https://www.paperlesspost.com/blog/teams/tech/\n* Paypal https://www.paypal-engineering.com/\n* Periscope Data https://www.periscopedata.com/blog\n* PicCollage https://tech.pic-collage.com/\n* Pinterest https://medium.com/@Pinterest_Engineering\n* Pivotal https://engineering.pivotal.io\n* Pluralsight https://www.pluralsight.com/guides\n* Postmark https://postmarkapp.com/blog\n* Postmates https://blog.postmates.com/tagged/engineering\n* Prezi https://medium.com/prezi-engineering\n* Prolific Interactive http://blog.prolificinteractive.com/category/development/\n* PubNub: https://www.pubnub.com/blog/\n* PullReview http://blog.8thcolor.com/\n* Pusher https://making.pusher.com/\n\n#### Q companies\n* Quora https://engineering.quora.com/\n\n#### R companies\n* Raizlabs https://www.raizlabs.com/dev/\n* RapidAPI http://blog.rapidapi.com/\n* REA Group http://rea.tech/engineering/\n* Realm.io https://realm.io/news/\n* Redbubble http://artplustech.com/\n* Redino http://redino.net/blog/\n* Red Hat https://developers.redhat.com/blog/\n* Remind http://engineering.remind.com/\n* RetailMeNot https://medium.com/retailmenot-engineering/\n* Rightscale http://eng.rightscale.com/\n* Riot Games https://engineering.riotgames.com/\n* RisingStack https://blog.risingstack.com/\n* Robert Elder Software http://blog.robertelder.org/\n* RoseHosting https://www.rosehosting.com/blog/\n* Runtastic https://www.runtastic.com/blog/en/category/tech/\n\n#### S companies\n* Salesforce https://developer.salesforce.com/blogs/engineering/\n* Schibsted Tech Polska http://www.schibsted.pl/blog/\n* Scrapinghub https://blog.scrapinghub.com/\n* Scrunch https://tech.scrunch.com/blog/\n* Secret Escapes http://tech.secretescapes.com/\n* Segment https://segment.com/blog/categories/engineering/\n* Semantics3 https://engineering.semantics3.com\n* Semaphore CI Community https://semaphoreci.com/community\n* Semaphore CI Engineering http://semaphoreci.com/blog/tags/engineering.html\n* Sensible http://blog.sensible.io/\n* Serverless https://serverless.com/blog/\n* Settled https://engineroom.settled.co.uk/\n* Shape Security http://engineering.shapesecurity.com/\n* Sharethis https://www.sharethis.com/category/engineering/\n* Shazam https://blog.shazam.com/\n* Shopify https://engineering.shopify.com\n* ShowMax https://tech.showmax.com\n* Shyp https://medium.com/shyp-engineering\n* Sift Science https://blog.siftscience.com/?category=Engineering\n* Simple https://www.simple.com/engineering\n* SitePoint https://sitepoint.com\n* Sky Betting \u0026 Gaming http://engineering.skybettingandgaming.com/\n* Skyscanner http://codevoyagers.com/\n* Slack https://slack.engineering/\n* SlideShare https://engineering.linkedin.com/blog/topic/slideshare\n* Small Improvements https://tech.small-improvements.com/\n* SmartRecruiters https://up.smartrecruiters.com\n* Snyk https://snyk.io/blog\n* Songkick https://devblog.songkick.com/\n* Soshace https://blog.soshace.com/en/\n* Soundcloud https://developers.soundcloud.com/blog/\n* SourceClear https://blog.sourceclear.com/\n* Speedledger http://engineering.speedledger.com/\n* Spotify https://labs.spotify.com/\n* Sqreen https://blog.sqreen.io/\n* Square https://corner.squareup.com/\n* Squarespace https://engineering.squarespace.com/\n* Stack Overflow https://stackoverflow.blog/engineering/\n* Stitch Fix http://multithreaded.stitchfix.com/blog/\n* Stormpath https://stormpath.com/blog/\n* Strava https://medium.com/strava-engineering/\n* Stride https://blog.stridenyc.com/\n* Stripe https://stripe.com/blog\n* SurveyMonkey https://engineering.surveymonkey.com/\n\n#### T companies\n* Takipi http://blog.takipi.com/\n* Target https://target.github.io/\n* TaskRabbit http://tech.taskrabbit.com/\n* Teamwork https://engineroom.teamwork.com/\n* Teespring http://teespring.engineering/\n* theScore http://techblog.thescore.com/\n* Thoughtbot https://robots.thoughtbot.com/\n* ThoughtWorks https://www.thoughtworks.com/insights\n* Thumbtack https://www.thumbtack.com/engineering/\n* Ticketmaster https://tech.ticketmaster.com/\n* Timescale https://blog.timescale.com/\n* Tinder https://tech.gotinder.com/\n* Toptal https://www.toptal.com/blog/\n* TrackMaven http://engineroom.trackmaven.com/\n* Transferwise http://tech.transferwise.com/\n* Trello https://tech.trello.com/\n* TripAdvisor http://engineering.tripadvisor.com/\n* Trivago http://tech.trivago.com/\n* TrueCar https://www.drivenbycode.com/\n* Tumblr https://engineering.tumblr.com/\n* Twilio https://www.twilio.com/blog/\n* Twitter https://blog.twitter.com/engineering\n* Twitch https://blog.twitch.tv/tagged/engineering\n\n#### U companies\n* Uber http://eng.uber.com/\n* Universe https://engineering.universe.com\n* Upday https://upday.github.io/\n* UpGrad https://engineering.upgrad.com\n\n#### V companies\n* Vena Solutions https://engineering.vena.io/\n* Venmo http://blog.venmo.com/?category=Engineering\n* VersionEye https://blog.versioneye.com/\n* Vevo http://blog.vevo.com/\n* Viget https://www.viget.com/articles/category/code#articles\n* Vine http://engineering.vine.co/\n* Vinted http://engineering.vinted.com/\n* VNGRS http://blog.vngrs.com/\n* VTS https://buildingvts.com/\n\n#### W companies\n* WalmartLabs https://medium.com/walmartlabs/\n* Wattpad http://engineering.wattpad.com/\n* Wayfair http://engineering.wayfair.com/\n* Wealthfront http://eng.wealthfront.com/\n* We Are Wizards https://blog.wearewizards.io/\n* WebEngage http://engineering.webengage.com/\n* Wemake.services https://medium.com/wemake-services\n* WePay https://wecode.wepay.com/\n* Wimdu http://tech.wimdu.com/\n* Wingify http://engineering.wingify.com/\n* Wix https://www.wix.engineering/blog\n* Wolox https://medium.com/@WoloxEngineering/\n* Wombat Security Technologies http://development.wombatsecurity.com/\n* Wonga Technology http://tech.wonga.com/\n* WyeWorks https://wyeworks.com/blog/\n\n#### X companies\n* XING https://tech.xing.com/\n* Xmartlabs https://blog.xmartlabs.com/\n\n#### Y companies\n* Yahoo https://yahooeng.tumblr.com/\n* Yammer https://medium.com/yammer-engineering\n* Yelp https://engineeringblog.yelp.com/\n* YLD! https://blog.yld.io\n\n#### Z companies\n* Zalando https://tech.zalando.com/blog/\n* Zapier https://zapier.com/engineering/\n* ZeeMee https://zeemee.engineering/\n* Zendesk https://medium.com/zendesk-engineering\n* Zendesk(old) https://developer.zendesk.com/blog\n* Zenefits https://engineering.zenefits.com/posts/\n* Zillow https://www.zillow.com/engineering/\n* Zomato https://engineering.zomato.com/\n* Zoosk https://about.zoosk.com/en/engineering-blog/\n* Zulily https://engineering.zulily.com/\n* Zumba http://tech.zumba.com/\n* Zynga https://www.zynga.com/blogs/engineering\n\n### Individuals/Group Contributors\n\n#### \\# individuals\n* 0xADADA https://0xadada.pub/\n\n#### A individuals\n* Aaron Patterson http://tenderlovemaking.com/\n* Abhinaba Basu https://blogs.msdn.com/b/abhinaba/\n* Abu Ashraf Masnun http://masnun.com/\n* Adam Bard https://adambard.com/blog/\n* Adam Leventhal http://dtrace.org/blogs/ahl/\n* Adam Tuliper http://www.adamtuliper.com/\n* Addy Osmani https://addyosmani.com/blog/\n* Adrian Colyer https://blog.acolyer.org/\n* Alan Storm http://alanstorm.com/\n* Alex Rogozhnikov https://arogozhnikov.github.io/\n* Alex Russell https://infrequently.org/\n* Allison Kaptur http://akaptur.com/\n* Amit Merchant https://www.amitmerchant.com/\n* Anders Aarvik http://aarvik.dk/\n* Andreas Schuster https://computer.forensikblog.de/en/\n* Andrew Bancroft http://www.andrewcbancroft.com/\n* Andrew Brampton https://blog.bramp.net/\n* Andrew Ray https://blog.andrewray.me/\n* Andrey Akinshin http://aakinshin.net/blog/\n* Antirez http://antirez.com/latest/0\n* Ariejan de Vroom https://ariejan.net/\n* Ariya Hidayat https://ariya.io/\n* Armin Ronacher http://lucumr.pocoo.org/\n* Axel Rauschmayer http://www.2ality.com/\n\n#### B individuals\n* Bad Concurrency http://bad-concurrency.blogspot.com/\n* Barry Warsaw https://www.wefearchange.org/\n* Bartlomiej Filipek http://www.bfilipek.com/\n* Ben McCormick https://benmccormick.org/\n* Bill the Lizard http://www.billthelizard.com/\n* Bjørn Johansen https://bjornjohansen.no/\n* Blake Erickson https://blog.blakeerickson.com/\n* Blundell's Android Tutorials http://blog.blundellapps.co.uk\n* Bohops https://bohops.com/\n* Brandon Rhodes http://rhodesmill.org/brandon/\n* Brendan Eich https://brendaneich.com/\n* Brendan Gregg http://www.brendangregg.com/blog/\n* Brujo Benavides https://medium.com/@elbrujohalcon\n* Bryan Cantrill http://dtrace.org/blogs/bmc/\n\n#### C individuals\n* Carlos Becker https://carlosbecker.com\n* Chen Hui Jing https://www.chenhuijing.com/blog/\n* Chien Tran http://thelazylog.com/\n* Chris Hager https://www.metachris.com/blog/\n* Chris Wellons http://nullprogram.com/\n* Clay McLeod http://blog.claymcleod.io/\n* Cocoa Is My Girlfriend http://www.cimgf.com/\n* Code with style! https://codewithstyle.info/\n* Codrops https://tympanus.net/codrops/\n\n#### D individuals\n* Daily JS https://medium.com/dailyjs\n* Daily Tech Video http://dailytechvideo.com/\n* Dan Luu https://danluu.com/\n* Daniel Doubrovkine (dB.) http://code.dblock.org/\n* Daniel Schmidt https://medium.com/@dschmidt1992\n* Dave Atchley http://www.datchley.name/\n* Dave Beazley http://www.dabeaz.com/blog.html\n* Dave Cheney https://dave.cheney.net/\n* David Walsh https://davidwalsh.name/\n* Dean Hume http://deanhume.com/\n* Deborah Digges http://deborah-digges.github.io/\n* Dennis Felsing https://hookrace.net/\n* Dennis Yurichev https://yurichev.com/blog/\n* Dereuromark http://www.dereuromark.de/\n* Discover Meteor https://www.discovermeteor.com/blog\n* Domenico Luciani https://domenicoluciani.com\n* Dot Dev (.dev) https://dotdev.co\n* Dragan Djuric http://dragan.rocks\n* Dragan Gaic http://www.gajotres.net/\n* Drew DeVault https://drewdevault.com/\n\n#### E individuals\n* Edan Kwan http://blog.edankwan.com/\n* Eddie Smith http://www.practicallyefficient.com/\n* Edgar Aroutiounian https://hyegar.com/\n* Edward Faulkner https://eaf4.com/\n* Elegant Code http://elegantcode.com/\n* Eli Bendersky http://eli.thegreenplace.net/\n* Eric Elliot https://medium.com/javascript-scene/\n* Eric Lippert https://ericlippert.com/\n* Erik Runyon https://erikrunyon.com/\n* Evan Hahn http://evanhahn.com/\n* Evan Jones http://www.evanjones.ca/chronological.html\n* Evan Miller http://www.evanmiller.org/\n* Evan Tahler https://blog.evantahler.com/\n\n#### F individuals\n* Fabrizio Branca http://fbrnc.net/\n* Federico Cargnelutti https://blog.fedecarg.com/\n* Federico Tomassetti https://tomassetti.me/\n* Filippo Valsorda https://blog.filippo.io/\n* Freek Van der Herten https://murze.be/\n\n#### G individuals\n* Gleb Bahmutov https://glebbahmutov.com/blog/\n* Graham King https://www.darkcoding.net/\n* Grzegorz Gajos http://ggajos.com/\n* Guido van Rossum http://neopythonic.blogspot.com/\n* Guilherme Rodrigues https://firstdoit.com/\n\n#### H individuals\n* Hayden James https://haydenjames.io/\n* Henrik Lau Eriksson https://conductofcode.io/\n* Henrik Warne https://henrikwarne.com/\n* High Scalability http://highscalability.com/\n* Huon Wilson http://huonw.github.io/\n* Hypriot http://blog.hypriot.com/\n\n#### I individuals\n* Ian Hummel https://themodernlife.github.io/\n* Ian Sommerville http://iansommerville.com/systems-software-and-technology/\n* Idontgetoutmuch's Weblog https://idontgetoutmuch.wordpress.com/\n* Ievgen Kuzminov http://stdout.in/\n* Ilija Eftimov http://ieftimov.com/\n* Ilya Grigorik https://www.igvita.com/\n* Ivan Ursul https://ivanursul.com/\n\n#### J individuals\n* Jacopo Tarantino https://jack.ofspades.com/\n* Jake Trent https://jaketrent.com\n* Jake Wharton http://jakewharton.com/blog\n* Jake Yesbeck http://jakeyesbeck.com/\n* James Hague http://prog21.dadgum.com/\n* James Long http://jlongster.com/archive\n* Jamis Buck http://weblog.jamisbuck.org/\n* Jan Lelis https://idiosyncratic-ruby.com/\n* Jay Fields http://blog.jayfields.com\n* Jeff Atwood https://blog.codinghorror.com/\n* Jeff Preshing http://preshing.com/\n* Jeremy Kun https://jeremykun.com/\n* Jerry Gamblin https://jerrygamblin.com/\n* Jessie Frazelle https://blog.jessfraz.com/\n* Jesus Castello http://www.blackbytes.info/\n* Joe Armstrong https://joearms.github.io/\n* Joe Nelson https://begriffs.com/\n* Joel Spolsky https://www.joelonsoftware.com/\n* Johannes Brodwall http://johannesbrodwall.com/\n* John Resig https://johnresig.com/category/blog/\n* John Wittenauer http://www.johnwittenauer.net/\n* Jon Kensy http://www.jonkensy.com/\n* Jon Skeet https://codeblog.jonskeet.uk/\n* Jonas Plum https://blog.cugu.eu/\n* Jonathan Dekhtiar http://www.born2data.com/\n* Jonathan Snook https://snook.ca/\n* Josh Haberman http://blog.reverberate.org/\n* Josh Sherman https://joshtronic.com/\n* Juan Treminio https://jtreminio.com\n* Julia Evans https://jvns.ca/\n* Justin Weiss https://www.justinweiss.com/articles/archives/\n* Juri Strumpflohner https://juristr.com/blog/\n\n#### K individuals\n* K. Harrison https://useyourloaf.com/\n* Kai Hendry https://hendry.iki.fi/\n* Kevin Burke https://kev.inburke.com/\n* Kirill Shevchenko https://medium.com/@kirill_shevch\n* Kyle Kingsbury https://aphyr.com/\n\n#### L individuals\n* Lambda the Ultimate http://lambda-the-ultimate.org/\n* Larry Land https://lg.io/\n* Lazarus Lazaridis https://iridakos.com\n* Lea Verou http://lea.verou.me/\n* Lerner Consulting Blog http://blog.lerner.co.il/\n* Life Plus Linux http://lifepluslinux.blogspot.in/\n* LiveOverflow https://liveoverflow.com/blog/index.html\n* Luciano Mammino https://loige.co/\n\n#### M individuals\n* Manu Sporny http://manu.sporny.org/\n* Marc Plano-Lesay https://enoent.fr\n* Marcelo Rinesi https://blog.rinesi.com/\n* Marco Pivetta http://ocramius.github.io/\n* Marek Majkowski https://idea.popcount.org/\n* Mark Seaborn http://lackingrhoticity.blogspot.de/\n* Martin Fowler https://martinfowler.com/\n* Mary Rose Cook https://maryrosecook.com/blog/\n* Matt Aimonetti https://matt.aimonetti.net/\n* Matt Cutts https://www.mattcutts.com/blog/\n* Matt Might http://matt.might.net/articles/\n* Matt Warren http://mattwarren.org/\n* Matthew Green https://blog.cryptographyengineering.com/\n* Michael Crump https://michaelcrump.net/\n* Michaël Gallego http://www.michaelgallego.fr/articles/\n* Michael Herman http://mherman.org/\n* Miguel Quinones https://www.miqu.me/\n* Mike Ash https://www.mikeash.com/pyblog/\n* Mike Fogus http://blog.fogus.me/\n* Milosz Galazka https://blog.sleeplessbeastie.eu/\n* Miro Cupak https://mirocupak.com/\n* Monica Dinculescu https://meowni.ca/\n* Monstermuffin https://blog.monstermuffin.org/\n* Mykhailo Kozik http://mishadoff.com/\n\n#### N individuals\n* Natasha Murashev https://natashatherobot.com\n* Nelson Elhage https://blog.nelhage.com/\n* Nic Raboy https://blog.nraboy.com/\n* Nick Craver https://nickcraver.com/blog/\n* Nick Desaulniers https://nickdesaulniers.github.io/\n* Nick Galbreath http://www.client9.com/\n* Nicolas Liochon http://blog.thislongrun.com/\n* Nicolai Parlog (CodeFX) http://codefx.org\n* Nikola Brežnjak http://www.nikola-breznjak.com/blog/\n* Nikolay Nemshilov http://nikolay.rocks/\n* NSHipster http://nshipster.com/\n* Nate Berkopec http://www.nateberkopec.com/\n\n#### O individuals\n* Ofer Zelig https://fullstack.info\n* Ole Begemann https://oleb.net/blog/\n* Oona Räisänen http://www.windytan.com/\n\n#### P individuals\n* Pamela Fox http://blog.pamelafox.org/\n* Pat Shaughnessy http://patshaughnessy.net/\n* Paul Graham http://www.paulgraham.com/articles.html\n* Paul Irish https://www.paulirish.com/\n* Paul Lewis https://aerotwist.com/blog/\n* Paweł Chudzik https://blog.pchudzik.com/\n* Peter Norvig http://norvig.com/\n* Peter Steinberger http://petersteinberger.com/\n* Peteris Krumins http://www.catonmat.net/blog/\n* Petr Mitrichev http://petr-mitrichev.blogspot.com/\n* Philip Walton https://philipwalton.com/\n* Philipp Oppermann https://os.phil-opp.com/\n* Pony Foo https://ponyfoo.com/\n* Piotr Pasich http://piotrpasich.com/\n* Piotr Wittchen http://blog.wittchen.biz.pl/\n\n#### R individuals\n* Rachel Kroll https://rachelbythebay.com/w/\n* Radek Pazdera http://radek.io\n* Radim Řehůřek https://radimrehurek.com/blog/\n* Ramon Fried https://nativeguru.wordpress.com/\n* Ray Wenderlich https://www.raywenderlich.com/\n* Raymond Chen https://blogs.msdn.microsoft.com/oldnewthing/\n* Raymond Hettinger https://rhettinger.wordpress.com/\n* ReactJS News https://reactjsnews.com\n* Real Python https://realpython.com/blog/\n* Reginald Braithwaite http://raganwald.com/#essays\n* Regular Geek http://regulargeek.com/\n* Rob Allen https://akrabat.com/\n* Robert C. Martin http://blog.cleancoder.com/\n* Robin Ward https://eviltrout.com/\n* Robin Wilson http://blog.rtwilson.com/\n* Rudy Huyn http://www.rudyhuyn.com/blog/\n* Rudolf Olah https://neverfriday.com/blog/\n* Ruslan Spivak https://ruslanspivak.com/\n\n#### S individuals\n* Sakib Sami https://www.sakib.ninja\n* Sam Saffron https://samsaffron.com/\n* Sergey Zhuk http://sergeyzhuk.me/\n* Scott Hanselman http://www.hanselman.com/blog/\n* Scott Johnson http://www.fuzzyblog.io/blog/\n* Simon Reimler https://devdactic.com/devblog/\n* Srinivas Tamada https://www.9lessons.info/\n* Stack Abuse http://www.stackabuse.com/\n* Stefan Parker http://codebeforethehorse.tumblr.com/\n* Stephen Colebourne http://blog.joda.org/\n* Steve Bellovin https://www.cs.columbia.edu/~smb/blog/control/\n* Steve Yegge https://steve-yegge.blogspot.com/\n* Sudhagar http://sudhagar.com/\n* Swizec Teller https://swizec.com/blog/\n\n#### T individuals\n* Tero Parviainen http://teropa.info/\n* That Thing In Swift https://thatthinginswift.com/\n* The Coded Self http://www.thecodedself.com\n* The Daily WTF http://thedailywtf.com/\n* Thomas Young http://upcoder.com\n* Tikhon Jelvis http://jelv.is/blog/\n* Todd Motto https://toddmotto.com/\n* T.J. Maher http://adventuresinautomation.blogspot.com/\n\n#### U individuals\n* Una Kravets https://una.im/\n* Undocumented Matlab http://undocumentedmatlab.com/\n\n#### V individuals\n* Vanilla Java http://vanillajava.blogspot.com/\n* Vlad Mihalcea https://vladmihalcea.com/\n\n#### W individuals\n* Wilfred Hughes http://www.wilfred.me.uk/\n* William Kennedy https://www.goinggo.net/\n* Wojtek Gawroński http://www.afronski.pl/\n\n#### Y individuals\n* Yegor Bugayenko http://www.yegor256.com/\n* Yifan Lu http://yifan.lu/\n\n#### Z individuals\n* Zach Holman https://zachholman.com/\n* Zolmeister https://zolmeister.com/\n\n### Products/Technologies\n\n#### A technologies\n* Android https://android-developers.blogspot.com/\n* Atom.io http://blog.atom.io/\n\n#### B technologies\n* Bootstrap.com https://blog.getbootstrap.com/\n\n#### C technologies\n* Crystal https://crystal-lang.org/\n\n#### G technologies\n* Go https://blog.golang.org/\n\n#### I technologies\n* IPFS https://ipfs.io/blog/\n\n#### J technologies\n* jOOQ https://blog.jooq.org/\n\n#### K technologies\n* Klipse http://blog.klipse.tech/\n* Kotlin https://blog.jetbrains.com/kotlin/\n\n#### L technologies\n* Laravel https://laravel-news.com/blog/\n\n#### M technologies\n* Microsoft Edge https://blogs.windows.com/msedgedev/\n\n#### N technologies\n* .NET https://blogs.msdn.microsoft.com/dotnet/\n\n#### R technologies\n* React https://facebook.github.io/react/blog/\n* React Native http://facebook.github.io/react-native/blog/\n* Red http://www.red-lang.org\n* RocksDB http://rocksdb.org/blog\n* Rust https://blog.rust-lang.org/\n\n#### S technologies\n* Sketch https://blog.sketchapp.com/\n* Swift https://developer.apple.com/swift/blog/\n\n#### V technologies\n* Vertabelo http://www.vertabelo.com/blog\n\n----\n\n# RSS feeds\n\nYou can find an opml file to import rss feeds here: [engineering_blogs.opml](./engineering_blogs.opml)\n\n# Contributing\n\nContributions welcome! Read the [contribution guidelines](contributing.md) first.\n\n# License\n\nLicensed under a \u003ca rel=\"license\" href=\"https://creativecommons.org/licenses/by-sa/4.0/\"\u003eCreative Commons Attribution-ShareAlike 4.0 International License\u003c/a\u003e.\n"
  },
  {
    "repo": "rapid7/metasploit-framework",
    "content": "Metasploit [![Build Status](https://travis-ci.org/rapid7/metasploit-framework.svg?branch=master)](https://travis-ci.org/rapid7/metasploit-framework) [![Code Climate](https://img.shields.io/codeclimate/github/rapid7/metasploit-framework.svg)](https://codeclimate.com/github/rapid7/metasploit-framework) [![Docker Pulls](https://img.shields.io/docker/pulls/metasploitframework/metasploit-framework.svg)](https://hub.docker.com/r/metasploitframework/metasploit-framework/)\n==\nThe Metasploit Framework is released under a BSD-style license. See\nCOPYING for more details.\n\nThe latest version of this software is available from: https://metasploit.com\n\nBug tracking and development information can be found at:\n https://github.com/rapid7/metasploit-framework\n\nNew bugs and feature requests should be directed to:\n  https://r-7.co/MSF-BUGv1\n\nAPI documentation for writing modules can be found at:\n  https://rapid7.github.io/metasploit-framework/api\n\nQuestions and suggestions can be sent to: Freenode IRC channel or e-mail the metasploit-hackers mailing list\n\nInstalling\n--\n\nGenerally, you should use [the free installer](https://github.com/rapid7/metasploit-framework/wiki/Nightly-Installers),\nwhich contains all of the dependencies and will get you up and running with a\nfew clicks. See the [Dev Environment Setup](https://r-7.co/MSF-DEV) if\nyou'd like to deal with dependencies on your own.\n\nUsing Metasploit\n--\nMetasploit can do all sorts of things. The first thing you'll want to do\nis start `msfconsole`, but after that, you'll probably be best served by\nreading [Metasploit Unleashed][unleashed], the [great community\nresources](https://metasploit.github.io), or the [wiki].\n\nContributing\n--\nSee the [Dev Environment Setup][wiki-devenv] guide on GitHub, which will\nwalk you through the whole process from installing all the\ndependencies, to cloning the repository, and finally to submitting a\npull request. For slightly more information, see\n[Contributing](https://github.com/rapid7/metasploit-framework/blob/master/CONTRIBUTING.md).\n\n\n[wiki]: https://github.com/rapid7/metasploit-framework/wiki\n[wiki-devenv]: https://github.com/rapid7/metasploit-framework/wiki/Setting-Up-a-Metasploit-Development-Environment \"Metasploit Development Environment Setup\"\n[wiki-start]: https://github.com/rapid7/metasploit-framework/wiki/ \"Metasploit Wiki\"\n[wiki-usage]: https://github.com/rapid7/metasploit-framework/wiki/Using-Metasploit \"Using Metasploit\"\n[unleashed]: https://www.offensive-security.com/metasploit-unleashed/ \"Metasploit Unleashed\"\n\n\n"
  },
  {
    "repo": "Homebrew/homebrew-cask",
    "content": "# Homebrew Cask\n\n_“To install, drag this icon…” no more!_\n\nHomebrew Cask extends [Homebrew](https://brew.sh) and brings its elegance, simplicity, and speed to the installation and management of GUI macOS applications such as Atom and Google Chrome.\n\nWe do this by providing a friendly CLI workflow for the administration of macOS applications distributed as binaries.\n\n[![Join us on https://discourse.brew.sh](https://img.shields.io/badge/Discourse-forum-blue.svg)](https://discourse.brew.sh)\n\n## Let’s try it!\n\nTo start using Homebrew Cask, you just need [Homebrew](https://brew.sh/) installed.\n\n\u003cimg src=\"https://i.imgur.com/dPgmLax.gif\" width=\"673\" alt=\"Installing Atom (animated gif)\"\u003e\n\nSlower, now:\n\n```\n$ brew cask install atom\n==\u003e Satisfying dependencies\ncomplete\n==\u003e Downloading https://github.com/atom/atom/releases/download/v1.8.0/atom-mac.zip\n######################################################################## 100.0%\n==\u003e Verifying checksum for Cask atom\n==\u003e Moving App 'Atom.app' to '/Applications/Atom.app'\n==\u003e Symlinking Binary 'apm' to '/usr/local/bin/apm'\n==\u003e Symlinking Binary 'atom.sh' to '/usr/local/bin/atom'\n🍺  atom was successfully installed!\n```\n\nAnd there we have it. Atom installed with one quick command: no clicking, no dragging, no dropping.\n\n## Learn More\n\n* Find basic documentation on using Homebrew Cask in [USAGE.md](USAGE.md)\n* Want to contribute a Cask? Awesome! See [CONTRIBUTING.md](CONTRIBUTING.md)\n* Want to hack on our code? Also awesome! See [hacking.md](doc/development/hacking.md)\n* More project-related details and discussion are available in the [documentation](doc)\n\n## Reporting bugs\n\n[**If you ignore this guide, your issue may be closed without review**](doc/faq/closing_issues_without_review.md).\n\nBefore reporting a bug, run `brew update-reset \u0026\u0026 brew update` and try your command again. This will ensure the problem isn’t an outdated setup on your side. Note this command is a fix-all that will reset the state of all your taps, so if you have changes on those that you want to keep, deal with them first.\n\nIf your issue persists, search for it before opening a new one. If you find an open issue and have any new information not reported in the original, please add your insights. If you find a closed issue, try the solutions there.\n\n If the issue is still not solved, see the guides for common problems:\n\n* A cask fails to install:\n  * [`curl` error](doc/reporting_bugs/a_cask_fails_to_install.md#curl-error)\n  * [`Permission denied` error](doc/reporting_bugs/a_cask_fails_to_install.md#permission-denied-error)\n  * [`Checksum does not match` error](doc/reporting_bugs/a_cask_fails_to_install.md#checksum-does-not-match-error)\n  * [`source is not there` error](doc/reporting_bugs/a_cask_fails_to_install.md#source-is-not-there-error)\n  * [`wrong number of arguments` error](doc/reporting_bugs/a_cask_fails_to_install.md#wrong-number-of-arguments-error)\n  * [Unlisted reason](doc/reporting_bugs/a_cask_fails_to_install.md#unlisted-reason)\n* [The app can’t be opened because it is from an unidentified developer](doc/faq/the_app_cant_be_opened.md)\n* [`uninstall` wrongly reports cask as not installed](doc/reporting_bugs/uninstall_wrongly_reports_cask_as_not_installed.md)\n* [`Error: Unknown command: cask` error](doc/reporting_bugs/error_unknown_command_cask.md)\n* [My problem isn’t listed](https://github.com/Homebrew/homebrew-cask/issues/new?template=01_bug_report.md)\n\n## Requests\n\n* Cask requests will be automatically closed. If you want a cask added, [submit a pull request](https://github.com/Homebrew/homebrew-cask/blob/master/CONTRIBUTING.md#adding-a-cask).\n* For a feature request, [use this template](https://github.com/Homebrew/homebrew-cask/issues/new?template=02_feature_request.md).\n\n## Questions? Wanna chat?\n\nWe’re really rather friendly! Here are the best places to talk about the project:\n\n* If none of the templates above is appropriate, [open an issue](https://github.com/Homebrew/homebrew-cask/issues/new).\n* Join us on [discourse.brew.sh (forum)](https://discourse.brew.sh)\n\n## License\nCode is under the [BSD 2 Clause (NetBSD) license](LICENSE)\n"
  },
  {
    "repo": "twbs/bootstrap-sass",
    "content": "# Bootstrap 3 for Sass\n[![Gem Version](https://badge.fury.io/rb/bootstrap-sass.svg)](http://badge.fury.io/rb/bootstrap-sass)\n[![npm version](https://img.shields.io/npm/v/bootstrap-sass.svg?style=flat)](https://www.npmjs.com/package/bootstrap-sass)\n[![Bower Version](https://badge.fury.io/bo/bootstrap-sass.svg)](http://badge.fury.io/bo/bootstrap-sass)\n[![Build Status](https://img.shields.io/travis/twbs/bootstrap-sass.svg)](https://travis-ci.org/twbs/bootstrap-sass)\n\n`bootstrap-sass` is a Sass-powered version of [Bootstrap](https://github.com/twbs/bootstrap) 3, ready to drop right into your Sass powered applications.\n\nThis is Bootstrap **3**. For Bootstrap **4** use the [Bootstrap rubygem](https://github.com/twbs/bootstrap-rubygem) if you use Ruby, and the [main repo](https://github.com/twbs/bootstrap) otherwise.\n\n## Installation\n\nPlease see the appropriate guide for your environment of choice:\n\n* [Ruby on Rails](#a-ruby-on-rails).\n* [Bower](#b-bower).\n* [npm / Node.js](#c-npm--nodejs).\n\n### a. Ruby on Rails\n\n`bootstrap-sass` is easy to drop into Rails with the asset pipeline.\n\nIn your Gemfile you need to add the `bootstrap-sass` gem, and ensure that the `sass-rails` gem is present - it is added to new Rails applications by default.\n\n```ruby\ngem 'bootstrap-sass', '~\u003e 3.4.0'\ngem 'sassc-rails', '\u003e= 2.0.0'\n```\n\n`bundle install` and restart your server to make the files available through the pipeline.\n\nImport Bootstrap styles in `app/assets/stylesheets/application.scss`:\n\n```scss\n// \"bootstrap-sprockets\" must be imported before \"bootstrap\" and \"bootstrap/variables\"\n@import \"bootstrap-sprockets\";\n@import \"bootstrap\";\n```\n\n`bootstrap-sprockets` must be imported before `bootstrap` for the icon fonts to work.\n\nMake sure the file has `.scss` extension (or `.sass` for Sass syntax). If you have just generated a new Rails app,\nit may come with a `.css` file instead. If this file exists, it will be served instead of Sass, so rename it:\n\n```console\n$ mv app/assets/stylesheets/application.css app/assets/stylesheets/application.scss\n```\n\nThen, remove all the `*= require_self` and `*= require_tree .` statements from the sass file. Instead, use `@import` to import Sass files.\n\nDo not use `*= require` in Sass or your other stylesheets will not be [able to access][antirequire] the Bootstrap mixins or variables.\n\nBootstrap JavaScript depends on jQuery.\nIf you're using Rails 5.1+, add the `jquery-rails` gem to your Gemfile:\n\n```ruby\ngem 'jquery-rails'\n```\n\n```console\n$ bundle install\n```\n\nRequire Bootstrap Javascripts in `app/assets/javascripts/application.js`:\n\n```js\n//= require jquery\n//= require bootstrap-sprockets\n```\n\n`bootstrap-sprockets` and `bootstrap` [should not both be included](https://github.com/twbs/bootstrap-sass/issues/829#issuecomment-75153827) in `application.js`.\n\n`bootstrap-sprockets` provides individual Bootstrap Javascript files (`alert.js` or `dropdown.js`, for example), while\n`bootstrap` provides a concatenated file containing all Bootstrap Javascripts.\n\n#### Bower with Rails\n\nWhen using [bootstrap-sass Bower package](#c-bower) instead of the gem in Rails, configure assets in `config/application.rb`:\n\n```ruby\n# Bower asset paths\nroot.join('vendor', 'assets', 'bower_components').to_s.tap do |bower_path|\n  config.sass.load_paths \u003c\u003c bower_path\n  config.assets.paths \u003c\u003c bower_path\nend\n# Precompile Bootstrap fonts\nconfig.assets.precompile \u003c\u003c %r(bootstrap-sass/assets/fonts/bootstrap/[\\w-]+\\.(?:eot|svg|ttf|woff2?)$)\n# Minimum Sass number precision required by bootstrap-sass\n::Sass::Script::Value::Number.precision = [8, ::Sass::Script::Value::Number.precision].max\n```\n\nReplace Bootstrap `@import` statements in `application.scss` with:\n\n```scss\n$icon-font-path: \"bootstrap-sass/assets/fonts/bootstrap/\";\n@import \"bootstrap-sass/assets/stylesheets/bootstrap-sprockets\";\n@import \"bootstrap-sass/assets/stylesheets/bootstrap\";\n```\n\nReplace Bootstrap `require` directive in `application.js` with:\n\n```js\n//= require bootstrap-sass/assets/javascripts/bootstrap-sprockets\n```\n\n#### Rails 4.x\n\nPlease make sure `sprockets-rails` is at least v2.1.4.\n\n#### Rails 3.2.x\n\nbootstrap-sass is no longer compatible with Rails 3. The latest version of bootstrap-sass compatible with Rails 3.2 is v3.1.1.0.\n\n### b. Bower\n\nbootstrap-sass Bower package is compatible with node-sass 3.2.0+. You can install it with:\n\n```console\n$ bower install bootstrap-sass\n```\n\nSass, JS, and all other assets are located at [assets](/assets).\n\nBy default, `bower.json` main field list only the main `_bootstrap.scss` and all the static assets (fonts and JS).\nThis is compatible by default with asset managers such as [wiredep](https://github.com/taptapship/wiredep).\n\n#### Node.js Mincer\n\nIf you use [mincer][mincer] with node-sass, import Bootstrap like so:\n\nIn `application.css.ejs.scss` (NB **.css.ejs.scss**):\n\n```scss\n// Import mincer asset paths helper integration\n@import \"bootstrap-mincer\";\n@import \"bootstrap\";\n```\n\nIn `application.js`:\n\n```js\n//= require bootstrap-sprockets\n```\n\nSee also this [example manifest.js](/test/dummy_node_mincer/manifest.js) for mincer.\n\n### c. npm / Node.js\n```console\n$ npm install bootstrap-sass\n```\n\n\n## Configuration\n\n### Sass\n\nBy default all of Bootstrap is imported.\n\nYou can also import components explicitly. To start with a full list of modules copy\n[`_bootstrap.scss`](assets/stylesheets/_bootstrap.scss) file into your assets as `_bootstrap-custom.scss`.\nThen comment out components you do not want from `_bootstrap-custom`.\nIn the application Sass file, replace `@import 'bootstrap'` with:\n\n```scss\n@import 'bootstrap-custom';\n```\n\n### Sass: Number Precision\n\nbootstrap-sass [requires](https://github.com/twbs/bootstrap-sass/issues/409) minimum [Sass number precision][sass-precision] of 8 (default is 5).\n\nPrecision is set for Ruby automatically when using the `sassc-rails` gem.\nWhen using the npm or Bower version with Ruby, you can set it with:\n\n```ruby\n::Sass::Script::Value::Number.precision = [8, ::Sass::Script::Value::Number.precision].max\n```\n\n### Sass: Autoprefixer\n\nBootstrap requires the use of [Autoprefixer][autoprefixer].\n[Autoprefixer][autoprefixer] adds vendor prefixes to CSS rules using values from [Can I Use](https://caniuse.com/).\n\nTo match [upstream Bootstrap's level of browser compatibility](https://getbootstrap.com/getting-started/#support), set Autoprefixer's `browsers` option to:\n```json\n[\n  \"Android 2.3\",\n  \"Android \u003e= 4\",\n  \"Chrome \u003e= 20\",\n  \"Firefox \u003e= 24\",\n  \"Explorer \u003e= 8\",\n  \"iOS \u003e= 6\",\n  \"Opera \u003e= 12\",\n  \"Safari \u003e= 6\"\n]\n```\n\n### JavaScript\n\n[`assets/javascripts/bootstrap.js`](/assets/javascripts/bootstrap.js) contains all of Bootstrap's JavaScript,\nconcatenated in the [correct order](/assets/javascripts/bootstrap-sprockets.js).\n\n\n#### JavaScript with Sprockets or Mincer\n\nIf you use Sprockets or Mincer, you can require `bootstrap-sprockets` instead to load the individual modules:\n\n```js\n// Load all Bootstrap JavaScript\n//= require bootstrap-sprockets\n```\n\nYou can also load individual modules, provided you also require any dependencies.\nYou can check dependencies in the [Bootstrap JS documentation][jsdocs].\n\n```js\n//= require bootstrap/scrollspy\n//= require bootstrap/modal\n//= require bootstrap/dropdown\n```\n\n### Fonts\n\nThe fonts are referenced as:\n\n```scss\n\"#{$icon-font-path}#{$icon-font-name}.eot\"\n```\n\n`$icon-font-path` defaults to `bootstrap/` if asset path helpers are used, and `../fonts/bootstrap/` otherwise.\n\nWhen using bootstrap-sass with Compass, Sprockets, or Mincer, you **must** import the relevant path helpers before Bootstrap itself, for example:\n\n```scss\n@import \"bootstrap-compass\";\n@import \"bootstrap\";\n```\n\n## Usage\n\n### Sass\n\nImport Bootstrap into a Sass file (for example, `application.scss`) to get all of Bootstrap's styles, mixins and variables!\n\n```scss\n@import \"bootstrap\";\n```\n\nYou can also include optional Bootstrap theme:\n\n```scss\n@import \"bootstrap/theme\";\n```\n\nThe full list of Bootstrap variables can be found [here](https://getbootstrap.com/customize/#less-variables). You can override these by simply redefining the variable before the `@import` directive, e.g.:\n\n```scss\n$navbar-default-bg: #312312;\n$light-orange: #ff8c00;\n$navbar-default-color: $light-orange;\n\n@import \"bootstrap\";\n```\n\n### Eyeglass\n\nBootstrap is available as an [Eyeglass](https://github.com/sass-eyeglass/eyeglass) module. After installing Bootstrap via NPM you can import the Bootstrap library via:\n\n```scss\n@import \"bootstrap-sass/bootstrap\"\n```\n\nor import only the parts of Bootstrap you need:\n\n```scss\n@import \"bootstrap-sass/bootstrap/variables\";\n@import \"bootstrap-sass/bootstrap/mixins\";\n@import \"bootstrap-sass/bootstrap/carousel\";\n```\n\n## Version\n\nBootstrap for Sass version may differ from the upstream version in the last number, known as\n[PATCH](https://semver.org/spec/v2.0.0.html). The patch version may be ahead of the corresponding upstream minor.\nThis happens when we need to release Sass-specific changes.\n\nBefore v3.3.2, Bootstrap for Sass version used to reflect the upstream version, with an additional number for\nSass-specific changes. This was changed due to Bower and npm compatibility issues.\n\nThe upstream versions vs the Bootstrap for Sass versions are:\n\n| Upstream |    Sass |\n|---------:|--------:|\n|    3.3.4+ |   same |\n|    3.3.2 |   3.3.3 |\n| \u003c= 3.3.1 | 3.3.1.x |\n\nAlways refer to [CHANGELOG.md](/CHANGELOG.md) when upgrading.\n\n---\n\n## Development and Contributing\n\nIf you'd like to help with the development of bootstrap-sass itself, read this section.\n\n### Upstream Converter\n\nKeeping bootstrap-sass in sync with upstream changes from Bootstrap used to be an error prone and time consuming manual process. With Bootstrap 3 we have introduced a converter that automates this.\n\n**Note: if you're just looking to *use* Bootstrap 3, see the [installation](#installation) section above.**\n\nUpstream changes to the Bootstrap project can now be pulled in using the `convert` rake task.\n\nHere's an example run that would pull down the master branch from the main [twbs/bootstrap](https://github.com/twbs/bootstrap) repo:\n\n    rake convert\n\nThis will convert the latest LESS to Sass and update to the latest JS.\nTo convert a specific branch or version, pass the branch name or the commit hash as the first task argument:\n\n    rake convert[e8a1df5f060bf7e6631554648e0abde150aedbe4]\n\nThe latest converter script is located [here][converter] and does the following:\n\n* Converts upstream Bootstrap LESS files to its matching SCSS file.\n* Copies all upstream JavaScript into `assets/javascripts/bootstrap`, a Sprockets manifest at `assets/javascripts/bootstrap-sprockets.js`, and a concatenation at `assets/javascripts/bootstrap.js`.\n* Copies all upstream font files into `assets/fonts/bootstrap`.\n* Sets `Bootstrap::BOOTSTRAP_SHA` in [version.rb][version] to the branch sha.\n\nThis converter fully converts original LESS to SCSS. Conversion is automatic but requires instructions for certain transformations (see converter output).\nPlease submit GitHub issues tagged with `conversion`.\n\n## Credits\n\nbootstrap-sass has a number of major contributors:\n\n\u003c!-- feel free to make these link wherever you wish --\u003e\n* [Thomas McDonald](https://twitter.com/thomasmcdonald_)\n* [Tristan Harward](http://www.trisweb.com)\n* Peter Gumeson\n* [Gleb Mazovetskiy](https://github.com/glebm)\n\nand a [significant number of other contributors][contrib].\n\n## You're in good company\nbootstrap-sass is used to build some awesome projects all over the web, including\n[Diaspora](https://diasporafoundation.org/), [rails_admin](https://github.com/sferik/rails_admin),\nMichael Hartl's [Rails Tutorial](https://www.railstutorial.org/), [gitlabhq](http://gitlabhq.com/) and\n[kandan](http://getkandan.com/).\n\n[converter]: https://github.com/twbs/bootstrap-sass/blob/master/tasks/converter/less_conversion.rb\n[version]: https://github.com/twbs/bootstrap-sass/blob/master/lib/bootstrap-sass/version.rb\n[contrib]: https://github.com/twbs/bootstrap-sass/graphs/contributors\n[antirequire]: https://github.com/twbs/bootstrap-sass/issues/79#issuecomment-4428595\n[jsdocs]: https://getbootstrap.com/javascript/#transitions\n[sass-precision]: http://sass-lang.com/documentation/Sass/Script/Value/Number.html#precision%3D-class_method\n[mincer]: https://github.com/nodeca/mincer\n[autoprefixer]: https://github.com/postcss/autoprefixer\n"
  },
  {
    "repo": "diaspora/diaspora",
    "content": "# diaspora\\*\n### A privacy-aware, distributed, open source social network\n\n**master:** [![Build Status master](https://secure.travis-ci.org/diaspora/diaspora.svg?branch=master)](http://travis-ci.org/diaspora/diaspora)\n**next-minor:** [![Build Status next-minor](https://secure.travis-ci.org/diaspora/diaspora.svg?branch=next-minor)](http://travis-ci.org/diaspora/diaspora)\n[![Coverage Status next-minor](https://coveralls.io/repos/github/diaspora/diaspora/badge.svg?branch=next-minor)](https://coveralls.io/github/diaspora/diaspora?branch=next-minor)|\n**develop:** [![Build Status develop](https://secure.travis-ci.org/diaspora/diaspora.svg?branch=develop)](http://travis-ci.org/diaspora/diaspora)\n[![Coverage Status develop](https://coveralls.io/repos/github/diaspora/diaspora/badge.svg?branch=develop)](https://coveralls.io/github/diaspora/diaspora?branch=develop) |\n[![Code Climate](https://codeclimate.com/github/diaspora/diaspora/badges/gpa.svg)](https://codeclimate.com/github/diaspora/diaspora)\n\n[Project site](https://diasporafoundation.org) |\n[Wiki](https://wiki.diasporafoundation.org) |\n[Bugtracker](https://github.com/diaspora/diaspora/issues) |\n[Discussions and Support](https://discourse.diasporafoundation.org/) |\n[License](/COPYRIGHT) |\n[Authors](https://github.com/diaspora/diaspora/contributors)\n\n## Installation\n\nYou don't have to install diaspora\\* to use the network. There are many servers connected to diaspora\\*s network which are open to anyone, and you can create an account on one of these servers. Have a look at our [tips for finding a home](https://wiki.diasporafoundation.org/Choosing_a_pod), or you can just go straight to the [list of open servers](http://podupti.me) to sign up.\n\nWant to own your data and install diaspora\\*? Whether you just want to try it out, want to install it on your server or want to contribute and need a development setup, our [installation guides](https://wiki.diasporafoundation.org/Installation) will get you started!\n\n## Questions?\n\nHave a look at our FAQs [for users](https://wiki.diasporafoundation.org/FAQ_for_users), [for pod administrators](https://wiki.diasporafoundation.org/FAQ_for_pod_maintainers) or [for developers](https://wiki.diasporafoundation.org/FAQ_for_developers).\n\nStill haven't found an answer? Talk to us! Read [how we communicate](https://wiki.diasporafoundation.org/How_we_communicate). We're here to answer all your questions.\n\n## Contribute\n\nTo keep diaspora\\* growing and improving we need all help we can get. Whether you can contribute [code](https://wiki.diasporafoundation.org/Getting_started_with_contributing), [ideas](https://wiki.diasporafoundation.org/How_we_communicate#Discourse), [translations](https://wiki.diasporafoundation.org/Contribute_translations), [bug reports](https://wiki.diasporafoundation.org/How_to_report_a_bug) or simply extend the community as a [helpful user](https://wiki.diasporafoundation.org/Welcoming_committee) or [pod administrator](https://wiki.diasporafoundation.org/Installation), your help is welcome!\n\nEveryone interacting in diaspora’s codebases, issue trackers, chat rooms, the wiki, and the Discourse is expected to follow the diaspora\\* [code of conduct](/CODE_OF_CONDUCT.md).\n\n## Security\n\nFound a security issue? Please disclose it responsibly. We have a team of developers listening to [security@diasporafoundation.org](mailto:security@diasporafoundation.org). The PGP fingerprint is [AB0D AB02 0FC5 D398 03AB 3CE1 6F70 243F 27AD 886A](https://pgp.mit.edu/pks/lookup?op=get\u0026search=0x6F70243F27AD886A).\n"
  },
  {
    "repo": "sass/sass",
    "content": "## The Ruby Sass Repository Has Moved!\n\nThe Ruby Sass repository has moved from `https://github.com/sass/sass` to\n[`https://github.com/sass/ruby-sass`][ruby-sass]. Please update your Git URLs to\npoint to the new repository. After 26 March 2019, this repository's history will\nbe deleted.\n\n[ruby-sass]: https://github.com/sass/ruby-sass\n\nIssues with the Ruby Sass implementation should be filed against\n[the new repository][ruby-sass]. This repository will continue to track issues\nrelated to Sass language design as a whole.\n"
  },
  {
    "repo": "CocoaPods/CocoaPods",
    "content": "![CocoaPods Logo](https://raw.github.com/CocoaPods/shared_resources/master/assets/cocoapods-banner-readme.png)\n\n### CocoaPods: The Cocoa dependency manager\n\n[![Build Status](http://img.shields.io/travis/CocoaPods/CocoaPods/master.svg?style=flat)](https://travis-ci.org/CocoaPods/CocoaPods)\n[![Gem Version](http://img.shields.io/gem/v/cocoapods.svg?style=flat)](http://badge.fury.io/rb/cocoapods)\n[![Code Climate](http://img.shields.io/codeclimate/github/CocoaPods/CocoaPods.svg?style=flat)](https://codeclimate.com/github/CocoaPods/CocoaPods)\n\nCocoaPods manages dependencies for your Xcode projects.\n\nYou specify the dependencies for your project in a simple text file: your `Podfile`. \nCocoaPods recursively resolves dependencies between libraries, fetches \nsource code for all dependencies, and creates and maintains an Xcode \nworkspace to build your project.\n\nInstalling and updating CocoaPods is very easy. Don't miss the [Installation\nguide](http://guides.cocoapods.org/using/getting-started.html#installation) and the\n[Getting Started guide](https://guides.cocoapods.org/using/getting-started.html).\n\n## Project Goals\n\nCocoaPods aims to improve the engagement with, and discoverability \nof, third party open-source Cocoa libraries. These\nproject goals influence and drive the design of CocoaPods:\n\n- Create and share libraries, and use them in your own projects,\n  without creating extra work for library authors. Integrate\n  non-CocoaPods libraries and hack on your own fork of any\n  CocoaPods library with a simple transparent `Podspec` standard.\n- Allow library authors to structure their libraries however they like.\n- Save time for library authors by automating a lot of Xcode work not \n  related to their libraries' functionality.\n- Support any source management system. (Currently supported are `git`, \n  `svn`, `mercurial`, `bazaar`, and various types of archives downloaded over HTTP.)\n- Promote a culture of distributed collaboration on pods, but also provide\n  features only possible with a centralised solution to foster a community.\n- Build tools on top of the core Cocoa development system, including those \n  typically deployed to other operating systems, such as web-services.\n- Provide opinionated and automated integration, but make it completely\n  optional. You may manually integrate your CocoaPods dependencies\n  into your Xcode project as you see fit, with or without a workspace.\n- Solve everyday problems for Cocoa and Xcode developers.\n\n## Sponsors\n\nLovingly sponsored by a collection of companies, see the footer of [CocoaPods.org](https://cocoapods.org) for an up-to-date list. \n\n## Collaborate\n\nAll CocoaPods development happens on GitHub. Contributions make for good karma and\nwe [welcome new](https://blog.cocoapods.org/starting-open-source/) contributors with joy. We take contributors seriously, and thus have a \ncontributor [code of conduct](CODE_OF_CONDUCT.md).\n\n## Links\n\n| Link | Description |\n| :----- | :------ |\n[CocoaPods.org](https://cocoapods.org/) | Homepage and search for Pods.\n[@CocoaPods](https://twitter.com/CocoaPods) | Follow CocoaPods on Twitter to stay up to date.\n[Blog](https://blog.cocoapods.org) | The CocoaPods blog.\n[Mailing List](http://groups.google.com/group/cocoapods) | Feel free to ask any kind of question.\n[Guides](https://guides.cocoapods.org) | Everything you want to know about CocoaPods.\n[Changelog](https://github.com/CocoaPods/CocoaPods/blob/master/CHANGELOG.md) | See the changes introduced in each CocoaPods version.\n[New Pods RSS](https://feeds.cocoapods.org/new-pods.rss) | Don't miss any new Pods.\n[Code of Conduct](CODE_OF_CONDUCT.md) | Find out the standards we hold ourselves to.\n\n## Projects\n\nCocoaPods is composed of the following projects:\n\n| Status | Project | Description | Info |\n| :----- | :------ | :--- | :--- |\n| [![Build Status](http://img.shields.io/travis/CocoaPods/CocoaPods/master.svg?style=flat)](http://travis-ci.org/CocoaPods/CocoaPods) | [CocoaPods](https://github.com/CocoaPods/CocoaPods) | The CocoaPods command line tool. | [guides](https://guides.cocoapods.org)\n| [![Build Status](http://img.shields.io/travis/CocoaPods/Core/master.svg?style=flat)](http://travis-ci.org/CocoaPods/Core) | [CocoaPods Core](https://github.com/CocoaPods/Core) | Support for working with specifications and podfiles. | [docs](https://guides.cocoapods.org/contributing/components.html)\n| [![Build Status](http://img.shields.io/travis/CocoaPods/cocoapods-downloader/master.svg?style=flat)](http://travis-ci.org/CocoaPods/cocoapods-downloader) |[CocoaPods Downloader](https://github.com/CocoaPods/cocoapods-downloader) |  Downloaders for various source types. |  [docs](http://docs.cocoapods.org/cocoapods_downloader/index.html)\n| [![Build Status](http://img.shields.io/travis/CocoaPods/Xcodeproj/master.svg?style=flat)](https://travis-ci.org/CocoaPods/Xcodeproj) | [Xcodeproj](https://github.com/CocoaPods/Xcodeproj) | Create and modify Xcode projects from Ruby. |  [docs](http://docs.cocoapods.org/xcodeproj/index.html)\n| [![Build Status](http://img.shields.io/travis/CocoaPods/CLAide/master.svg?style=flat)](https://travis-ci.org/CocoaPods/CLAide) | [CLAide](https://github.com/CocoaPods/CLAide) | A small command-line interface framework.  | [docs](http://docs.cocoapods.org/claide/index.html)\n| [![Build Status](http://img.shields.io/travis/CocoaPods/Molinillo/master.svg?style=flat)](https://travis-ci.org/CocoaPods/Molinillo) | [Molinillo](https://github.com/CocoaPods/Molinillo) | A powerful generic dependency resolver.  | [docs](http://www.rubydoc.info/gems/molinillo)\n| [![Build Status](http://img.shields.io/travis/CocoaPods/CocoaPods-app/master.svg?style=flat)](https://travis-ci.org/CocoaPods/CocoaPods-app) | [CocoaPods.app](https://github.com/CocoaPods/CocoaPods-app) | A full-featured and standalone installation of CocoaPods.  | [info](https://cocoapods.org/app)\n|  | [Master Repo ](https://github.com/CocoaPods/Specs) | Master repository of specifications. | [guides](http://docs.cocoapods.org/guides/contributing_to_the_master_repo.html)\n"
  },
  {
    "repo": "capistrano/capistrano",
    "content": "\n# Capistrano: A deployment automation tool built on Ruby, Rake, and SSH.\n\n[![Gem Version](https://badge.fury.io/rb/capistrano.svg)](http://badge.fury.io/rb/capistrano) [![Build Status](https://travis-ci.org/capistrano/capistrano.svg?branch=master)](https://travis-ci.org/capistrano/capistrano) [![Code Climate](https://codeclimate.com/github/capistrano/capistrano/badges/gpa.svg)](https://codeclimate.com/github/capistrano/capistrano) [![CodersClan](https://img.shields.io/badge/get-support-blue.svg)](http://codersclan.net/?repo_id=325\u0026source=small)\n\nCapistrano is a framework for building automated deployment scripts. Although Capistrano itself is written in Ruby, it can easily be used to deploy projects of any language or framework, be it Rails, Java, or PHP.\n\nOnce installed, Capistrano gives you a `cap` tool to perform your deployments from the comfort of your command line.\n\n```\n$ cd my-capistrano-enabled-project\n$ cap production deploy\n```\n\nWhen you run `cap`, Capistrano dutifully connects to your server(s) via SSH and executes the steps necessary to deploy your project. You can define those steps yourself by writing [Rake](https://github.com/ruby/rake) tasks, or by using pre-built task libraries provided by the Capistrano community.\n\nTasks are simple to make. Here's an example:\n\n```ruby\ntask :restart_sidekiq do\n  on roles(:worker) do\n    execute :service, \"sidekiq restart\"\n  end\nend\nafter \"deploy:published\", \"restart_sidekiq\"\n```\n\n*Note: This documentation is for the current version of Capistrano (3.x). If you are looking for Capistrano 2.x documentation, you can find it in [this archive](https://github.com/capistrano/capistrano-2.x-docs).*\n\n---\n\n## Contents\n\n* [Features](#features)\n* [Gotchas](#gotchas)\n* [Quick start](#quick-start)\n* [Finding help and documentation](#finding-help-and-documentation)\n* [How to contribute](#how-to-contribute)\n* [License](#license)\n\n## Features\n\nThere are many ways to automate deployments, from simple rsync bash scripts to complex containerized toolchains. Capistrano sits somewhere in the middle: it automates what you already know how to do manually with SSH, but in a repeatable, scalable fashion. There is no magic here!\n\nHere's what makes Capistrano great:\n\n#### Strong conventions\n\nCapistrano defines a standard deployment process that all Capistrano-enabled projects follow by default. You don't have to decide how to structure your scripts, where deployed files should be placed on the server, or how to perform common tasks: Capistrano has done this work for you.\n\n#### Multiple stages\n\nDefine your deployment once, and then easily parameterize it for multiple *stages* (environments), e.g. `qa`, `staging`, and `production`. No copy-and-paste necessary: you only need to specify what is different for each stage, like IP addresses.\n\n#### Parallel execution\n\nDeploying to a fleet of app servers? Capistrano can run each deployment task concurrently across those servers and uses connection pooling for speed.\n\n#### Server roles\n\nYour application may need many different types of servers: a database server, an app server, two web servers, and a job queue work server, for example. Capistrano lets you tag each server with one or more roles, so you can control what tasks are executed where.\n\n#### Community driven\n\nCapistrano is easily extensible using the rubygems package manager. Deploying a Rails app? Wordpress? Laravel? Chances are, someone has already written Capistrano tasks for your framework of choice and has distributed it as a gem. Many Ruby projects also come with Capistrano tasks built-in.\n\n#### It's just SSH\n\nEverything in Capistrano comes down to running SSH commands on remote servers. On the one hand, that makes Capistrano simple. On the other hand, if you aren't comfortable SSH-ing into a Linux box and doing stuff on the command-line, then Capistrano is probably not for you.\n\n## Gotchas\n\nWhile Capistrano ships with a strong set of conventions that are common for all types of deployments, it needs help understanding the specifics of your project, and there are some things Capistrano is not suited to do.\n\n#### Project specifics\n\nOut of the box, Capistrano can deploy your code to server(s), but it does not know how to *execute* your code. Does `foreman` need to be run? Does Apache need to be restarted? You'll need to tell Capistrano how to do this part by writing these deployment steps yourself, or by finding a gem in the Capistrano community that does it for you.\n\n#### Key-based SSH\n\nCapistrano depends on connecting to your server(s) with SSH using key-based (i.e. password-less) authentication. You'll need this working before you can use Capistrano.\n\n#### Provisioning\n\nLikewise, your server(s) will likely need supporting software installed before you can perform a deployment. Capistrano itself has no requirements other than SSH, but your application probably needs database software, a web server like Apache or Nginx, and a language runtime like Java, Ruby, or PHP. These *server provisioning* steps are not done by Capistrano.\n\n#### `sudo`, etc.\n\nCapistrano is designed to deploy using a single, non-privileged SSH user, using a *non-interactive* SSH session. If your deployment requires `sudo`, interactive prompts, authenticating as one user but running commands as another, you can probably accomplish this with Capistrano, but it may be difficult. Your automated deployments will be much smoother if you can avoid such requirements.\n\n#### Shells\n\nCapistrano 3 expects a POSIX shell like Bash or Sh. Shells like tcsh, csh, and such may work, but probably will not.\n\n## Quick start\n\n### Requirements\n\n* Ruby version 2.0 or higher on your local machine (MRI or Rubinius)\n* A project that uses source control (Git, Mercurial, and Subversion support is built-in)\n* The SCM binaries (e.g. `git`, `hg`) needed to check out your project must be installed on the server(s) you are deploying to\n* [Bundler](http://bundler.io), along with a Gemfile for your project, are recommended\n\n### Install the Capistrano gem\n\nAdd Capistrano to your project's Gemfile using `require: false`:\n\n``` ruby\ngroup :development do\n  gem \"capistrano\", \"~\u003e 3.11\", require: false\nend\n```\n\nThen run Bundler to ensure Capistrano is downloaded and installed:\n\n``` sh\n$ bundle install\n```\n\n### \"Capify\" your project\n\nMake sure your project doesn't already have a \"Capfile\" or \"capfile\" present. Then run:\n\n``` sh\n$ bundle exec cap install\n```\n\nThis creates all the necessary configuration files and directory structure for a Capistrano-enabled project with two stages, `staging` and `production`:\n\n```\n├── Capfile\n├── config\n│   ├── deploy\n│   │   ├── production.rb\n│   │   └── staging.rb\n│   └── deploy.rb\n└── lib\n    └── capistrano\n            └── tasks\n```\n\nTo customize the stages that are created, use:\n\n``` sh\n$ bundle exec cap install STAGES=local,sandbox,qa,production\n```\n\nNote that the files that Capistrano creates are simply templates to get you started. Make sure to edit the `deploy.rb` and stage files so that they contain values appropriate for your project and your target servers.\n\n### Command-line usage\n\n``` sh\n# list all available tasks\n$ bundle exec cap -T\n\n# deploy to the staging environment\n$ bundle exec cap staging deploy\n\n# deploy to the production environment\n$ bundle exec cap production deploy\n\n# simulate deploying to the production environment\n# does not actually do anything\n$ bundle exec cap production deploy --dry-run\n\n# list task dependencies\n$ bundle exec cap production deploy --prereqs\n\n# trace through task invocations\n$ bundle exec cap production deploy --trace\n\n# lists all config variable before deployment tasks\n$ bundle exec cap production deploy --print-config-variables\n```\n\n## Finding help and documentation\n\nCapistrano is a large project encompassing multiple GitHub repositories and a community of plugins, and it can be overwhelming when you are just getting started. Here are resources that can help:\n\n* **The [docs](docs) directory contains the official documentation**, and is used to generate the [Capistrano website](http://capistranorb.com)\n* [Stack Overflow](http://stackoverflow.com/questions/tagged/capistrano) has a Capistrano tag with lots of activity\n* [The Capistrano mailing list](https://groups.google.com/forum/#!forum/capistrano) is low-traffic but is monitored by Capistrano contributors\n* [CodersClan](http://codersclan.net/?repo_id=325\u0026source=link) has Capistrano experts available to solve problems for bounties\n\nRelated GitHub repositories:\n\n* [capistrano/sshkit](https://github.com/capistrano/sshkit) provides the SSH behavior that underlies Capistrano (when you use `execute` in a Capistrano task, you are using SSHKit)\n* [capistrano/rails](https://github.com/capistrano/rails) is a very popular gem that adds Ruby on Rails deployment tasks\n* [mattbrictson/airbrussh](https://github.com/mattbrictson/airbrussh) provides Capistrano's default log formatting\n\nGitHub issues are for bug reports and feature requests. Please refer to the [CONTRIBUTING](CONTRIBUTING.md) document for guidelines on submitting GitHub issues.\n\nIf you think you may have discovered a security vulnerability in Capistrano, do not open a GitHub issue. Instead, please send a report to \u003csecurity@capistranorb.com\u003e.\n\n## How to contribute\n\nContributions to Capistrano, in the form of code, documentation or idea, are gladly accepted. Read the [DEVELOPMENT](DEVELOPMENT.md) document to learn how to hack on Capistrano's code, run the tests, and contribute your first pull request.\n\n## License\n\nMIT License (MIT)\n\nCopyright (c) 2012-2018 Tom Clements, Lee Hambley\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  {
    "repo": "sinatra/sinatra",
    "content": "# Sinatra\n\n[![Gem Version](https://badge.fury.io/rb/sinatra.svg)](http://badge.fury.io/rb/sinatra)\n[![Build Status](https://secure.travis-ci.org/sinatra/sinatra.svg)](https://travis-ci.org/sinatra/sinatra)\n[![SemVer](https://api.dependabot.com/badges/compatibility_score?dependency-name=sinatra\u0026package-manager=bundler\u0026version-scheme=semver)](https://dependabot.com/compatibility-score.html?dependency-name=sinatra\u0026package-manager=bundler\u0026version-scheme=semver)\n\nSinatra is a [DSL](https://en.wikipedia.org/wiki/Domain-specific_language) for\nquickly creating web applications in Ruby with minimal effort:\n\n```ruby\n# myapp.rb\nrequire 'sinatra'\n\nget '/' do\n  'Hello world!'\nend\n```\n\nInstall the gem:\n\n```shell\ngem install sinatra\n```\n\nAnd run with:\n\n```shell\nruby myapp.rb\n```\n\nView at: [http://localhost:4567](http://localhost:4567)\n\nThe code you changed will not take effect until you restart the server.\nPlease restart the server every time you change or use\n[sinatra/reloader](http://www.sinatrarb.com/contrib/reloader).\n\nIt is recommended to also run `gem install thin`, which Sinatra will\npick up if available.\n\n## Table of Contents\n\n* [Sinatra](#sinatra)\n    * [Table of Contents](#table-of-contents)\n    * [Routes](#routes)\n    * [Conditions](#conditions)\n    * [Return Values](#return-values)\n    * [Custom Route Matchers](#custom-route-matchers)\n    * [Static Files](#static-files)\n    * [Views / Templates](#views--templates)\n        * [Literal Templates](#literal-templates)\n        * [Available Template Languages](#available-template-languages)\n            * [Haml Templates](#haml-templates)\n            * [Erb Templates](#erb-templates)\n            * [Builder Templates](#builder-templates)\n            * [Nokogiri Templates](#nokogiri-templates)\n            * [Sass Templates](#sass-templates)\n            * [SCSS Templates](#scss-templates)\n            * [Less Templates](#less-templates)\n            * [Liquid Templates](#liquid-templates)\n            * [Markdown Templates](#markdown-templates)\n            * [Textile Templates](#textile-templates)\n            * [RDoc Templates](#rdoc-templates)\n            * [AsciiDoc Templates](#asciidoc-templates)\n            * [Radius Templates](#radius-templates)\n            * [Markaby Templates](#markaby-templates)\n            * [RABL Templates](#rabl-templates)\n            * [Slim Templates](#slim-templates)\n            * [Creole Templates](#creole-templates)\n            * [MediaWiki Templates](#mediawiki-templates)\n            * [CoffeeScript Templates](#coffeescript-templates)\n            * [Stylus Templates](#stylus-templates)\n            * [Yajl Templates](#yajl-templates)\n            * [WLang Templates](#wlang-templates)\n        * [Accessing Variables in Templates](#accessing-variables-in-templates)\n        * [Templates with `yield` and nested layouts](#templates-with-yield-and-nested-layouts)\n        * [Inline Templates](#inline-templates)\n        * [Named Templates](#named-templates)\n        * [Associating File Extensions](#associating-file-extensions)\n        * [Adding Your Own Template Engine](#adding-your-own-template-engine)\n        * [Using Custom Logic for Template Lookup](#using-custom-logic-for-template-lookup)\n    * [Filters](#filters)\n    * [Helpers](#helpers)\n        * [Using Sessions](#using-sessions)\n            * [Session Secret Security](#session-secret-security)\n            * [Session Config](#session-config)\n            * [Choosing Your Own Session Middleware](#choosing-your-own-session-middleware)\n        * [Halting](#halting)\n        * [Passing](#passing)\n        * [Triggering Another Route](#triggering-another-route)\n        * [Setting Body, Status Code and Headers](#setting-body-status-code-and-headers)\n        * [Streaming Responses](#streaming-responses)\n        * [Logging](#logging)\n        * [Mime Types](#mime-types)\n        * [Generating URLs](#generating-urls)\n        * [Browser Redirect](#browser-redirect)\n        * [Cache Control](#cache-control)\n        * [Sending Files](#sending-files)\n        * [Accessing the Request Object](#accessing-the-request-object)\n        * [Attachments](#attachments)\n        * [Dealing with Date and Time](#dealing-with-date-and-time)\n        * [Looking Up Template Files](#looking-up-template-files)\n    * [Configuration](#configuration)\n        * [Configuring attack protection](#configuring-attack-protection)\n        * [Available Settings](#available-settings)\n    * [Environments](#environments)\n    * [Error Handling](#error-handling)\n        * [Not Found](#not-found)\n        * [Error](#error)\n    * [Rack Middleware](#rack-middleware)\n    * [Testing](#testing)\n    * [Sinatra::Base - Middleware, Libraries, and Modular Apps](#sinatrabase---middleware-libraries-and-modular-apps)\n        * [Modular vs. Classic Style](#modular-vs-classic-style)\n        * [Serving a Modular Application](#serving-a-modular-application)\n        * [Using a Classic Style Application with a config.ru](#using-a-classic-style-application-with-a-configru)\n        * [When to use a config.ru?](#when-to-use-a-configru)\n        * [Using Sinatra as Middleware](#using-sinatra-as-middleware)\n        * [Dynamic Application Creation](#dynamic-application-creation)\n    * [Scopes and Binding](#scopes-and-binding)\n        * [Application/Class Scope](#applicationclass-scope)\n        * [Request/Instance Scope](#requestinstance-scope)\n        * [Delegation Scope](#delegation-scope)\n    * [Command Line](#command-line)\n        * [Multi-threading](#multi-threading)\n    * [Requirement](#requirement)\n    * [The Bleeding Edge](#the-bleeding-edge)\n        * [With Bundler](#with-bundler)\n    * [Versioning](#versioning)\n    * [Further Reading](#further-reading)\n\n## Routes\n\nIn Sinatra, a route is an HTTP method paired with a URL-matching pattern.\nEach route is associated with a block:\n\n```ruby\nget '/' do\n  .. show something ..\nend\n\npost '/' do\n  .. create something ..\nend\n\nput '/' do\n  .. replace something ..\nend\n\npatch '/' do\n  .. modify something ..\nend\n\ndelete '/' do\n  .. annihilate something ..\nend\n\noptions '/' do\n  .. appease something ..\nend\n\nlink '/' do\n  .. affiliate something ..\nend\n\nunlink '/' do\n  .. separate something ..\nend\n```\n\nRoutes are matched in the order they are defined. The first route that\nmatches the request is invoked.\n\nRoutes with trailing slashes are different from the ones without:\n\n```ruby\nget '/foo' do\n  # Does not match \"GET /foo/\"\nend\n```\n\nRoute patterns may include named parameters, accessible via the\n`params` hash:\n\n```ruby\nget '/hello/:name' do\n  # matches \"GET /hello/foo\" and \"GET /hello/bar\"\n  # params['name'] is 'foo' or 'bar'\n  \"Hello #{params['name']}!\"\nend\n```\n\nYou can also access named parameters via block parameters:\n\n```ruby\nget '/hello/:name' do |n|\n  # matches \"GET /hello/foo\" and \"GET /hello/bar\"\n  # params['name'] is 'foo' or 'bar'\n  # n stores params['name']\n  \"Hello #{n}!\"\nend\n```\n\nRoute patterns may also include splat (or wildcard) parameters, accessible\nvia the `params['splat']` array:\n\n```ruby\nget '/say/*/to/*' do\n  # matches /say/hello/to/world\n  params['splat'] # =\u003e [\"hello\", \"world\"]\nend\n\nget '/download/*.*' do\n  # matches /download/path/to/file.xml\n  params['splat'] # =\u003e [\"path/to/file\", \"xml\"]\nend\n```\n\nOr with block parameters:\n\n```ruby\nget '/download/*.*' do |path, ext|\n  [path, ext] # =\u003e [\"path/to/file\", \"xml\"]\nend\n```\n\nRoute matching with Regular Expressions:\n\n```ruby\nget /\\/hello\\/([\\w]+)/ do\n  \"Hello, #{params['captures'].first}!\"\nend\n```\n\nOr with a block parameter:\n\n```ruby\nget %r{/hello/([\\w]+)} do |c|\n  # Matches \"GET /meta/hello/world\", \"GET /hello/world/1234\" etc.\n  \"Hello, #{c}!\"\nend\n```\n\nRoute patterns may have optional parameters:\n\n```ruby\nget '/posts/:format?' do\n  # matches \"GET /posts/\" and any extension \"GET /posts/json\", \"GET /posts/xml\" etc\nend\n```\n\nRoutes may also utilize query parameters:\n\n```ruby\nget '/posts' do\n  # matches \"GET /posts?title=foo\u0026author=bar\"\n  title = params['title']\n  author = params['author']\n  # uses title and author variables; query is optional to the /posts route\nend\n```\n\nBy the way, unless you disable the path traversal attack protection (see\n[below](#configuring-attack-protection)), the request path might be modified before\nmatching against your routes.\n\nYou may customize the [Mustermann](https://github.com/sinatra/mustermann#readme)\noptions used for a given route by passing in a `:mustermann_opts` hash:\n\n```ruby\nget '\\A/posts\\z', :mustermann_opts =\u003e { :type =\u003e :regexp, :check_anchors =\u003e false } do\n  # matches /posts exactly, with explicit anchoring\n  \"If you match an anchored pattern clap your hands!\"\nend\n```\n\nIt looks like a [condition](#conditions), but it isn't one! These options will\nbe merged into the global `:mustermann_opts` hash described\n[below](#available-settings).\n\n## Conditions\n\nRoutes may include a variety of matching conditions, such as the user agent:\n\n```ruby\nget '/foo', :agent =\u003e /Songbird (\\d\\.\\d)[\\d\\/]*?/ do\n  \"You're using Songbird version #{params['agent'][0]}\"\nend\n\nget '/foo' do\n  # Matches non-songbird browsers\nend\n```\n\nOther available conditions are `host_name` and `provides`:\n\n```ruby\nget '/', :host_name =\u003e /^admin\\./ do\n  \"Admin Area, Access denied!\"\nend\n\nget '/', :provides =\u003e 'html' do\n  haml :index\nend\n\nget '/', :provides =\u003e ['rss', 'atom', 'xml'] do\n  builder :feed\nend\n```\n`provides` searches the request's Accept header.\n\nYou can easily define your own conditions:\n\n```ruby\nset(:probability) { |value| condition { rand \u003c= value } }\n\nget '/win_a_car', :probability =\u003e 0.1 do\n  \"You won!\"\nend\n\nget '/win_a_car' do\n  \"Sorry, you lost.\"\nend\n```\n\nFor a condition that takes multiple values use a splat:\n\n```ruby\nset(:auth) do |*roles|   # \u003c- notice the splat here\n  condition do\n    unless logged_in? \u0026\u0026 roles.any? {|role| current_user.in_role? role }\n      redirect \"/login/\", 303\n    end\n  end\nend\n\nget \"/my/account/\", :auth =\u003e [:user, :admin] do\n  \"Your Account Details\"\nend\n\nget \"/only/admin/\", :auth =\u003e :admin do\n  \"Only admins are allowed here!\"\nend\n```\n\n## Return Values\n\nThe return value of a route block determines at least the response body\npassed on to the HTTP client, or at least the next middleware in the\nRack stack. Most commonly, this is a string, as in the above examples.\nBut other values are also accepted.\n\nYou can return any object that would either be a valid Rack response, Rack\nbody object or HTTP status code:\n\n* An Array with three elements: `[status (Integer), headers (Hash), response\n  body (responds to #each)]`\n* An Array with two elements: `[status (Integer), response body (responds to\n  #each)]`\n* An object that responds to `#each` and passes nothing but strings to\n  the given block\n* A Integer representing the status code\n\nThat way we can, for instance, easily implement a streaming example:\n\n```ruby\nclass Stream\n  def each\n    100.times { |i| yield \"#{i}\\n\" }\n  end\nend\n\nget('/') { Stream.new }\n```\n\nYou can also use the `stream` helper method ([described below](#streaming-responses)) to reduce\nboiler plate and embed the streaming logic in the route.\n\n## Custom Route Matchers\n\nAs shown above, Sinatra ships with built-in support for using String\npatterns and regular expressions as route matches. However, it does not\nstop there. You can easily define your own matchers:\n\n```ruby\nclass AllButPattern\n  Match = Struct.new(:captures)\n\n  def initialize(except)\n    @except   = except\n    @captures = Match.new([])\n  end\n\n  def match(str)\n    @captures unless @except === str\n  end\nend\n\ndef all_but(pattern)\n  AllButPattern.new(pattern)\nend\n\nget all_but(\"/index\") do\n  # ...\nend\n```\n\nNote that the above example might be over-engineered, as it can also be\nexpressed as:\n\n```ruby\nget // do\n  pass if request.path_info == \"/index\"\n  # ...\nend\n```\n\nOr, using negative look ahead:\n\n```ruby\nget %r{(?!/index)} do\n  # ...\nend\n```\n\n## Static Files\n\nStatic files are served from the `./public` directory. You can specify\na different location by setting the `:public_folder` option:\n\n```ruby\nset :public_folder, File.dirname(__FILE__) + '/static'\n```\n\nNote that the public directory name is not included in the URL. A file\n`./public/css/style.css` is made available as\n`http://example.com/css/style.css`.\n\nUse the `:static_cache_control` setting (see [below](#cache-control)) to add\n`Cache-Control` header info.\n\n## Views / Templates\n\nEach template language is exposed via its own rendering method. These\nmethods simply return a string:\n\n```ruby\nget '/' do\n  erb :index\nend\n```\n\nThis renders `views/index.erb`.\n\nInstead of a template name, you can also just pass in the template content\ndirectly:\n\n```ruby\nget '/' do\n  code = \"\u003c%= Time.now %\u003e\"\n  erb code\nend\n```\n\nTemplates take a second argument, the options hash:\n\n```ruby\nget '/' do\n  erb :index, :layout =\u003e :post\nend\n```\n\nThis will render `views/index.erb` embedded in the\n`views/post.erb` (default is `views/layout.erb`, if it exists).\n\nAny options not understood by Sinatra will be passed on to the template\nengine:\n\n```ruby\nget '/' do\n  haml :index, :format =\u003e :html5\nend\n```\n\nYou can also set options per template language in general:\n\n```ruby\nset :haml, :format =\u003e :html5\n\nget '/' do\n  haml :index\nend\n```\n\nOptions passed to the render method override options set via `set`.\n\nAvailable Options:\n\n\u003cdl\u003e\n  \u003cdt\u003elocals\u003c/dt\u003e\n  \u003cdd\u003e\n    List of locals passed to the document. Handy with partials.\n    Example: \u003ctt\u003eerb \"\u003c%= foo %\u003e\", :locals =\u003e {:foo =\u003e \"bar\"}\u003c/tt\u003e\n  \u003c/dd\u003e\n\n  \u003cdt\u003edefault_encoding\u003c/dt\u003e\n  \u003cdd\u003e\n    String encoding to use if uncertain. Defaults to\n    \u003ctt\u003esettings.default_encoding\u003c/tt\u003e.\n  \u003c/dd\u003e\n\n  \u003cdt\u003eviews\u003c/dt\u003e\n  \u003cdd\u003e\n    Views folder to load templates from. Defaults to \u003ctt\u003esettings.views\u003c/tt\u003e.\n  \u003c/dd\u003e\n\n  \u003cdt\u003elayout\u003c/dt\u003e\n  \u003cdd\u003e\n    Whether to use a layout (\u003ctt\u003etrue\u003c/tt\u003e or \u003ctt\u003efalse\u003c/tt\u003e). If it's a\n    Symbol, specifies what template to use. Example:\n    \u003ctt\u003eerb :index, :layout =\u003e !request.xhr?\u003c/tt\u003e\n  \u003c/dd\u003e\n\n  \u003cdt\u003econtent_type\u003c/dt\u003e\n  \u003cdd\u003e\n    Content-Type the template produces. Default depends on template language.\n  \u003c/dd\u003e\n\n  \u003cdt\u003escope\u003c/dt\u003e\n  \u003cdd\u003e\n    Scope to render template under. Defaults to the application\n    instance. If you change this, instance variables and helper methods\n    will not be available.\n  \u003c/dd\u003e\n\n  \u003cdt\u003elayout_engine\u003c/dt\u003e\n  \u003cdd\u003e\n    Template engine to use for rendering the layout. Useful for\n    languages that do not support layouts otherwise. Defaults to the\n    engine used for the template. Example: \u003ctt\u003eset :rdoc, :layout_engine\n    =\u003e :erb\u003c/tt\u003e\n  \u003c/dd\u003e\n\n  \u003cdt\u003elayout_options\u003c/dt\u003e\n  \u003cdd\u003e\n    Special options only used for rendering the layout. Example:\n    \u003ctt\u003eset :rdoc, :layout_options =\u003e { :views =\u003e 'views/layouts' }\u003c/tt\u003e\n  \u003c/dd\u003e\n\u003c/dl\u003e\n\nTemplates are assumed to be located directly under the `./views`\ndirectory. To use a different views directory:\n\n```ruby\nset :views, settings.root + '/templates'\n```\n\n\nOne important thing to remember is that you always have to reference\ntemplates with symbols, even if they're in a subdirectory (in this case,\nuse: `:'subdir/template'` or `'subdir/template'.to_sym`). You must use a\nsymbol because otherwise rendering methods will render any strings\npassed to them directly.\n\n### Literal Templates\n\n```ruby\nget '/' do\n  haml '%div.title Hello World'\nend\n```\n\nRenders the template string. You can optionally specify `:path` and\n`:line` for a clearer backtrace if there is a filesystem path or line\nassociated with that string:\n\n```ruby\nget '/' do\n  haml '%div.title Hello World', :path =\u003e 'examples/file.haml', :line =\u003e 3\nend\n```\n\n### Available Template Languages\n\nSome languages have multiple implementations. To specify what implementation\nto use (and to be thread-safe), you should simply require it first:\n\n```ruby\nrequire 'rdiscount' # or require 'bluecloth'\nget('/') { markdown :index }\n```\n\n#### Haml Templates\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eDependency\u003c/td\u003e\n    \u003ctd\u003e\u003ca href=\"http://haml.info/\" title=\"haml\"\u003ehaml\u003c/a\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eFile Extension\u003c/td\u003e\n    \u003ctd\u003e\u003ctt\u003e.haml\u003c/tt\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eExample\u003c/td\u003e\n    \u003ctd\u003e\u003ctt\u003ehaml :index, :format =\u003e :html5\u003c/tt\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\n#### Erb Templates\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eDependency\u003c/td\u003e\n    \u003ctd\u003e\n      \u003ca href=\"https://github.com/jeremyevans/erubi\" title=\"erubi\"\u003eerubi\u003c/a\u003e\n      or \u003ca href=\"http://www.kuwata-lab.com/erubis/\" title=\"erubis\"\u003eerubis\u003c/a\u003e\n      or erb (included in Ruby)\n    \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eFile Extensions\u003c/td\u003e\n    \u003ctd\u003e\u003ctt\u003e.erb\u003c/tt\u003e, \u003ctt\u003e.rhtml\u003c/tt\u003e or \u003ctt\u003e.erubi\u003c/tt\u003e (Erubi only)\n or \u003ctt\u003e.erubis\u003c/tt\u003e (Erubis only)\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eExample\u003c/td\u003e\n    \u003ctd\u003e\u003ctt\u003eerb :index\u003c/tt\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\n#### Builder Templates\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eDependency\u003c/td\u003e\n    \u003ctd\u003e\n      \u003ca href=\"https://github.com/jimweirich/builder\" title=\"builder\"\u003ebuilder\u003c/a\u003e\n    \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eFile Extension\u003c/td\u003e\n    \u003ctd\u003e\u003ctt\u003e.builder\u003c/tt\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eExample\u003c/td\u003e\n    \u003ctd\u003e\u003ctt\u003ebuilder { |xml| xml.em \"hi\" }\u003c/tt\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\nIt also takes a block for inline templates (see [example](#inline-templates)).\n\n#### Nokogiri Templates\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eDependency\u003c/td\u003e\n    \u003ctd\u003e\u003ca href=\"http://www.nokogiri.org/\" title=\"nokogiri\"\u003enokogiri\u003c/a\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eFile Extension\u003c/td\u003e\n    \u003ctd\u003e\u003ctt\u003e.nokogiri\u003c/tt\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eExample\u003c/td\u003e\n    \u003ctd\u003e\u003ctt\u003enokogiri { |xml| xml.em \"hi\" }\u003c/tt\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\nIt also takes a block for inline templates (see [example](#inline-templates)).\n\n#### Sass Templates\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eDependency\u003c/td\u003e\n    \u003ctd\u003e\u003ca href=\"https://sass-lang.com/\" title=\"sass\"\u003esass\u003c/a\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eFile Extension\u003c/td\u003e\n    \u003ctd\u003e\u003ctt\u003e.sass\u003c/tt\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eExample\u003c/td\u003e\n    \u003ctd\u003e\u003ctt\u003esass :stylesheet, :style =\u003e :expanded\u003c/tt\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\n#### SCSS Templates\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eDependency\u003c/td\u003e\n    \u003ctd\u003e\u003ca href=\"https://sass-lang.com/\" title=\"sass\"\u003esass\u003c/a\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eFile Extension\u003c/td\u003e\n    \u003ctd\u003e\u003ctt\u003e.scss\u003c/tt\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eExample\u003c/td\u003e\n    \u003ctd\u003e\u003ctt\u003escss :stylesheet, :style =\u003e :expanded\u003c/tt\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\n#### Less Templates\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eDependency\u003c/td\u003e\n    \u003ctd\u003e\u003ca href=\"http://lesscss.org/\" title=\"less\"\u003eless\u003c/a\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eFile Extension\u003c/td\u003e\n    \u003ctd\u003e\u003ctt\u003e.less\u003c/tt\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eExample\u003c/td\u003e\n    \u003ctd\u003e\u003ctt\u003eless :stylesheet\u003c/tt\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\n#### Liquid Templates\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eDependency\u003c/td\u003e\n    \u003ctd\u003e\u003ca href=\"https://shopify.github.io/liquid/\" title=\"liquid\"\u003eliquid\u003c/a\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eFile Extension\u003c/td\u003e\n    \u003ctd\u003e\u003ctt\u003e.liquid\u003c/tt\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eExample\u003c/td\u003e\n    \u003ctd\u003e\u003ctt\u003eliquid :index, :locals =\u003e { :key =\u003e 'value' }\u003c/tt\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\nSince you cannot call Ruby methods (except for `yield`) from a Liquid\ntemplate, you almost always want to pass locals to it.\n\n#### Markdown Templates\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eDependency\u003c/td\u003e\n    \u003ctd\u003e\n      Anyone of:\n        \u003ca href=\"https://github.com/davidfstr/rdiscount\" title=\"RDiscount\"\u003eRDiscount\u003c/a\u003e,\n        \u003ca href=\"https://github.com/vmg/redcarpet\" title=\"RedCarpet\"\u003eRedCarpet\u003c/a\u003e,\n        \u003ca href=\"https://github.com/ged/bluecloth\" title=\"BlueCloth\"\u003eBlueCloth\u003c/a\u003e,\n        \u003ca href=\"https://kramdown.gettalong.org/\" title=\"kramdown\"\u003ekramdown\u003c/a\u003e,\n        \u003ca href=\"https://github.com/bhollis/maruku\" title=\"maruku\"\u003emaruku\u003c/a\u003e\n    \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eFile Extensions\u003c/td\u003e\n    \u003ctd\u003e\u003ctt\u003e.markdown\u003c/tt\u003e, \u003ctt\u003e.mkd\u003c/tt\u003e and \u003ctt\u003e.md\u003c/tt\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eExample\u003c/td\u003e\n    \u003ctd\u003e\u003ctt\u003emarkdown :index, :layout_engine =\u003e :erb\u003c/tt\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\nIt is not possible to call methods from Markdown, nor to pass locals to it.\nYou therefore will usually use it in combination with another rendering\nengine:\n\n```ruby\nerb :overview, :locals =\u003e { :text =\u003e markdown(:introduction) }\n```\n\nNote that you may also call the `markdown` method from within other\ntemplates:\n\n```ruby\n%h1 Hello From Haml!\n%p= markdown(:greetings)\n```\n\nSince you cannot call Ruby from Markdown, you cannot use layouts written in\nMarkdown. However, it is possible to use another rendering engine for the\ntemplate than for the layout by passing the `:layout_engine` option.\n\n#### Textile Templates\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eDependency\u003c/td\u003e\n    \u003ctd\u003e\u003ca href=\"http://redcloth.org/\" title=\"RedCloth\"\u003eRedCloth\u003c/a\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eFile Extension\u003c/td\u003e\n    \u003ctd\u003e\u003ctt\u003e.textile\u003c/tt\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eExample\u003c/td\u003e\n    \u003ctd\u003e\u003ctt\u003etextile :index, :layout_engine =\u003e :erb\u003c/tt\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\nIt is not possible to call methods from Textile, nor to pass locals to\nit. You therefore will usually use it in combination with another\nrendering engine:\n\n```ruby\nerb :overview, :locals =\u003e { :text =\u003e textile(:introduction) }\n```\n\nNote that you may also call the `textile` method from within other templates:\n\n```ruby\n%h1 Hello From Haml!\n%p= textile(:greetings)\n```\n\nSince you cannot call Ruby from Textile, you cannot use layouts written in\nTextile. However, it is possible to use another rendering engine for the\ntemplate than for the layout by passing the `:layout_engine` option.\n\n#### RDoc Templates\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eDependency\u003c/td\u003e\n    \u003ctd\u003e\u003ca href=\"http://rdoc.sourceforge.net/\" title=\"RDoc\"\u003eRDoc\u003c/a\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eFile Extension\u003c/td\u003e\n    \u003ctd\u003e\u003ctt\u003e.rdoc\u003c/tt\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eExample\u003c/td\u003e\n    \u003ctd\u003e\u003ctt\u003erdoc :README, :layout_engine =\u003e :erb\u003c/tt\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\nIt is not possible to call methods from RDoc, nor to pass locals to it. You\ntherefore will usually use it in combination with another rendering engine:\n\n```ruby\nerb :overview, :locals =\u003e { :text =\u003e rdoc(:introduction) }\n```\n\nNote that you may also call the `rdoc` method from within other templates:\n\n```ruby\n%h1 Hello From Haml!\n%p= rdoc(:greetings)\n```\n\nSince you cannot call Ruby from RDoc, you cannot use layouts written in\nRDoc. However, it is possible to use another rendering engine for the\ntemplate than for the layout by passing the `:layout_engine` option.\n\n#### AsciiDoc Templates\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eDependency\u003c/td\u003e\n    \u003ctd\u003e\u003ca href=\"http://asciidoctor.org/\" title=\"Asciidoctor\"\u003eAsciidoctor\u003c/a\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eFile Extension\u003c/td\u003e\n    \u003ctd\u003e\u003ctt\u003e.asciidoc\u003c/tt\u003e, \u003ctt\u003e.adoc\u003c/tt\u003e and \u003ctt\u003e.ad\u003c/tt\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eExample\u003c/td\u003e\n    \u003ctd\u003e\u003ctt\u003easciidoc :README, :layout_engine =\u003e :erb\u003c/tt\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\nSince you cannot call Ruby methods directly from an AsciiDoc template, you\nalmost always want to pass locals to it.\n\n#### Radius Templates\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eDependency\u003c/td\u003e\n    \u003ctd\u003e\u003ca href=\"https://github.com/jlong/radius\" title=\"Radius\"\u003eRadius\u003c/a\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eFile Extension\u003c/td\u003e\n    \u003ctd\u003e\u003ctt\u003e.radius\u003c/tt\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eExample\u003c/td\u003e\n    \u003ctd\u003e\u003ctt\u003eradius :index, :locals =\u003e { :key =\u003e 'value' }\u003c/tt\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\nSince you cannot call Ruby methods directly from a Radius template, you\nalmost always want to pass locals to it.\n\n#### Markaby Templates\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eDependency\u003c/td\u003e\n    \u003ctd\u003e\u003ca href=\"https://markaby.github.io/\" title=\"Markaby\"\u003eMarkaby\u003c/a\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eFile Extension\u003c/td\u003e\n    \u003ctd\u003e\u003ctt\u003e.mab\u003c/tt\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eExample\u003c/td\u003e\n    \u003ctd\u003e\u003ctt\u003emarkaby { h1 \"Welcome!\" }\u003c/tt\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\nIt also takes a block for inline templates (see [example](#inline-templates)).\n\n#### RABL Templates\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eDependency\u003c/td\u003e\n    \u003ctd\u003e\u003ca href=\"https://github.com/nesquena/rabl\" title=\"Rabl\"\u003eRabl\u003c/a\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eFile Extension\u003c/td\u003e\n    \u003ctd\u003e\u003ctt\u003e.rabl\u003c/tt\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eExample\u003c/td\u003e\n    \u003ctd\u003e\u003ctt\u003erabl :index\u003c/tt\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\n#### Slim Templates\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eDependency\u003c/td\u003e\n    \u003ctd\u003e\u003ca href=\"http://slim-lang.com/\" title=\"Slim Lang\"\u003eSlim Lang\u003c/a\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eFile Extension\u003c/td\u003e\n    \u003ctd\u003e\u003ctt\u003e.slim\u003c/tt\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eExample\u003c/td\u003e\n    \u003ctd\u003e\u003ctt\u003eslim :index\u003c/tt\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\n#### Creole Templates\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eDependency\u003c/td\u003e\n    \u003ctd\u003e\u003ca href=\"https://github.com/minad/creole\" title=\"Creole\"\u003eCreole\u003c/a\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eFile Extension\u003c/td\u003e\n    \u003ctd\u003e\u003ctt\u003e.creole\u003c/tt\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eExample\u003c/td\u003e\n    \u003ctd\u003e\u003ctt\u003ecreole :wiki, :layout_engine =\u003e :erb\u003c/tt\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\nIt is not possible to call methods from Creole, nor to pass locals to it. You\ntherefore will usually use it in combination with another rendering engine:\n\n```ruby\nerb :overview, :locals =\u003e { :text =\u003e creole(:introduction) }\n```\n\nNote that you may also call the `creole` method from within other templates:\n\n```ruby\n%h1 Hello From Haml!\n%p= creole(:greetings)\n```\n\nSince you cannot call Ruby from Creole, you cannot use layouts written in\nCreole. However, it is possible to use another rendering engine for the\ntemplate than for the layout by passing the `:layout_engine` option.\n\n#### MediaWiki Templates\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eDependency\u003c/td\u003e\n    \u003ctd\u003e\u003ca href=\"https://github.com/nricciar/wikicloth\" title=\"WikiCloth\"\u003eWikiCloth\u003c/a\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eFile Extension\u003c/td\u003e\n    \u003ctd\u003e\u003ctt\u003e.mediawiki\u003c/tt\u003e and \u003ctt\u003e.mw\u003c/tt\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eExample\u003c/td\u003e\n    \u003ctd\u003e\u003ctt\u003emediawiki :wiki, :layout_engine =\u003e :erb\u003c/tt\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\nIt is not possible to call methods from MediaWiki markup, nor to pass\nlocals to it. You therefore will usually use it in combination with\nanother rendering engine:\n\n```ruby\nerb :overview, :locals =\u003e { :text =\u003e mediawiki(:introduction) }\n```\n\nNote that you may also call the `mediawiki` method from within other\ntemplates:\n\n```ruby\n%h1 Hello From Haml!\n%p= mediawiki(:greetings)\n```\n\nSince you cannot call Ruby from MediaWiki, you cannot use layouts written in\nMediaWiki. However, it is possible to use another rendering engine for the\ntemplate than for the layout by passing the `:layout_engine` option.\n\n#### CoffeeScript Templates\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eDependency\u003c/td\u003e\n    \u003ctd\u003e\n      \u003ca href=\"https://github.com/josh/ruby-coffee-script\" title=\"Ruby CoffeeScript\"\u003e\n        CoffeeScript\n      \u003c/a\u003e and a\n      \u003ca href=\"https://github.com/sstephenson/execjs\" title=\"ExecJS\"\u003e\n        way to execute javascript\n      \u003c/a\u003e\n    \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eFile Extension\u003c/td\u003e\n    \u003ctd\u003e\u003ctt\u003e.coffee\u003c/tt\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eExample\u003c/td\u003e\n    \u003ctd\u003e\u003ctt\u003ecoffee :index\u003c/tt\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\n#### Stylus Templates\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eDependency\u003c/td\u003e\n    \u003ctd\u003e\n      \u003ca href=\"https://github.com/forgecrafted/ruby-stylus\" title=\"Ruby Stylus\"\u003e\n        Stylus\n      \u003c/a\u003e and a\n      \u003ca href=\"https://github.com/sstephenson/execjs\" title=\"ExecJS\"\u003e\n        way to execute javascript\n      \u003c/a\u003e\n    \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eFile Extension\u003c/td\u003e\n    \u003ctd\u003e\u003ctt\u003e.styl\u003c/tt\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eExample\u003c/td\u003e\n    \u003ctd\u003e\u003ctt\u003estylus :index\u003c/tt\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\nBefore being able to use Stylus templates, you need to load `stylus` and\n`stylus/tilt` first:\n\n```ruby\nrequire 'sinatra'\nrequire 'stylus'\nrequire 'stylus/tilt'\n\nget '/' do\n  stylus :example\nend\n```\n\n#### Yajl Templates\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eDependency\u003c/td\u003e\n    \u003ctd\u003e\u003ca href=\"https://github.com/brianmario/yajl-ruby\" title=\"yajl-ruby\"\u003eyajl-ruby\u003c/a\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eFile Extension\u003c/td\u003e\n    \u003ctd\u003e\u003ctt\u003e.yajl\u003c/tt\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eExample\u003c/td\u003e\n    \u003ctd\u003e\n      \u003ctt\u003e\n        yajl :index,\n             :locals =\u003e { :key =\u003e 'qux' },\n             :callback =\u003e 'present',\n             :variable =\u003e 'resource'\n      \u003c/tt\u003e\n    \u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\n\nThe template source is evaluated as a Ruby string, and the\nresulting json variable is converted using `#to_json`:\n\n```ruby\njson = { :foo =\u003e 'bar' }\njson[:baz] = key\n```\n\nThe `:callback` and `:variable` options can be used to decorate the rendered\nobject:\n\n```javascript\nvar resource = {\"foo\":\"bar\",\"baz\":\"qux\"};\npresent(resource);\n```\n\n#### WLang Templates\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eDependency\u003c/td\u003e\n    \u003ctd\u003e\u003ca href=\"https://github.com/blambeau/wlang\" title=\"WLang\"\u003eWLang\u003c/a\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eFile Extension\u003c/td\u003e\n    \u003ctd\u003e\u003ctt\u003e.wlang\u003c/tt\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003eExample\u003c/td\u003e\n    \u003ctd\u003e\u003ctt\u003ewlang :index, :locals =\u003e { :key =\u003e 'value' }\u003c/tt\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\nSince calling ruby methods is not idiomatic in WLang, you almost always\nwant to pass locals to it. Layouts written in WLang and `yield` are\nsupported, though.\n\n### Accessing Variables in Templates\n\nTemplates are evaluated within the same context as route handlers. Instance\nvariables set in route handlers are directly accessible by templates:\n\n```ruby\nget '/:id' do\n  @foo = Foo.find(params['id'])\n  haml '%h1= @foo.name'\nend\n```\n\nOr, specify an explicit Hash of local variables:\n\n```ruby\nget '/:id' do\n  foo = Foo.find(params['id'])\n  haml '%h1= bar.name', :locals =\u003e { :bar =\u003e foo }\nend\n```\n\nThis is typically used when rendering templates as partials from within\nother templates.\n\n### Templates with `yield` and nested layouts\n\nA layout is usually just a template that calls `yield`.\nSuch a template can be used either through the `:template` option as\ndescribed above, or it can be rendered with a block as follows:\n\n```ruby\nerb :post, :layout =\u003e false do\n  erb :index\nend\n```\n\nThis code is mostly equivalent to `erb :index, :layout =\u003e :post`.\n\nPassing blocks to rendering methods is most useful for creating nested\nlayouts:\n\n```ruby\nerb :main_layout, :layout =\u003e false do\n  erb :admin_layout do\n    erb :user\n  end\nend\n```\n\nThis can also be done in fewer lines of code with:\n\n```ruby\nerb :admin_layout, :layout =\u003e :main_layout do\n  erb :user\nend\n```\n\nCurrently, the following rendering methods accept a block: `erb`, `haml`,\n`liquid`, `slim `, `wlang`. Also the general `render` method accepts a block.\n\n### Inline Templates\n\nTemplates may be defined at the end of the source file:\n\n```ruby\nrequire 'sinatra'\n\nget '/' do\n  haml :index\nend\n\n__END__\n\n@@ layout\n%html\n  = yield\n\n@@ index\n%div.title Hello world.\n```\n\nNOTE: Inline templates defined in the source file that requires sinatra are\nautomatically loaded. Call `enable :inline_templates` explicitly if you\nhave inline templates in other source files.\n\n### Named Templates\n\nTemplates may also be defined using the top-level `template` method:\n\n```ruby\ntemplate :layout do\n  \"%html\\n  =yield\\n\"\nend\n\ntemplate :index do\n  '%div.title Hello World!'\nend\n\nget '/' do\n  haml :index\nend\n```\n\nIf a template named \"layout\" exists, it will be used each time a template\nis rendered. You can individually disable layouts by passing\n`:layout =\u003e false` or disable them by default via\n`set :haml, :layout =\u003e false`:\n\n```ruby\nget '/' do\n  haml :index, :layout =\u003e !request.xhr?\nend\n```\n\n### Associating File Extensions\n\nTo associate a file extension with a template engine, use\n`Tilt.register`. For instance, if you like to use the file extension\n`tt` for Textile templates, you can do the following:\n\n```ruby\nTilt.register :tt, Tilt[:textile]\n```\n\n### Adding Your Own Template Engine\n\nFirst, register your engine with Tilt, then create a rendering method:\n\n```ruby\nTilt.register :myat, MyAwesomeTemplateEngine\n\nhelpers do\n  def myat(*args) render(:myat, *args) end\nend\n\nget '/' do\n  myat :index\nend\n```\n\nRenders `./views/index.myat`. Learn more about\n[Tilt](https://github.com/rtomayko/tilt#readme).\n\n### Using Custom Logic for Template Lookup\n\nTo implement your own template lookup mechanism you can write your\nown `#find_template` method:\n\n```ruby\nconfigure do\n  set :views [ './views/a', './views/b' ]\nend\n\ndef find_template(views, name, engine, \u0026block)\n  Array(views).each do |v|\n    super(v, name, engine, \u0026block)\n  end\nend\n```\n\n## Filters\n\nBefore filters are evaluated before each request within the same context\nas the routes will be and can modify the request and response. Instance\nvariables set in filters are accessible by routes and templates:\n\n```ruby\nbefore do\n  @note = 'Hi!'\n  request.path_info = '/foo/bar/baz'\nend\n\nget '/foo/*' do\n  @note #=\u003e 'Hi!'\n  params['splat'] #=\u003e 'bar/baz'\nend\n```\n\nAfter filters are evaluated after each request within the same context\nas the routes will be and can also modify the request and response.\nInstance variables set in before filters and routes are accessible by\nafter filters:\n\n```ruby\nafter do\n  puts response.status\nend\n```\n\nNote: Unless you use the `body` method rather than just returning a\nString from the routes, the body will not yet be available in the after\nfilter, since it is generated later on.\n\nFilters optionally take a pattern, causing them to be evaluated only if the\nrequest path matches that pattern:\n\n```ruby\nbefore '/protected/*' do\n  authenticate!\nend\n\nafter '/create/:slug' do |slug|\n  session[:last_slug] = slug\nend\n```\n\nLike routes, filters also take conditions:\n\n```ruby\nbefore :agent =\u003e /Songbird/ do\n  # ...\nend\n\nafter '/blog/*', :host_name =\u003e 'example.com' do\n  # ...\nend\n```\n\n## Helpers\n\nUse the top-level `helpers` method to define helper methods for use in\nroute handlers and templates:\n\n```ruby\nhelpers do\n  def bar(name)\n    \"#{name}bar\"\n  end\nend\n\nget '/:name' do\n  bar(params['name'])\nend\n```\n\nAlternatively, helper methods can be separately defined in a module:\n\n```ruby\nmodule FooUtils\n  def foo(name) \"#{name}foo\" end\nend\n\nmodule BarUtils\n  def bar(name) \"#{name}bar\" end\nend\n\nhelpers FooUtils, BarUtils\n```\n\nThe effect is the same as including the modules in the application class.\n\n### Using Sessions\n\nA session is used to keep state during requests. If activated, you have one\nsession hash per user session:\n\n```ruby\nenable :sessions\n\nget '/' do\n  \"value = \" \u003c\u003c session[:value].inspect\nend\n\nget '/:value' do\n  session['value'] = params['value']\nend\n```\n\n#### Session Secret Security\n\nTo improve security, the session data in the cookie is signed with a session\nsecret using `HMAC-SHA1`. This session secret should optimally be a\ncryptographically secure random value of an appropriate length which for\n`HMAC-SHA1` is greater than or equal to 64 bytes (512 bits, 128 hex\ncharacters). You would be advised not to use a secret that is less than 32\nbytes of randomness (256 bits, 64 hex characters). It is therefore **very\nimportant** that you don't just make the secret up, but instead use a secure\nrandom number generator to create it. Humans are extremely bad at generating\nrandom values.\n\nBy default, a 32 byte secure random session secret is generated for you by\nSinatra, but it will change with every restart of your application. If you\nhave multiple instances of your application, and you let Sinatra generate the\nkey, each instance would then have a different session key which is probably\nnot what you want.\n\nFor better security and usability it's\n[recommended](https://12factor.net/config) that you generate a secure random\nsecret and store it in an environment variable on each host running your\napplication so that all of your application instances will share the same\nsecret. You should periodically rotate this session secret to a new value.\nHere are some examples of how you might create a 64 byte secret and set it:\n\n**Session Secret Generation**\n\n```text\n$ ruby -e \"require 'securerandom'; puts SecureRandom.hex(64)\"\n99ae8af...snip...ec0f262ac\n```\n\n**Session Secret Generation (Bonus Points)**\n\nUse the [sysrandom gem](https://github.com/cryptosphere/sysrandom#readme) to\nprefer use of system RNG facilities to generate random values instead of\nuserspace `OpenSSL` which MRI Ruby currently defaults to:\n\n```text\n$ gem install sysrandom\nBuilding native extensions.  This could take a while...\nSuccessfully installed sysrandom-1.x\n1 gem installed\n\n$ ruby -e \"require 'sysrandom/securerandom'; puts SecureRandom.hex(64)\"\n99ae8af...snip...ec0f262ac\n```\n\n**Session Secret Environment Variable**\n\nSet a `SESSION_SECRET` environment variable for Sinatra to the value you\ngenerated. Make this value persistent across reboots of your host. Since the\nmethod for doing this will vary across systems this is for illustrative\npurposes only:\n\n```bash\n# echo \"export SESSION_SECRET=99ae8af...snip...ec0f262ac\" \u003e\u003e ~/.bashrc\n```\n\n**Session Secret App Config**\n\nSetup your app config to fail-safe to a secure random secret\nif the `SESSION_SECRET` environment variable is not available.\n\nFor bonus points use the [sysrandom\ngem](https://github.com/cryptosphere/sysrandom#readme) here as well:\n\n```ruby\nrequire 'securerandom'\n# -or- require 'sysrandom/securerandom'\nset :session_secret, ENV.fetch('SESSION_SECRET') { SecureRandom.hex(64) }\n```\n\n#### Session Config\n\nIf you want to configure it further, you may also store a hash with options\nin the `sessions` setting:\n\n```ruby\nset :sessions, :domain =\u003e 'foo.com'\n```\n\nTo share your session across other apps on subdomains of foo.com, prefix the\ndomain with a *.* like this instead:\n\n```ruby\nset :sessions, :domain =\u003e '.foo.com'\n```\n\n#### Choosing Your Own Session Middleware\n\nNote that `enable :sessions` actually stores all data in a cookie. This\nmight not always be what you want (storing lots of data will increase your\ntraffic, for instance). You can use any Rack session middleware in order to\ndo so, one of the following methods can be used:\n\n```ruby\nenable :sessions\nset :session_store, Rack::Session::Pool\n```\n\nOr to set up sessions with a hash of options:\n\n```ruby\nset :sessions, :expire_after =\u003e 2592000\nset :session_store, Rack::Session::Pool\n```\n\nAnother option is to **not** call `enable :sessions`, but instead pull in\nyour middleware of choice as you would any other middleware.\n\nIt is important to note that when using this method, session based\nprotection **will not be enabled by default**.\n\nThe Rack middleware to do that will also need to be added:\n\n```ruby\nuse Rack::Session::Pool, :expire_after =\u003e 2592000\nuse Rack::Protection::RemoteToken\nuse Rack::Protection::SessionHijacking\n```\n\nSee '[Configuring attack protection](#configuring-attack-protection)' for more information.\n\n### Halting\n\nTo immediately stop a request within a filter or route use:\n\n```ruby\nhalt\n```\n\nYou can also specify the status when halting:\n\n```ruby\nhalt 410\n```\n\nOr the body:\n\n```ruby\nhalt 'this will be the body'\n```\n\nOr both:\n\n```ruby\nhalt 401, 'go away!'\n```\n\nWith headers:\n\n```ruby\nhalt 402, {'Content-Type' =\u003e 'text/plain'}, 'revenge'\n```\n\nIt is of course possible to combine a template with `halt`:\n\n```ruby\nhalt erb(:error)\n```\n\n### Passing\n\nA route can punt processing to the next matching route using `pass`:\n\n```ruby\nget '/guess/:who' do\n  pass unless params['who'] == 'Frank'\n  'You got me!'\nend\n\nget '/guess/*' do\n  'You missed!'\nend\n```\n\nThe route block is immediately exited and control continues with the next\nmatching route. If no matching route is found, a 404 is returned.\n\n### Triggering Another Route\n\nSometimes `pass` is not what you want, instead you would like to get the\nresult of calling another route. Simply use `call` to achieve this:\n\n```ruby\nget '/foo' do\n  status, headers, body = call env.merge(\"PATH_INFO\" =\u003e '/bar')\n  [status, headers, body.map(\u0026:upcase)]\nend\n\nget '/bar' do\n  \"bar\"\nend\n```\n\nNote that in the example above, you would ease testing and increase\nperformance by simply moving `\"bar\"` into a helper used by both `/foo` and\n`/bar`.\n\nIf you want the request to be sent to the same application instance rather\nthan a duplicate, use `call!` instead of `call`.\n\nCheck out the Rack specification if you want to learn more about `call`.\n\n### Setting Body, Status Code and Headers\n\nIt is possible and recommended to set the status code and response body with\nthe return value of the route block. However, in some scenarios you might\nwant to set the body at an arbitrary point in the execution flow. You can do\nso with the `body` helper method. If you do so, you can use that method from\nthere on to access the body:\n\n```ruby\nget '/foo' do\n  body \"bar\"\nend\n\nafter do\n  puts body\nend\n```\n\nIt is also possible to pass a block to `body`, which will be executed by the\nRack handler (this can be used to implement streaming, [see \"Return Values\"](#return-values)).\n\nSimilar to the body, you can also set the status code and headers:\n\n```ruby\nget '/foo' do\n  status 418\n  headers \\\n    \"Allow\"   =\u003e \"BREW, POST, GET, PROPFIND, WHEN\",\n    \"Refresh\" =\u003e \"Refresh: 20; https://ietf.org/rfc/rfc2324.txt\"\n  body \"I'm a tea pot!\"\nend\n```\n\nLike `body`, `headers` and `status` with no arguments can be used to access\ntheir current values.\n\n### Streaming Responses\n\nSometimes you want to start sending out data while still generating parts of\nthe response body. In extreme examples, you want to keep sending data until\nthe client closes the connection. You can use the `stream` helper to avoid\ncreating your own wrapper:\n\n```ruby\nget '/' do\n  stream do |out|\n    out \u003c\u003c \"It's gonna be legen -\\n\"\n    sleep 0.5\n    out \u003c\u003c \" (wait for it) \\n\"\n    sleep 1\n    out \u003c\u003c \"- dary!\\n\"\n  end\nend\n```\n\nThis allows you to implement streaming APIs,\n[Server Sent Events](https://w3c.github.io/eventsource/), and can be used as\nthe basis for [WebSockets](https://en.wikipedia.org/wiki/WebSocket). It can\nalso be used to increase throughput if some but not all content depends on a\nslow resource.\n\nNote that the streaming behavior, especially the number of concurrent\nrequests, highly depends on the web server used to serve the application.\nSome servers might not even support streaming at all. If the server does not\nsupport streaming, the body will be sent all at once after the block passed\nto `stream` finishes executing. Streaming does not work at all with Shotgun.\n\nIf the optional parameter is set to `keep_open`, it will not call `close` on\nthe stream object, allowing you to close it at any later point in the\nexecution flow. This only works on evented servers, like Thin and Rainbows.\nOther servers will still close the stream:\n\n```ruby\n# long polling\n\nset :server, :thin\nconnections = []\n\nget '/subscribe' do\n  # register a client's interest in server events\n  stream(:keep_open) do |out|\n    connections \u003c\u003c out\n    # purge dead connections\n    connections.reject!(\u0026:closed?)\n  end\nend\n\npost '/:message' do\n  connections.each do |out|\n    # notify client that a new message has arrived\n    out \u003c\u003c params['message'] \u003c\u003c \"\\n\"\n\n    # indicate client to connect again\n    out.close\n  end\n\n  # acknowledge\n  \"message received\"\nend\n```\n\nIt's also possible for the client to close the connection when trying to\nwrite to the socket. Because of this, it's recommended to check\n`out.closed?` before trying to write.\n\n### Logging\n\nIn the request scope, the `logger` helper exposes a `Logger` instance:\n\n```ruby\nget '/' do\n  logger.info \"loading data\"\n  # ...\nend\n```\n\nThis logger will automatically take your Rack handler's logging settings into\naccount. If logging is disabled, this method will return a dummy object, so\nyou do not have to worry about it in your routes and filters.\n\nNote that logging is only enabled for `Sinatra::Application` by default, so\nif you inherit from `Sinatra::Base`, you probably want to enable it yourself:\n\n```ruby\nclass MyApp \u003c Sinatra::Base\n  configure :production, :development do\n    enable :logging\n  end\nend\n```\n\nTo avoid any logging middleware to be set up, set the `logging` setting to\n`nil`. However, keep in mind that `logger` will in that case return `nil`. A\ncommon use case is when you want to set your own logger. Sinatra will use\nwhatever it will find in `env['rack.logger']`.\n\n### Mime Types\n\nWhen using `send_file` or static files you may have mime types Sinatra\ndoesn't understand. Use `mime_type` to register them by file extension:\n\n```ruby\nconfigure do\n  mime_type :foo, 'text/foo'\nend\n```\n\nYou can also use it with the `content_type` helper:\n\n```ruby\nget '/' do\n  content_type :foo\n  \"foo foo foo\"\nend\n```\n\n### Generating URLs\n\nFor generating URLs you should use the `url` helper method, for instance, in\nHaml:\n\n```ruby\n%a{:href =\u003e url('/foo')} foo\n```\n\nIt takes reverse proxies and Rack routers into account, if present.\n\nThis method is also aliased to `to` (see [below](#browser-redirect) for an example).\n\n### Browser Redirect\n\nYou can trigger a browser redirect with the `redirect` helper method:\n\n```ruby\nget '/foo' do\n  redirect to('/bar')\nend\n```\n\nAny additional parameters are handled like arguments passed to `halt`:\n\n```ruby\nredirect to('/bar'), 303\nredirect 'http://www.google.com/', 'wrong place, buddy'\n```\n\nYou can also easily redirect back to the page the user came from with\n`redirect back`:\n\n```ruby\nget '/foo' do\n  \"\u003ca href='/bar'\u003edo something\u003c/a\u003e\"\nend\n\nget '/bar' do\n  do_something\n  redirect back\nend\n```\n\nTo pass arguments with a redirect, either add them to the query:\n\n```ruby\nredirect to('/bar?sum=42')\n```\n\nOr use a session:\n\n```ruby\nenable :sessions\n\nget '/foo' do\n  session[:secret] = 'foo'\n  redirect to('/bar')\nend\n\nget '/bar' do\n  session[:secret]\nend\n```\n\n### Cache Control\n\nSetting your headers correctly is the foundation for proper HTTP caching.\n\nYou can easily set the Cache-Control header like this:\n\n```ruby\nget '/' do\n  cache_control :public\n  \"cache it!\"\nend\n```\n\nPro tip: Set up caching in a before filter:\n\n```ruby\nbefore do\n  cache_control :public, :must_revalidate, :max_age =\u003e 60\nend\n```\n\nIf you are using the `expires` helper to set the corresponding header,\n`Cache-Control` will be set automatically for you:\n\n```ruby\nbefore do\n  expires 500, :public, :must_revalidate\nend\n```\n\nTo properly use caches, you should consider using `etag` or `last_modified`.\nIt is recommended to call those helpers *before* doing any heavy lifting, as\nthey will immediately flush a response if the client already has the current\nversion in its cache:\n\n```ruby\nget \"/article/:id\" do\n  @article = Article.find params['id']\n  last_modified @article.updated_at\n  etag @article.sha1\n  erb :article\nend\n```\n\nIt is also possible to use a\n[weak ETag](https://en.wikipedia.org/wiki/HTTP_ETag#Strong_and_weak_validation):\n\n```ruby\netag @article.sha1, :weak\n```\n\nThese helpers will not do any caching for you, but rather feed the necessary\ninformation to your cache. If you are looking for a quick\nreverse-proxy caching solution, try\n[rack-cache](https://github.com/rtomayko/rack-cache#readme):\n\n```ruby\nrequire \"rack/cache\"\nrequire \"sinatra\"\n\nuse Rack::Cache\n\nget '/' do\n  cache_control :public, :max_age =\u003e 36000\n  sleep 5\n  \"hello\"\nend\n```\n\nUse the `:static_cache_control` setting (see [below](#cache-control)) to add\n`Cache-Control` header info to static files.\n\nAccording to RFC 2616, your application should behave differently if the\nIf-Match or If-None-Match header is set to `*`, depending on whether the\nresource requested is already in existence. Sinatra assumes resources for\nsafe (like get) and idempotent (like put) requests are already in existence,\nwhereas other resources (for instance post requests) are treated as new\nresources. You can change this behavior by passing in a `:new_resource`\noption:\n\n```ruby\nget '/create' do\n  etag '', :new_resource =\u003e true\n  Article.create\n  erb :new_article\nend\n```\n\nIf you still want to use a weak ETag, pass in a `:kind` option:\n\n```ruby\netag '', :new_resource =\u003e true, :kind =\u003e :weak\n```\n\n### Sending Files\n\nTo return the contents of a file as the response, you can use the `send_file`\nhelper method:\n\n```ruby\nget '/' do\n  send_file 'foo.png'\nend\n```\n\nIt also takes options:\n\n```ruby\nsend_file 'foo.png', :type =\u003e :jpg\n```\n\nThe options are:\n\n\u003cdl\u003e\n  \u003cdt\u003efilename\u003c/dt\u003e\n    \u003cdd\u003eFile name to be used in the response,\n    defaults to the real file name.\u003c/dd\u003e\n  \u003cdt\u003elast_modified\u003c/dt\u003e\n    \u003cdd\u003eValue for Last-Modified header, defaults to the file's mtime.\u003c/dd\u003e\n\n  \u003cdt\u003etype\u003c/dt\u003e\n    \u003cdd\u003eValue for Content-Type header, guessed from the file extension if\n    missing.\u003c/dd\u003e\n\n  \u003cdt\u003edisposition\u003c/dt\u003e\n    \u003cdd\u003e\n      Value for Content-Disposition header, possible values: \u003ctt\u003enil\u003c/tt\u003e\n      (default), \u003ctt\u003e:attachment\u003c/tt\u003e and \u003ctt\u003e:inline\u003c/tt\u003e\n    \u003c/dd\u003e\n\n  \u003cdt\u003elength\u003c/dt\u003e\n    \u003cdd\u003eValue for Content-Length header, defaults to file size.\u003c/dd\u003e\n\n  \u003cdt\u003estatus\u003c/dt\u003e\n    \u003cdd\u003e\n      Status code to be sent. Useful when sending a static file as an error\n      page. If supported by the Rack handler, other means than streaming\n      from the Ruby process will be used. If you use this helper method,\n      Sinatra will automatically handle range requests.\n    \u003c/dd\u003e\n\u003c/dl\u003e\n\n### Accessing the Request Object\n\nThe incoming request object can be accessed from request level (filter,\nroutes, error handlers) through the `request` method:\n\n```ruby\n# app running on http://example.com/example\nget '/foo' do\n  t = %w[text/css text/html application/javascript]\n  request.accept              # ['text/html', '*/*']\n  request.accept? 'text/xml'  # true\n  request.preferred_type(t)   # 'text/html'\n  request.body                # request body sent by the client (see below)\n  request.scheme              # \"http\"\n  request.script_name         # \"/example\"\n  request.path_info           # \"/foo\"\n  request.port                # 80\n  request.request_method      # \"GET\"\n  request.query_string        # \"\"\n  request.content_length      # length of request.body\n  request.media_type          # media type of request.body\n  request.host                # \"example.com\"\n  request.get?                # true (similar methods for other verbs)\n  request.form_data?          # false\n  request[\"some_param\"]       # value of some_param parameter. [] is a shortcut to the params hash.\n  request.referrer            # the referrer of the client or '/'\n  request.user_agent          # user agent (used by :agent condition)\n  request.cookies             # hash of browser cookies\n  request.xhr?                # is this an ajax request?\n  request.url                 # \"http://example.com/example/foo\"\n  request.path                # \"/example/foo\"\n  request.ip                  # client IP address\n  request.secure?             # false (would be true over ssl)\n  request.forwarded?          # true (if running behind a reverse proxy)\n  request.env                 # raw env hash handed in by Rack\nend\n```\n\nSome options, like `script_name` or `path_info`, can also be written:\n\n```ruby\nbefore { request.path_info = \"/\" }\n\nget \"/\" do\n  \"all requests end up here\"\nend\n```\n\nThe `request.body` is an IO or StringIO object:\n\n```ruby\npost \"/api\" do\n  request.body.rewind  # in case someone already read it\n  data = JSON.parse request.body.read\n  \"Hello #{data['name']}!\"\nend\n```\n\n### Attachments\n\nYou can use the `attachment` helper to tell the browser the response should\nbe stored on disk rather than displayed in the browser:\n\n```ruby\nget '/' do\n  attachment\n  \"store it!\"\nend\n```\n\nYou can also pass it a file name:\n\n```ruby\nget '/' do\n  attachment \"info.txt\"\n  \"store it!\"\nend\n```\n\n### Dealing with Date and Time\n\nSinatra offers a `time_for` helper method that generates a Time object from\nthe given value. It is also able to convert `DateTime`, `Date` and similar\nclasses:\n\n```ruby\nget '/' do\n  pass if Time.now \u003e time_for('Dec 23, 2016')\n  \"still time\"\nend\n```\n\nThis method is used internally by `expires`, `last_modified` and akin. You\ncan therefore easily extend the behavior of those methods by overriding\n`time_for` in your application:\n\n```ruby\nhelpers do\n  def time_for(value)\n    case value\n    when :yesterday then Time.now - 24*60*60\n    when :tomorrow  then Time.now + 24*60*60\n    else super\n    end\n  end\nend\n\nget '/' do\n  last_modified :yesterday\n  expires :tomorrow\n  \"hello\"\nend\n```\n\n### Looking Up Template Files\n\nThe `find_template` helper is used to find template files for rendering:\n\n```ruby\nfind_template settings.views, 'foo', Tilt[:haml] do |file|\n  puts \"could be #{file}\"\nend\n```\n\nThis is not really useful. But it is useful that you can actually override\nthis method to hook in your own lookup mechanism. For instance, if you want\nto be able to use more than one view directory:\n\n```ruby\nset :views, ['views', 'templates']\n\nhelpers do\n  def find_template(views, name, engine, \u0026block)\n    Array(views).each { |v| super(v, name, engine, \u0026block) }\n  end\nend\n```\n\nAnother example would be using different directories for different engines:\n\n```ruby\nset :views, :sass =\u003e 'views/sass', :haml =\u003e 'templates', :default =\u003e 'views'\n\nhelpers do\n  def find_template(views, name, engine, \u0026block)\n    _, folder = views.detect { |k,v| engine == Tilt[k] }\n    folder ||= views[:default]\n    super(folder, name, engine, \u0026block)\n  end\nend\n```\n\nYou can also easily wrap this up in an extension and share with others!\n\nNote that `find_template` does not check if the file really exists but\nrather calls the given block for all possible paths. This is not a\nperformance issue, since `render` will use `break` as soon as a file is\nfound. Also, template locations (and content) will be cached if you are not\nrunning in development mode. You should keep that in mind if you write a\nreally crazy method.\n\n## Configuration\n\nRun once, at startup, in any environment:\n\n```ruby\nconfigure do\n  # setting one option\n  set :option, 'value'\n\n  # setting multiple options\n  set :a =\u003e 1, :b =\u003e 2\n\n  # same as `set :option, true`\n  enable :option\n\n  # same as `set :option, false`\n  disable :option\n\n  # you can also have dynamic settings with blocks\n  set(:css_dir) { File.join(views, 'css') }\nend\n```\n\nRun only when the environment (`APP_ENV` environment variable) is set to\n`:production`:\n\n```ruby\nconfigure :production do\n  ...\nend\n```\n\nRun when the environment is set to either `:production` or `:test`:\n\n```ruby\nconfigure :production, :test do\n  ...\nend\n```\n\nYou can access those options via `settings`:\n\n```ruby\nconfigure do\n  set :foo, 'bar'\nend\n\nget '/' do\n  settings.foo? # =\u003e true\n  settings.foo  # =\u003e 'bar'\n  ...\nend\n```\n\n### Configuring attack protection\n\nSinatra is using\n[Rack::Protection](https://github.com/sinatra/sinatra/tree/master/rack-protection#readme) to\ndefend your application against common, opportunistic attacks. You can\neasily disable this behavior (which will open up your application to tons\nof common vulnerabilities):\n\n```ruby\ndisable :protection\n```\n\nTo skip a single defense layer, set `protection` to an options hash:\n\n```ruby\nset :protection, :except =\u003e :path_traversal\n```\nYou can also hand in an array in order to disable a list of protections:\n\n```ruby\nset :protection, :except =\u003e [:path_traversal, :session_hijacking]\n```\n\nBy default, Sinatra will only set up session based protection if `:sessions`\nhave been enabled. See '[Using Sessions](#using-sessions)'. Sometimes you may want to set up\nsessions \"outside\" of the Sinatra app, such as in the config.ru or with a\nseparate `Rack::Builder` instance. In that case you can still set up session\nbased protection by passing the `:session` option:\n\n```ruby\nset :protection, :session =\u003e true\n```\n\n### Available Settings\n\n\u003cdl\u003e\n  \u003cdt\u003eabsolute_redirects\u003c/dt\u003e\n    \u003cdd\u003e\n      If disabled, Sinatra will allow relative redirects, however, Sinatra\n      will no longer conform with RFC 2616 (HTTP 1.1), which only allows\n      absolute redirects.\n    \u003c/dd\u003e\n    \u003cdd\u003e\n      Enable if your app is running behind a reverse proxy that has not been\n      set up properly. Note that the \u003ctt\u003eurl\u003c/tt\u003e helper will still produce\n      absolute URLs, unless you pass in \u003ctt\u003efalse\u003c/tt\u003e as the second\n      parameter.\n    \u003c/dd\u003e\n    \u003cdd\u003eDisabled by default.\u003c/dd\u003e\n\n  \u003cdt\u003eadd_charset\u003c/dt\u003e\n    \u003cdd\u003e\n      Mime types the \u003ctt\u003econtent_type\u003c/tt\u003e helper will automatically add the\n      charset info to. You should add to it rather than overriding this\n      option: \u003ctt\u003esettings.add_charset \u003c\u003c \"application/foobar\"\u003c/tt\u003e\n    \u003c/dd\u003e\n\n  \u003cdt\u003eapp_file\u003c/dt\u003e\n    \u003cdd\u003e\n      Path to the main application file, used to detect project root, views\n      and public folder and inline templates.\n    \u003c/dd\u003e\n\n  \u003cdt\u003ebind\u003c/dt\u003e\n    \u003cdd\u003e\n      IP address to bind to (default: \u003ctt\u003e0.0.0.0\u003c/tt\u003e \u003cem\u003eor\u003c/em\u003e\n      \u003ctt\u003elocalhost\u003c/tt\u003e if your `environment` is set to development). Only\n      used for built-in server.\n    \u003c/dd\u003e\n\n  \u003cdt\u003edefault_encoding\u003c/dt\u003e\n    \u003cdd\u003eEncoding to assume if unknown (defaults to \u003ctt\u003e\"utf-8\"\u003c/tt\u003e).\u003c/dd\u003e\n\n  \u003cdt\u003edump_errors\u003c/dt\u003e\n    \u003cdd\u003eDisplay errors in the log.\u003c/dd\u003e\n\n  \u003cdt\u003eenvironment\u003c/dt\u003e\n    \u003cdd\u003e\n      Current environment. Defaults to \u003ctt\u003eENV['APP_ENV']\u003c/tt\u003e, or\n      \u003ctt\u003e\"development\"\u003c/tt\u003e if not available.\n    \u003c/dd\u003e\n\n  \u003cdt\u003elogging\u003c/dt\u003e\n    \u003cdd\u003eUse the logger.\u003c/dd\u003e\n\n  \u003cdt\u003elock\u003c/dt\u003e\n    \u003cdd\u003e\n      Places a lock around every request, only running processing on request\n      per Ruby process concurrently.\n    \u003c/dd\u003e\n    \u003cdd\u003eEnabled if your app is not thread-safe. Disabled by default.\u003c/dd\u003e\n\n  \u003cdt\u003emethod_override\u003c/dt\u003e\n    \u003cdd\u003e\n      Use \u003ctt\u003e_method\u003c/tt\u003e magic to allow put/delete forms in browsers that\n      don't support it.\n    \u003c/dd\u003e\n\n  \u003cdt\u003emustermann_opts\u003c/dt\u003e\n  \u003cdd\u003e\n    A default hash of options to pass to Mustermann.new when compiling routing\n    paths.\n  \u003c/dd\u003e\n\n  \u003cdt\u003eport\u003c/dt\u003e\n    \u003cdd\u003ePort to listen on. Only used for built-in server.\u003c/dd\u003e\n\n  \u003cdt\u003eprefixed_redirects\u003c/dt\u003e\n    \u003cdd\u003e\n      Whether or not to insert \u003ctt\u003erequest.script_name\u003c/tt\u003e into redirects\n      if no absolute path is given. That way \u003ctt\u003eredirect '/foo'\u003c/tt\u003e would\n        behave like \u003ctt\u003eredirect to('/foo')\u003c/tt\u003e. Disabled by default.\n    \u003c/dd\u003e\n\n  \u003cdt\u003eprotection\u003c/dt\u003e\n    \u003cdd\u003e\n      Whether or not to enable web attack protections. See protection section\n      above.\n    \u003c/dd\u003e\n\n  \u003cdt\u003epublic_dir\u003c/dt\u003e\n    \u003cdd\u003eAlias for \u003ctt\u003epublic_folder\u003c/tt\u003e. See below.\u003c/dd\u003e\n\n  \u003cdt\u003epublic_folder\u003c/dt\u003e\n    \u003cdd\u003e\n      Path to the folder public files are served from. Only used if static\n      file serving is enabled (see \u003ctt\u003estatic\u003c/tt\u003e setting below). Inferred\n      from \u003ctt\u003eapp_file\u003c/tt\u003e setting if not set.\n    \u003c/dd\u003e\n\n  \u003cdt\u003equiet\u003c/dt\u003e\n    \u003cdd\u003e\n      Disables logs generated by Sinatra's start and stop commands.\n      \u003ctt\u003efalse\u003c/tt\u003e by default.\n    \u003c/dd\u003e\n\n  \u003cdt\u003ereload_templates\u003c/dt\u003e\n    \u003cdd\u003e\n      Whether or not to reload templates between requests. Enabled in\n      development mode.\n    \u003c/dd\u003e\n\n  \u003cdt\u003eroot\u003c/dt\u003e\n    \u003cdd\u003e\n      Path to project root folder. Inferred from \u003ctt\u003eapp_file\u003c/tt\u003e setting\n      if not set.\n    \u003c/dd\u003e\n\n  \u003cdt\u003eraise_errors\u003c/dt\u003e\n    \u003cdd\u003e\n      Raise exceptions (will stop application). Enabled by default when\n      \u003ctt\u003eenvironment\u003c/tt\u003e is set to \u003ctt\u003e\"test\"\u003c/tt\u003e, disabled otherwise.\n    \u003c/dd\u003e\n\n  \u003cdt\u003erun\u003c/dt\u003e\n    \u003cdd\u003e\n      If enabled, Sinatra will handle starting the web server. Do not\n      enable if using rackup or other means.\n    \u003c/dd\u003e\n\n  \u003cdt\u003erunning\u003c/dt\u003e\n    \u003cdd\u003eIs the built-in server running now? Do not change this setting!\u003c/dd\u003e\n\n  \u003cdt\u003eserver\u003c/dt\u003e\n    \u003cdd\u003e\n      Server or list of servers to use for built-in server. Order indicates\n      priority, default depends on Ruby implementation.\n    \u003c/dd\u003e\n\n  \u003cdt\u003eserver_settings\u003c/dt\u003e\n    \u003cdd\u003e\n      If you are using a WEBrick web server, presumably for your development\n      environment, you can pass a hash of options to \u003ctt\u003eserver_settings\u003c/tt\u003e,\n      such as \u003ctt\u003eSSLEnable\u003c/tt\u003e or \u003ctt\u003eSSLVerifyClient\u003c/tt\u003e. However, web\n      servers such as Puma and Thin do not support this, so you can set\n      \u003ctt\u003eserver_settings\u003c/tt\u003e by defining it as a method when you call\n      \u003ctt\u003econfigure\u003c/tt\u003e.\n    \u003c/dd\u003e\n\n  \u003cdt\u003esessions\u003c/dt\u003e\n    \u003cdd\u003e\n      Enable cookie-based sessions support using\n      \u003ctt\u003eRack::Session::Cookie\u003c/tt\u003e. See 'Using Sessions' section for more\n      information.\n    \u003c/dd\u003e\n\n  \u003cdt\u003esession_store\u003c/dt\u003e\n    \u003cdd\u003e\n      The Rack session middleware used. Defaults to\n      \u003ctt\u003eRack::Session::Cookie\u003c/tt\u003e. See 'Using Sessions' section for more\n      information.\n    \u003c/dd\u003e\n\n  \u003cdt\u003eshow_exceptions\u003c/dt\u003e\n    \u003cdd\u003e\n      Show a stack trace in the browser when an exception happens. Enabled by\n      default when \u003ctt\u003eenvironment\u003c/tt\u003e is set to \u003ctt\u003e\"development\"\u003c/tt\u003e,\n      disabled otherwise.\n    \u003c/dd\u003e\n    \u003cdd\u003e\n      Can also be set to \u003ctt\u003e:after_handler\u003c/tt\u003e to trigger app-specified\n      error handling before showing a stack trace in the browser.\n    \u003c/dd\u003e\n\n  \u003cdt\u003estatic\u003c/dt\u003e\n    \u003cdd\u003eWhether Sinatra should handle serving static files.\u003c/dd\u003e\n    \u003cdd\u003eDisable when using a server able to do this on its own.\u003c/dd\u003e\n    \u003cdd\u003eDisabling will boost performance.\u003c/dd\u003e\n    \u003cdd\u003e\n      Enabled by default in classic style, disabled for modular apps.\n    \u003c/dd\u003e\n\n  \u003cdt\u003estatic_cache_control\u003c/dt\u003e\n    \u003cdd\u003e\n      When Sinatra is serving static files, set this to add\n      \u003ctt\u003eCache-Control\u003c/tt\u003e headers to the responses. Uses the\n      \u003ctt\u003ecache_control\u003c/tt\u003e helper. Disabled by default.\n    \u003c/dd\u003e\n    \u003cdd\u003e\n      Use an explicit array when setting multiple values:\n      \u003ctt\u003eset :static_cache_control, [:public, :max_age =\u003e 300]\u003c/tt\u003e\n    \u003c/dd\u003e\n\n  \u003cdt\u003ethreaded\u003c/dt\u003e\n    \u003cdd\u003e\n      If set to \u003ctt\u003etrue\u003c/tt\u003e, will tell Thin to use\n      \u003ctt\u003eEventMachine.defer\u003c/tt\u003e for processing the request.\n    \u003c/dd\u003e\n\n  \u003cdt\u003etraps\u003c/dt\u003e\n    \u003cdd\u003eWhether Sinatra should handle system signals.\u003c/dd\u003e\n\n  \u003cdt\u003eviews\u003c/dt\u003e\n    \u003cdd\u003e\n      Path to the views folder. Inferred from \u003ctt\u003eapp_file\u003c/tt\u003e setting if\n      not set.\n    \u003c/dd\u003e\n\n  \u003cdt\u003ex_cascade\u003c/dt\u003e\n    \u003cdd\u003e\n      Whether or not to set the X-Cascade header if no route matches.\n      Defaults to \u003ctt\u003etrue\u003c/tt\u003e.\n    \u003c/dd\u003e\n\u003c/dl\u003e\n\n## Environments\n\nThere are three predefined `environments`: `\"development\"`,\n`\"production\"` and `\"test\"`. Environments can be set through the\n`APP_ENV` environment variable. The default value is `\"development\"`.\nIn the `\"development\"` environment all templates are reloaded between\nrequests, and special `not_found` and `error` handlers display stack\ntraces in your browser. In the `\"production\"` and `\"test\"` environments,\ntemplates are cached by default.\n\nTo run different environments, set the `APP_ENV` environment variable:\n\n```shell\nAPP_ENV=production ruby my_app.rb\n```\n\nYou can use predefined methods: `development?`, `test?` and `production?` to\ncheck the current environment setting:\n\n```ruby\nget '/' do\n  if settings.development?\n    \"development!\"\n  else\n    \"not development!\"\n  end\nend\n```\n\n## Error Handling\n\nError handlers run within the same context as routes and before filters,\nwhich means you get all the goodies it has to offer, like `haml`, `erb`,\n`halt`, etc.\n\n### Not Found\n\nWhen a `Sinatra::NotFound` exception is raised, or the response's status\ncode is 404, the `not_found` handler is invoked:\n\n```ruby\nnot_found do\n  'This is nowhere to be found.'\nend\n```\n\n### Error\n\nThe `error` handler is invoked any time an exception is raised from a route\nblock or a filter. But note in development it will only run if you set the\nshow exceptions option to `:after_handler`:\n\n```ruby\nset :show_exceptions, :after_handler\n```\n\nThe exception object can be obtained from the `sinatra.error` Rack variable:\n\n```ruby\nerror do\n  'Sorry there was a nasty error - ' + env['sinatra.error'].message\nend\n```\n\nCustom errors:\n\n```ruby\nerror MyCustomError do\n  'So what happened was...' + env['sinatra.error'].message\nend\n```\n\nThen, if this happens:\n\n```ruby\nget '/' do\n  raise MyCustomError, 'something bad'\nend\n```\n\nYou get this:\n\n```\nSo what happened was... something bad\n```\n\nAlternatively, you can install an error handler for a status code:\n\n```ruby\nerror 403 do\n  'Access forbidden'\nend\n\nget '/secret' do\n  403\nend\n```\n\nOr a range:\n\n```ruby\nerror 400..510 do\n  'Boom'\nend\n```\n\nSinatra installs special `not_found` and `error` handlers when\nrunning under the development environment to display nice stack traces\nand additional debugging information in your browser.\n\n## Rack Middleware\n\nSinatra rides on [Rack](https://rack.github.io/), a minimal standard\ninterface for Ruby web frameworks. One of Rack's most interesting\ncapabilities for application developers is support for \"middleware\" --\ncomponents that sit between the server and your application monitoring\nand/or manipulating the HTTP request/response to provide various types\nof common functionality.\n\nSinatra makes building Rack middleware pipelines a cinch via a top-level\n`use` method:\n\n```ruby\nrequire 'sinatra'\nrequire 'my_custom_middleware'\n\nuse Rack::Lint\nuse MyCustomMiddleware\n\nget '/hello' do\n  'Hello World'\nend\n```\n\nThe semantics of `use` are identical to those defined for the\n[Rack::Builder](http://www.rubydoc.info/github/rack/rack/master/Rack/Builder) DSL\n(most frequently used from rackup files). For example, the `use` method\naccepts multiple/variable args as well as blocks:\n\n```ruby\nuse Rack::Auth::Basic do |username, password|\n  username == 'admin' \u0026\u0026 password == 'secret'\nend\n```\n\nRack is distributed with a variety of standard middleware for logging,\ndebugging, URL routing, authentication, and session handling. Sinatra uses\nmany of these components automatically based on configuration so you\ntypically don't have to `use` them explicitly.\n\nYou can find useful middleware in\n[rack](https://github.com/rack/rack/tree/master/lib/rack),\n[rack-contrib](https://github.com/rack/rack-contrib#readme),\nor in the [Rack wiki](https://github.com/rack/rack/wiki/List-of-Middleware).\n\n## Testing\n\nSinatra tests can be written using any Rack-based testing library or\nframework.\n[Rack::Test](http://www.rubydoc.info/github/brynary/rack-test/master/frames)\nis recommended:\n\n```ruby\nrequire 'my_sinatra_app'\nrequire 'minitest/autorun'\nrequire 'rack/test'\n\nclass MyAppTest \u003c Minitest::Test\n  include Rack::Test::Methods\n\n  def app\n    Sinatra::Application\n  end\n\n  def test_my_default\n    get '/'\n    assert_equal 'Hello World!', last_response.body\n  end\n\n  def test_with_params\n    get '/meet', :name =\u003e 'Frank'\n    assert_equal 'Hello Frank!', last_response.body\n  end\n\n  def test_with_user_agent\n    get '/', {}, 'HTTP_USER_AGENT' =\u003e 'Songbird'\n    assert_equal \"You're using Songbird!\", last_response.body\n  end\nend\n```\n\nNote: If you are using Sinatra in the modular style, replace\n`Sinatra::Application` above with the class name of your app.\n\n## Sinatra::Base - Middleware, Libraries, and Modular Apps\n\nDefining your app at the top-level works well for micro-apps but has\nconsiderable drawbacks when building reusable components such as Rack\nmiddleware, Rails metal, simple libraries with a server component, or even\nSinatra extensions. The top-level assumes a micro-app style configuration\n(e.g., a single application file, `./public` and `./views`\ndirectories, logging, exception detail page, etc.). That's where\n`Sinatra::Base` comes into play:\n\n```ruby\nrequire 'sinatra/base'\n\nclass MyApp \u003c Sinatra::Base\n  set :sessions, true\n  set :foo, 'bar'\n\n  get '/' do\n    'Hello world!'\n  end\nend\n```\n\nThe methods available to `Sinatra::Base` subclasses are exactly the same\nas those available via the top-level DSL. Most top-level apps can be\nconverted to `Sinatra::Base` components with two modifications:\n\n* Your file should require `sinatra/base` instead of `sinatra`;\n  otherwise, all of Sinatra's DSL methods are imported into the main\n  namespace.\n* Put your app's routes, error handlers, filters, and options in a subclass\n  of `Sinatra::Base`.\n\n`Sinatra::Base` is a blank slate. Most options are disabled by default,\nincluding the built-in server. See [Configuring\nSettings](http://www.sinatrarb.com/configuration.html) for details on\navailable options and their behavior. If you want behavior more similar\nto when you define your app at the top level (also known as Classic\nstyle), you can subclass `Sinatra::Application`:\n\n```ruby\nrequire 'sinatra/base'\n\nclass MyApp \u003c Sinatra::Application\n  get '/' do\n    'Hello world!'\n  end\nend\n```\n\n### Modular vs. Classic Style\n\nContrary to common belief, there is nothing wrong with the classic\nstyle. If it suits your application, you do not have to switch to a\nmodular application.\n\nThe main disadvantage of using the classic style rather than the modular\nstyle is that you will only have one Sinatra application per Ruby\nprocess. If you plan to use more than one, switch to the modular style.\nThere is no reason you cannot mix the modular and the classic styles.\n\nIf switching from one style to the other, you should be aware of\nslightly different default settings:\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth\u003eSetting\u003c/th\u003e\n    \u003cth\u003eClassic\u003c/th\u003e\n    \u003cth\u003eModular\u003c/th\u003e\n    \u003cth\u003eModular\u003c/th\u003e\n  \u003c/tr\u003e\n\n  \u003ctr\u003e\n    \u003ctd\u003eapp_file\u003c/td\u003e\n    \u003ctd\u003efile loading sinatra\u003c/td\u003e\n    \u003ctd\u003efile subclassing Sinatra::Base\u003c/td\u003e\n    \u003ctd\u003efile subclassing Sinatra::Application\u003c/td\u003e\n  \u003c/tr\u003e\n\n  \u003ctr\u003e\n    \u003ctd\u003erun\u003c/td\u003e\n    \u003ctd\u003e$0 == app_file\u003c/td\u003e\n    \u003ctd\u003efalse\u003c/td\u003e\n    \u003ctd\u003efalse\u003c/td\u003e\n  \u003c/tr\u003e\n\n  \u003ctr\u003e\n    \u003ctd\u003elogging\u003c/td\u003e\n    \u003ctd\u003etrue\u003c/td\u003e\n    \u003ctd\u003efalse\u003c/td\u003e\n    \u003ctd\u003etrue\u003c/td\u003e\n  \u003c/tr\u003e\n\n  \u003ctr\u003e\n    \u003ctd\u003emethod_override\u003c/td\u003e\n    \u003ctd\u003etrue\u003c/td\u003e\n    \u003ctd\u003efalse\u003c/td\u003e\n    \u003ctd\u003etrue\u003c/td\u003e\n  \u003c/tr\u003e\n\n  \u003ctr\u003e\n    \u003ctd\u003einline_templates\u003c/td\u003e\n    \u003ctd\u003etrue\u003c/td\u003e\n    \u003ctd\u003efalse\u003c/td\u003e\n    \u003ctd\u003etrue\u003c/td\u003e\n  \u003c/tr\u003e\n\n  \u003ctr\u003e\n    \u003ctd\u003estatic\u003c/td\u003e\n    \u003ctd\u003etrue\u003c/td\u003e\n    \u003ctd\u003eFile.exist?(public_folder)\u003c/td\u003e\n    \u003ctd\u003etrue\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\n### Serving a Modular Application\n\nThere are two common options for starting a modular app, actively\nstarting with `run!`:\n\n```ruby\n# my_app.rb\nrequire 'sinatra/base'\n\nclass MyApp \u003c Sinatra::Base\n  # ... app code here ...\n\n  # start the server if ruby file executed directly\n  run! if app_file == $0\nend\n```\n\nStart with:\n\n```shell\nruby my_app.rb\n```\n\nOr with a `config.ru` file, which allows using any Rack handler:\n\n```ruby\n# config.ru (run with rackup)\nrequire './my_app'\nrun MyApp\n```\n\nRun:\n\n```shell\nrackup -p 4567\n```\n\n### Using a Classic Style Application with a config.ru\n\nWrite your app file:\n\n```ruby\n# app.rb\nrequire 'sinatra'\n\nget '/' do\n  'Hello world!'\nend\n```\n\nAnd a corresponding `config.ru`:\n\n```ruby\nrequire './app'\nrun Sinatra::Application\n```\n\n### When to use a config.ru?\n\nA `config.ru` file is recommended if:\n\n* You want to deploy with a different Rack handler (Passenger, Unicorn,\n  Heroku, ...).\n* You want to use more than one subclass of `Sinatra::Base`.\n* You want to use Sinatra only for middleware, and not as an endpoint.\n\n**There is no need to switch to a `config.ru` simply because you\nswitched to the modular style, and you don't have to use the modular\nstyle for running with a `config.ru`.**\n\n### Using Sinatra as Middleware\n\nNot only is Sinatra able to use other Rack middleware, any Sinatra\napplication can in turn be added in front of any Rack endpoint as\nmiddleware itself. This endpoint could be another Sinatra application,\nor any other Rack-based application (Rails/Hanami/Roda/...):\n\n```ruby\nrequire 'sinatra/base'\n\nclass LoginScreen \u003c Sinatra::Base\n  enable :sessions\n\n  get('/login') { haml :login }\n\n  post('/login') do\n    if params['name'] == 'admin' \u0026\u0026 params['password'] == 'admin'\n      session['user_name'] = params['name']\n    else\n      redirect '/login'\n    end\n  end\nend\n\nclass MyApp \u003c Sinatra::Base\n  # middleware will run before filters\n  use LoginScreen\n\n  before do\n    unless session['user_name']\n      halt \"Access denied, please \u003ca href='/login'\u003elogin\u003c/a\u003e.\"\n    end\n  end\n\n  get('/') { \"Hello #{session['user_name']}.\" }\nend\n```\n\n### Dynamic Application Creation\n\nSometimes you want to create new applications at runtime without having to\nassign them to a constant. You can do this with `Sinatra.new`:\n\n```ruby\nrequire 'sinatra/base'\nmy_app = Sinatra.new { get('/') { \"hi\" } }\nmy_app.run!\n```\n\nIt takes the application to inherit from as an optional argument:\n\n```ruby\n# config.ru (run with rackup)\nrequire 'sinatra/base'\n\ncontroller = Sinatra.new do\n  enable :logging\n  helpers MyHelpers\nend\n\nmap('/a') do\n  run Sinatra.new(controller) { get('/') { 'a' } }\nend\n\nmap('/b') do\n  run Sinatra.new(controller) { get('/') { 'b' } }\nend\n```\n\nThis is especially useful for testing Sinatra extensions or using Sinatra in\nyour own library.\n\nThis also makes using Sinatra as middleware extremely easy:\n\n```ruby\nrequire 'sinatra/base'\n\nuse Sinatra do\n  get('/') { ... }\nend\n\nrun RailsProject::Application\n```\n\n## Scopes and Binding\n\nThe scope you are currently in determines what methods and variables are\navailable.\n\n### Application/Class Scope\n\nEvery Sinatra application corresponds to a subclass of `Sinatra::Base`.\nIf you are using the top-level DSL (`require 'sinatra'`), then this\nclass is `Sinatra::Application`, otherwise it is the subclass you\ncreated explicitly. At class level you have methods like `get` or\n`before`, but you cannot access the `request` or `session` objects, as\nthere is only a single application class for all requests.\n\nOptions created via `set` are methods at class level:\n\n```ruby\nclass MyApp \u003c Sinatra::Base\n  # Hey, I'm in the application scope!\n  set :foo, 42\n  foo # =\u003e 42\n\n  get '/foo' do\n    # Hey, I'm no longer in the application scope!\n  end\nend\n```\n\nYou have the application scope binding inside:\n\n* Your application class body\n* Methods defined by extensions\n* The block passed to `helpers`\n* Procs/blocks used as value for `set`\n* The block passed to `Sinatra.new`\n\nYou can reach the scope object (the class) like this:\n\n* Via the object passed to configure blocks (`configure { |c| ... }`)\n* `settings` from within the request scope\n\n### Request/Instance Scope\n\nFor every incoming request, a new instance of your application class is\ncreated, and all handler blocks run in that scope. From within this scope you\ncan access the `request` and `session` objects or call rendering methods like\n`erb` or `haml`. You can access the application scope from within the request\nscope via the `settings` helper:\n\n```ruby\nclass MyApp \u003c Sinatra::Base\n  # Hey, I'm in the application scope!\n  get '/define_route/:name' do\n    # Request scope for '/define_route/:name'\n    @value = 42\n\n    settings.get(\"/#{params['name']}\") do\n      # Request scope for \"/#{params['name']}\"\n      @value # =\u003e nil (not the same request)\n    end\n\n    \"Route defined!\"\n  end\nend\n```\n\nYou have the request scope binding inside:\n\n* get, head, post, put, delete, options, patch, link and unlink blocks\n* before and after filters\n* helper methods\n* templates/views\n\n### Delegation Scope\n\nThe delegation scope just forwards methods to the class scope. However, it\ndoes not behave exactly like the class scope, as you do not have the class\nbinding. Only methods explicitly marked for delegation are available, and you\ndo not share variables/state with the class scope (read: you have a different\n`self`). You can explicitly add method delegations by calling\n`Sinatra::Delegator.delegate :method_name`.\n\nYou have the delegate scope binding inside:\n\n* The top level binding, if you did `require \"sinatra\"`\n* An object extended with the `Sinatra::Delegator` mixin\n\nHave a look at the code for yourself: here's the\n[Sinatra::Delegator mixin](https://github.com/sinatra/sinatra/blob/ca06364/lib/sinatra/base.rb#L1609-1633)\nbeing [extending the main object](https://github.com/sinatra/sinatra/blob/ca06364/lib/sinatra/main.rb#L28-30).\n\n## Command Line\n\nSinatra applications can be run directly:\n\n```shell\nruby myapp.rb [-h] [-x] [-q] [-e ENVIRONMENT] [-p PORT] [-o HOST] [-s HANDLER]\n```\n\nOptions are:\n\n```\n-h # help\n-p # set the port (default is 4567)\n-o # set the host (default is 0.0.0.0)\n-e # set the environment (default is development)\n-s # specify rack server/handler (default is thin)\n-q # turn on quiet mode for server (default is off)\n-x # turn on the mutex lock (default is off)\n```\n\n### Multi-threading\n\n_Paraphrasing from\n[this StackOverflow answer](https://stackoverflow.com/a/6282999/5245129)\nby Konstantin_\n\nSinatra doesn't impose any concurrency model, but leaves that to the\nunderlying Rack handler (server) like Thin, Puma or WEBrick. Sinatra\nitself is thread-safe, so there won't be any problem if the Rack handler\nuses a threaded model of concurrency. This would mean that when starting\nthe server, you'd have to specify the correct invocation method for the\nspecific Rack handler. The following example is a demonstration of how\nto start a multi-threaded Thin server:\n\n```ruby\n# app.rb\n\nrequire 'sinatra/base'\n\nclass App \u003c Sinatra::Base\n  get '/' do\n    \"Hello, World\"\n  end\nend\n\nApp.run!\n\n```\n\nTo start the server, the command would be:\n\n```shell\nthin --threaded start\n```\n\n## Requirement\n\nThe following Ruby versions are officially supported:\n\u003cdl\u003e\n  \u003cdt\u003eRuby 2.2\u003c/dt\u003e\n  \u003cdd\u003e\n    2.2 is fully supported and recommended. There are currently no plans to\n    drop official support for it.\n  \u003c/dd\u003e\n\n  \u003cdt\u003eRubinius\u003c/dt\u003e\n  \u003cdd\u003e\n    Rubinius is officially supported (Rubinius \u003e= 2.x). It is recommended to\n    \u003ctt\u003egem install puma\u003c/tt\u003e.\n  \u003c/dd\u003e\n\n  \u003cdt\u003eJRuby\u003c/dt\u003e\n  \u003cdd\u003e\n    The latest stable release of JRuby is officially supported. It is not\n    recommended to use C extensions with JRuby. It is recommended to\n    \u003ctt\u003egem install trinidad\u003c/tt\u003e.\n  \u003c/dd\u003e\n\u003c/dl\u003e\n\nVersions of Ruby prior to 2.2.2 are no longer supported as of Sinatra 2.0.\n\nWe also keep an eye on upcoming Ruby versions.\n\nThe following Ruby implementations are not officially supported but still are\nknown to run Sinatra:\n\n* Older versions of JRuby and Rubinius\n* Ruby Enterprise Edition\n* MacRuby, Maglev, IronRuby\n* Ruby 1.9.0 and 1.9.1 (but we do recommend against using those)\n\nNot being officially supported means if things only break there and not on a\nsupported platform, we assume it's not our issue but theirs.\n\nWe also run our CI against ruby-head (future releases of MRI), but we\ncan't guarantee anything, since it is constantly moving. Expect upcoming\n2.x releases to be fully supported.\n\nSinatra should work on any operating system supported by the chosen Ruby\nimplementation.\n\nIf you run MacRuby, you should `gem install control_tower`.\n\nSinatra currently doesn't run on Cardinal, SmallRuby, BlueRuby or any\nRuby version prior to 2.2.\n\n## The Bleeding Edge\n\nIf you would like to use Sinatra's latest bleeding-edge code, feel free\nto run your application against the master branch, it should be rather\nstable.\n\nWe also push out prerelease gems from time to time, so you can do a\n\n```shell\ngem install sinatra --pre\n```\n\nto get some of the latest features.\n\n### With Bundler\n\nIf you want to run your application with the latest Sinatra, using\n[Bundler](https://bundler.io) is the recommended way.\n\nFirst, install bundler, if you haven't:\n\n```shell\ngem install bundler\n```\n\nThen, in your project directory, create a `Gemfile`:\n\n```ruby\nsource 'https://rubygems.org'\ngem 'sinatra', :github =\u003e 'sinatra/sinatra'\n\n# other dependencies\ngem 'haml'                    # for instance, if you use haml\n```\n\nNote that you will have to list all your application's dependencies in\nthe `Gemfile`. Sinatra's direct dependencies (Rack and Tilt) will,\nhowever, be automatically fetched and added by Bundler.\n\nNow you can run your app like this:\n\n```shell\nbundle exec ruby myapp.rb\n```\n\n## Versioning\n\nSinatra follows [Semantic Versioning](https://semver.org/), both SemVer and\nSemVerTag.\n\n## Further Reading\n\n* [Project Website](http://www.sinatrarb.com/) - Additional documentation,\n  news, and links to other resources.\n* [Contributing](http://www.sinatrarb.com/contributing) - Find a bug? Need\n  help? Have a patch?\n* [Issue tracker](https://github.com/sinatra/sinatra/issues)\n* [Twitter](https://twitter.com/sinatra)\n* [Mailing List](https://groups.google.com/forum/#!forum/sinatrarb)\n* IRC: [#sinatra](irc://chat.freenode.net/#sinatra) on [Freenode](https://freenode.net)\n* [Sinatra \u0026 Friends](https://sinatrarb.slack.com) on Slack\n  ([get an invite](https://sinatra-slack.herokuapp.com/))\n* [Sinatra Book](https://github.com/sinatra/sinatra-book) - Cookbook Tutorial\n* [Sinatra Recipes](http://recipes.sinatrarb.com/) - Community contributed\n  recipes\n* API documentation for the [latest release](http://www.rubydoc.info/gems/sinatra)\n  or the [current HEAD](http://www.rubydoc.info/github/sinatra/sinatra) on\n  [RubyDoc](http://www.rubydoc.info/)\n* [CI server](https://travis-ci.org/sinatra/sinatra)\n"
  },
  {
    "repo": "elastic/logstash",
    "content": "# Logstash\n\nLogstash is part of the [Elastic Stack](https://www.elastic.co/products) along with Beats, Elasticsearch and Kibana. Logstash is a server-side data processing pipeline that ingests data from a multitude of sources simultaneously, transforms it, and then sends it to your favorite \"stash.\" (Ours is Elasticsearch, naturally.). Logstash has over 200 plugins, and you can write your own very easily as well.\n\nFor more info, see \u003chttps://www.elastic.co/products/logstash\u003e\n\n## Documentation and Getting Started\n\nYou can find the documentation and getting started guides for Logstash\non the [elastic.co site](https://www.elastic.co/guide/en/logstash/current/getting-started-with-logstash.html)\n\nFor information about building the documentation, see the README in https://github.com/elastic/docs\n\n## Downloads\n\nYou can download officially released Logstash binaries, as well as debian/rpm packages for the\nsupported platforms, from [downloads page](https://www.elastic.co/downloads/logstash).\n\n### Snapshot Builds\n\nFor the daring, snapshot builds are available.\nThese builds are created nightly and have undergone no formal QA, so they should **never** be run in production.\n\n| Complete, with X-Pack | Apache 2.0 licensed    |\n| --------------------- | ---------------------- |\n| [tar-complete][]      | [tar-oss][]            |\n| [zip-complete][]      | [zip-oss][]            |\n| [deb-complete][]      | [deb-oss][]            |\n| [rpm-complete][]      | [rpm-oss][]            |\n\n[tar-complete]: https://snapshots.elastic.co/downloads/logstash/logstash-7.0.0-alpha1-SNAPSHOT.tar.gz\n[zip-complete]: https://snapshots.elastic.co/downloads/logstash/logstash-7.0.0-alpha1-SNAPSHOT.zip\n[deb-complete]: https://snapshots.elastic.co/downloads/logstash/logstash-7.0.0-alpha1-SNAPSHOT.deb\n[rpm-complete]: https://snapshots.elastic.co/downloads/logstash/logstash-7.0.0-alpha1-SNAPSHOT.rpm\n[tar-oss]: https://snapshots.elastic.co/downloads/logstash/logstash-oss-7.0.0-alpha1-SNAPSHOT.tar.gz\n[zip-oss]: https://snapshots.elastic.co/downloads/logstash/logstash-oss-7.0.0-alpha1-SNAPSHOT.zip\n[deb-oss]: https://snapshots.elastic.co/downloads/logstash/logstash-oss-7.0.0-alpha1-SNAPSHOT.deb\n[rpm-oss]: https://snapshots.elastic.co/downloads/logstash/logstash-oss-7.0.0-alpha1-SNAPSHOT.rpm\n\n## Need Help?\n\n- [Logstash Forum](https://discuss.elastic.co/c/logstash)\n- [Logstash Documentation](https://www.elastic.co/guide/en/logstash/current/index.html)\n- [#logstash on freenode IRC](https://webchat.freenode.net/?channels=logstash)\n- [Logstash Product Information](https://www.elastic.co/products/logstash)\n- [Elastic Support](https://www.elastic.co/subscriptions)\n\n## Logstash Plugins\n\nLogstash plugins are hosted in separate repositories under the [logstash-plugins](https://github.com/logstash-plugins) github organization. Each plugin is a self-contained Ruby gem which gets published to RubyGems.org.\n\n### Writing your own Plugin\n\nLogstash is known for its extensibility. There are hundreds of plugins for Logstash and you can write your own very easily! For more info on developing and testing these plugins, please see the [working with plugins section](https://www.elastic.co/guide/en/logstash/current/contributing-to-logstash.html)\n\n### Plugin Issues and Pull Requests\n\n**Please open new issues and pull requests for plugins under its own repository**\n\nFor example, if you have to report an issue/enhancement for the Elasticsearch output, please do so [here](https://github.com/logstash-plugins/logstash-output-elasticsearch/issues).\n\nLogstash core will continue to exist under this repository and all related issues and pull requests can be submitted here.\n\n## Developing Logstash Core\n\n### Prerequisites\n\n* Install JDK version 8. Make sure to set the `JAVA_HOME` environment variable to the path to your JDK installation directory. For example `set JAVA_HOME=\u003cJDK_PATH\u003e`\n* Install JRuby 9.1.x It is recommended to use a Ruby version manager such as [RVM](https://rvm.io/) or [rbenv](https://github.com/sstephenson/rbenv).\n* Install `rake` and `bundler` tool using `gem install rake` and `gem install bundler` respectively.\n\n### RVM install (optional)\n\nIf you prefer to use rvm (ruby version manager) to manage Ruby versions on your machine, follow these directions. In the Logstash folder:\n\n```sh\ngpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3\n\\curl -sSL https://get.rvm.io | bash -s stable --ruby=$(cat .ruby-version)\n```\n\n### Check Ruby version\n\nBefore you proceed, please check your ruby version by:\n\n```sh\n$ ruby -v\n```\n\nThe printed version should be the same as in the `.ruby-version` file.\n\n### Building Logstash\n\nThe Logstash project includes the source code for all of Logstash, including the Elastic-Licensed X-Pack features and functions; to run Logstash from source using only the OSS-licensed code, export the `OSS` environment variable with a value of `true`:\n\n``` sh\nexport OSS=true\n```\n\n* To run Logstash from the repo you must first bootstrap the environment:\n\n```sh\nrake bootstrap\n```\n\n* You can then use `bin/logstash` to start Logstash, but there are no plugins installed. To install default plugins, you can run:\n\n```sh\nrake plugin:install-default\n```\n\nThis will install the 80+ default plugins which makes Logstash ready to connect to multiple data sources, perform transformations and send the results to Elasticsearch and other destinations.\n\nTo verify your environment, run the following to send your first event:\n\n```sh\nbin/logstash -e 'input { stdin { } } output { stdout {} }'\n```\n\nThis should start Logstash with stdin input waiting for you to enter an event\n\n```sh\nhello world\n2016-11-11T01:22:14.405+0000 0.0.0.0 hello world\n```\n\n**Advanced: Drip Launcher**\n\n[Drip](https://github.com/ninjudd/drip) is a tool that solves the slow JVM startup problem while developing Logstash. The drip script is intended to be a drop-in replacement for the java command. We recommend using drip during development, in particular for running tests. Using drip, the first invocation of a command will not be faster but the subsequent commands will be swift.\n\nTo tell logstash to use drip, set the environment variable `` JAVACMD=`which drip` ``.\n\nExample (but see the *Testing* section below before running rspec for the first time):\n\n    JAVACMD=`which drip` bin/rspec\n\n**Caveats**\n\nDrip does not work with STDIN. You cannot use drip for running configs which use the stdin plugin.\n\n## Building Logstash Documentation\n\nTo build the Logstash Reference (open source content only) on your local\nmachine, clone the following repos:\n\n[logstash](https://github.com/elastic/logstash) - contains main docs about core features\n\n[logstash-docs](https://github.com/elastic/logstash-docs) - contains generated plugin docs\n\n[docs](https://github.com/elastic/docs) - contains doc build files\n\nMake sure you have the same branch checked out in `logstash` and `logstash-docs`.\nCheck out `master` in the `docs` repo.\n\nRun the doc build script from within the `docs` repo. For example:\n\n```\n./build_docs.pl --doc ../logstash/docs/index.asciidoc --chunk=1 -open\n```\n\n## Testing\n\nMost of the unit tests in Logstash are written using [rspec](http://rspec.info/) for the Ruby parts. For the Java parts, we use junit. For testing you can use the *test* `rake` tasks and the `bin/rspec` command, see instructions below:\n\n### Core tests\n\n1- To run the core tests you can use the Gradle task:\n\n    ./gradlew test\n\n  or use the `rspec` tool to run all tests or run a specific test:\n\n    bin/rspec\n    bin/rspec spec/foo/bar_spec.rb\n\n  Note that before running the `rspec` command for the first time you need to set up the RSpec test dependencies by running:\n\n    ./gradlew bootstrap\n\n2- To run the subset of tests covering the Java codebase only run:\n\n    ./gradlew javaTests\n\n3- To execute the complete test-suite including the integration tests run:\n\n    ./gradlew check\n\nSometimes you might find a change to a piece of Logstash code causes a test to hang. These can be hard to debug.\n\nIf you set `LS_JAVA_OPTS=\"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005\"` you can connect to a running Logstash with your IDEs debugger which can be a great way of finding the issue.\n\n### Plugins tests\n\nTo run the tests of all currently installed plugins:\n\n    rake test:plugin\n\nYou can install the default set of plugins included in the logstash package:\n\n    rake test:install-default\n\n---\nNote that if a plugin is installed using the plugin manager `bin/logstash-plugin install ...` do not forget to also install the plugins development dependencies using the following command after the plugin installation:\n\n    bin/logstash-plugin install --development\n\n## Building Artifacts\n\nBuilt artifacts will be placed in the `LS_HOME/build` directory, and will create the directory if it is not already present.\n\nYou can build a Logstash snapshot package as tarball or zip file\n\n```sh\n./gradlew assembleTarDistribution\n./gradlew assembleZipDistribution\n```\n\nOSS-only artifacts can similarly be built with their own gradle tasks:\n```sh\n./gradlew assembleOssTarDistribution\n./gradlew assembleOssZipDistribution\n\n```\n\nYou can also build .rpm and .deb, but the [fpm](https://github.com/jordansissel/fpm) tool is required.\n\n```sh\nrake artifact:rpm\nrake artifact:deb\n```\n\nand:\n\n```sh\nrake artifact:rpm_oss\nrake artifact:deb_oss\n```\n\n## Using a Custom JRuby Distribution\n\nIf you want the build to use a custom JRuby you can do so by setting a path to a custom \nJRuby distribution's source root via the `custom.jruby.path` Gradle property.\n\nE.g.\n\n```sh\n./gradlew clean test -Pcustom.jruby.path=\"/path/to/jruby\"\n```\n\n## Project Principles\n\n* Community: If a newbie has a bad time, it's a bug.\n* Software: Make it work, then make it right, then make it fast.\n* Technology: If it doesn't do a thing today, we can make it do it tomorrow.\n\n## Contributing\n\nAll contributions are welcome: ideas, patches, documentation, bug reports,\ncomplaints, and even something you drew up on a napkin.\n\nProgramming is not a required skill. Whatever you've seen about open source and\nmaintainers or community members  saying \"send patches or die\" - you will not\nsee that here.\n\nIt is more important to me that you are able to contribute.\n\nFor more information about contributing, see the\n[CONTRIBUTING](./CONTRIBUTING.md) file.\n"
  },
  {
    "repo": "gollum/gollum",
    "content": "gollum -- A git-based Wiki\n====================================\n\n[![Gem Version](https://badge.fury.io/rb/gollum.svg)](http://badge.fury.io/rb/gollum)\n[![Build Status](https://travis-ci.org/gollum/gollum.svg?branch=master)](https://travis-ci.org/gollum/gollum)\n[![Open Source Helpers](https://www.codetriage.com/gollum/gollum/badges/users.svg)](https://www.codetriage.com/gollum/gollum)\n\n## DESCRIPTION\n\nGollum is a simple wiki system built on top of Git. A Gollum Wiki is simply a git repository of a specific nature:\n* A Gollum repository's contents are human-editable. Pages are unique text files which may be organized into directories any way you choose, as long as they have a recognized file extension. Other content can also be included, for example images, PDFs and headers/footers.\n* Gollum pages:\n\t* May be written in a variety of [markup languages](#markups).\n\t* Can be edited with your favourite system editor or IDE or with the built-in web interface.\n\t* Can be displayed in all versions, and can easily be rolled back.\n* Gollum supports advanced functionality like UML diagrams, macros, metadata, and [more](https://github.com/gollum/gollum/wiki).\n\nSome helpful documentation:\n1. [Known limitations](https://github.com/gollum/gollum/wiki/Known-limitations).\n2. [Troubleshoot guide](https://github.com/gollum/gollum/wiki/Troubleshoot-guide).\n3. [Security overview](https://github.com/gollum/gollum/wiki/Security).\n\n### Videos\n\n* [Quick impression of gollum](https://www.youtube.com/watch?v=gj1qqK3Oku8)\n* [Gollum overview and simple markdown tutorial (german with english subtitles)](https://www.youtube.com/watch?v=wfWgDRmcbU4)\n* [Advanced features in action](https://www.youtube.com/watch?v=EauxgxsLDC4)\n\n## SYSTEM REQUIREMENTS\n\n| Operating System | Ruby           | Adapters           | Supported |\n| ---------------- | -------------- | ------------------ | --------- |\n| Unix/Linux-like  | Ruby (MRI) 2.1.0+   | all except [RJGit](https://github.com/repotag/rjgit) | yes |\n| Unix/Linux-like  | [JRuby](https://github.com/jruby/jruby) (1.9.3+ compatible) | [RJGit](https://github.com/repotag/rjgit) | yes |\n| Windows          | Ruby (MRI) 2.1.0+  | all except [RJGit](https://github.com/repotag/rjgit) | no  |\n| Windows          | [JRuby](https://github.com/jruby/jruby) (1.9.3+ compatible) | [RJGit](https://github.com/repotag/rjgit) | almost\u003csup\u003e1\u003c/sup\u003e |\n\n**Notes:**\n\n1. There are still some bugs and this setup is not ready for production yet. You can track the progress at [Support Windows via JRuby - Meta Issue](https://github.com/gollum/gollum/issues/1044).\n\n## INSTALLATION\n\nVaries depending on operating system, package manager and Ruby installation. Generally, you should first install Ruby and then Gollum.\n\n1. Ruby is best installed either via [RVM](https://rvm.io/) or a package manager of choice.\n2. Gollum is best installed via RubyGems:  \n\t```\n\t[sudo] gem install gollum\n\t```\n\nInstallation examples for individual systems can be seen [here](https://github.com/gollum/gollum/wiki/Installation).\n\n**Notes:**  \n* Whichever Ruby implementation you're using, Gollum ships with the appropriate default git adapter. So the above installation procedure is common for both MRI and JRuby.\n\n### Markups\n\nGollum presently ships with support for the following markups:\n* [Markdown](http://daringfireball.net/projects/markdown/syntax)\n* [RDoc](http://rdoc.sourceforge.net/)\n\nSince all markups are rendered by the [github-markup](https://github.com/github/markup) gem, you can easily add support for other markups by additional installation:\n* [AsciiDoc](http://asciidoctor.org/docs/asciidoc-syntax-quick-reference/) -- `[sudo] gem install asciidoctor`\n* [Creole](http://www.wikicreole.org/wiki/CheatSheet) -- `[sudo] gem install creole`\n* [MediaWiki](http://www.mediawiki.org/wiki/Help:Formatting) -- `[sudo] gem install wikicloth`\n* [Org](http://orgmode.org/worg/dev/org-syntax.html) -- `[sudo] gem install org-ruby`\n* [Pod](http://perldoc.perl.org/perlpod.html) -- requires Perl \u003e= 5.10 (the `perl` command must be available on your command line)\n\t* Lower versions should install `Pod::Simple` from CPAN.\n* [ReStructuredText](http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html) -- requires python \u003e= 2 (the `python2` command must be available on your command line)\n\t* Note that Gollum will also need you to install `docutils` for your Python 2. Installation procedure can, again, vary depending on operating system and package manager.\n* [Textile](http://redcloth.org/hobix.com/textile/quick.html) -- `[sudo] gem install RedCloth`\n\nBy default, Gollum ships with the `kramdown` gem to render Markdown. However, you can use any [Markdown renderer supported by github-markup](https://github.com/github/markup/blob/master/lib/github/markup/markdown.rb). The thing to remember is that the first installed renderer from the list will be used. So, for example, `redcarpet` will NOT be used if `github/markdown` is installed.\n\n## RUNNING\n\nSimply:\n\n1. Navigate to your git repository (wiki) via the command line.\n2. Run: `gollum`.\n3. Open `http://localhost:4567` in your browser.\n\nThis will start up a web server (WEBrick) running Gollum with a web interface, where you can view and edit your wiki.\n\n### Running from source\n\n1. `git clone https://github.com/gollum/gollum`\n2. `cd gollum`\n3. `[sudo] bundle install` (may not always be necessary).\n4. `bundle exec bin/gollum`\n\t* Like that, gollum assumes the target wiki (git repository) is the project repository itself. If it's not, execute `bundle exec bin/gollum \u003cpath-to-wiki\u003e` instead.\n5. Open `http://localhost:4567` in your browser.\n\n### Rack\n\nGollum can also be ran with any [rack-compatible web server](https://github.com/rack/rack#supported-web-servers). More on that [over here](https://github.com/gollum/gollum/wiki/Gollum-via-Rack).\n\n### Rack, with an authentication server\n\nGollum can also be ran alongside a CAS (Central Authentication Service) SSO (single sign-on) server. With a bit of tweaking, this adds basic user-support to Gollum. To see an example and an explanation, navigate [over here](https://github.com/gollum/gollum/wiki/Gollum-via-Rack-and-CAS-SSO).\n\n### Docker\n\nGollum can also be ran via [Docker](https://www.docker.com/). More on that [over here](https://github.com/gollum/gollum/wiki/Gollum-via-Docker).\n\n### Service\n\nGollum can also be ran as a service. More on that [over here](https://github.com/gollum/gollum/wiki/Gollum-as-a-service).\n\n## CONFIGURATION\n\nGollum comes with the following command line options:\n\n| Option            | Arguments | Description |\n| ----------------- | --------- | ----------- |\n| --host            | [HOST]    | Specify the hostname or IP address to listen on. Default: `0.0.0.0`.\u003csup\u003e1\u003c/sup\u003e |\n| --port            | [PORT]    | Specify the port to bind Gollum with. Default: `4567`. |\n| --config          | [FILE]  | Specify path to Gollum's configuration file. |\n| --ref             | [REF]     | Specify the git branch to serve. Default: `master`. |\n| --adapter         | [ADAPTER] | Launch Gollum using a specific git adapter. Default: `grit`.\u003csup\u003e2\u003c/sup\u003e |\n| --bare            | none      | Tell Gollum that the git repository should be treated as bare. This is only necessary when using the default grit adapter. |\n| --base-path       | [PATH]    | Specify the leading portion of all Gollum URLs (path info). Setting this to `/wiki` will make the wiki accessible under `http://localhost:4567/wiki/`. Default: `/`. |\n| --page-file-dir   | [PATH]    | Specify the subdirectory for all pages. If set, Gollum will only serve pages from this directory and its subdirectories. Default: repository root. |\n| --css             | none      | Tell Gollum to inject custom CSS into each page. Uses `custom.css` from repository root.\u003csup\u003e3,5\u003c/sup\u003e |\n| --js              | none      | Tell Gollum to inject custom JS into each page. Uses `custom.js` from repository root.\u003csup\u003e3,5\u003c/sup\u003e |\n| --emoji           | none      | Parse and interpret emoji tags (e.g. :heart:). |\n| --no-edit         | none      | Disable the feature of editing pages. |\n| --live-preview    | none      | Enable the live preview feature in page editor. |\n| --no-live-preview | none      | Disable the live preview feature in page editor. |\n| --allow-uploads   | [MODE]    | Enable file uploads. If set to `dir`, Gollum will store all uploads in the `/uploads/` directory in repository root. If set to `page`, Gollum will store each upload at the currently edited page.\u003csup\u003e4\u003c/sup\u003e |\n| --mathjax         | none      | Enables MathJax (renders mathematical equations). By default, uses the `TeX-AMS-MML_HTMLorMML` config with the `autoload-all` extension.\u003csup\u003e5\u003c/sup\u003e |\n| --irb             | none      | Launch Gollum in \"console mode\", with a [predefined API](https://github.com/gollum/gollum-lib/). |\n| --h1-title        | none      | Tell Gollum to use the first `\u003ch1\u003e` as page title. |\n| --show-all        | none      | Tell Gollum to also show files in the file view. By default, only valid pages are shown. |\n| --collapse-tree   | none      | Tell Gollum to collapse the file tree, when the file view is opened. By default, the tree is expanded. |\n| --user-icons      | [MODE]    | Tell Gollum to use specific user icons for history view. Can be set to `gravatar`, `identicon` or `none`. Default: `none`. |\n| --mathjax-config  | [FILE]    | Specify path to a custom MathJax configuration. If not specified, uses the `mathjax.config.js` file from repository root. |\n| --template-dir    | [PATH]    | Specify custom mustache template directory. |\n| --help            | none      | Display the list of options on the command line. |\n| --version         | none      | Display the current version of Gollum. |\n\n**Notes:**\n\n1. The `0.0.0.0` IP address allows remote access. Should you wish for Gollum to turn into a personal Wiki, use `127.0.0.1`.\n2. Before using `--adapter`, you should probably read [this](https://github.com/gollum/gollum/wiki/Git-adapters) first.\n3. When `--css` or `--js` is used, respective files must be committed to your git repository or you will get a 302 redirect to the create a page.\n4. Files can be uploaded simply by dragging and dropping them onto the editor's text area (this is, however exclusive to the default editor, not the live preview editor).\n5. Read the relevant [Security note](https://github.com/gollum/gollum/wiki/Security#custom-cssjs--mathjax-config) before using these.\n\n### Config file\n\nWhen `--config` option is used, certain inner parts of Gollum can be customized. This is used throughout our wiki for certain user-level alterations, among which [customizing supported markups](https://github.com/gollum/gollum/wiki/Formats-and-extensions) will probably stand out.\n\n**All of the mentioned alterations work both for Gollum's config file (`config.rb`) and Rack's config file (`config.ru`).**\n\n## CONTRIBUTING\n\nPlease consider helping out! See [here](CONTRIBUTING.md) for pointers on how to get started with development.\n"
  },
  {
    "repo": "rubocop-hq/rubocop",
    "content": "[![Gem Version](https://badge.fury.io/rb/rubocop.svg)](https://badge.fury.io/rb/rubocop)\n[![CircleCI Status](https://circleci.com/gh/rubocop-hq/rubocop/tree/master.svg?style=svg)](https://circleci.com/gh/rubocop-hq/rubocop/tree/master)\n[![AppVeyor Status](https://ci.appveyor.com/api/projects/status/sj3ye7n5690d0nvg?svg=true)](https://ci.appveyor.com/project/bbatsov/rubocop)\n[![Coverage Status](https://img.shields.io/codeclimate/coverage/github/bbatsov/rubocop.svg)](https://codeclimate.com/github/bbatsov/rubocop)\n[![Code Climate](https://codeclimate.com/github/bbatsov/rubocop/badges/gpa.svg)](https://codeclimate.com/github/bbatsov/rubocop)\n[![Inline docs](https://inch-ci.org/github/bbatsov/rubocop.svg)](https://inch-ci.org/github/bbatsov/rubocop)\n[![SemVer](https://api.dependabot.com/badges/compatibility_score?dependency-name=rubocop\u0026package-manager=bundler\u0026version-scheme=semver)](https://dependabot.com/compatibility-score.html?dependency-name=rubocop\u0026package-manager=bundler\u0026version-scheme=semver)\n\n[![Patreon](https://img.shields.io/badge/patreon-donate-orange.svg)](https://www.patreon.com/bbatsov)\n[![Liberapay](https://liberapay.com/assets/widgets/donate.svg)](https://liberapay.com/bbatsov/donate)\n[![OpenCollective](https://opencollective.com/rubocop/backers/badge.svg)](#open-collective-backers)\n[![OpenCollective](https://opencollective.com/rubocop/sponsors/badge.svg)](#open-collective-sponsors)\n\n\u003cp align=\"center\"\u003e\n  \u003cimg src=\"https://raw.githubusercontent.com/rubocop-hq/rubocop/master/logo/rubo-logo-horizontal.png\" alt=\"RuboCop Logo\"/\u003e\n\u003c/p\u003e\n\n\u003e Role models are important. \u003cbr/\u003e\n\u003e -- Officer Alex J. Murphy / RoboCop\n\n**RuboCop** is a Ruby static code analyzer and code formatter. Out of\nthe box it will enforce many of the guidelines outlined in the\ncommunity [Ruby Style\nGuide](https://github.com/rubocop-hq/ruby-style-guide).\n\nRuboCop is extremely flexible and most aspects of its behavior can be tweaked via various\n[configuration options](https://github.com/rubocop-hq/rubocop/blob/master/config/default.yml).\n\nApart from reporting problems in your code, RuboCop can also\nautomatically fix some of the problems for you.\n\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/bbatsov/rubocop?utm_source=badge\u0026utm_medium=badge\u0026utm_campaign=pr-badge\u0026utm_content=badge)\n\n**Please consider [supporting financially its ongoing development](#funding).**\n\n## Installation\n\n**RuboCop**'s installation is pretty standard:\n\n```sh\n$ gem install rubocop\n```\n\nIf you'd rather install RuboCop using `bundler`, don't require it in your `Gemfile`:\n\n```rb\ngem 'rubocop', require: false\n```\n\nRuboCop's development is moving at a very rapid pace and there are\noften backward-incompatible changes between minor releases (since we\nhaven't reached version 1.0 yet). To prevent an unwanted RuboCop update you\nmight want to use a conservative version locking in your `Gemfile`:\n\n```rb\ngem 'rubocop', '~\u003e 0.61.1', require: false\n```\n\n## Quickstart\n\nJust type `rubocop` in a Ruby project's folder and watch the magic happen.\n\n```\n$ cd my/cool/ruby/project\n$ rubocop\n```\n\n## Official manual\n\nYou can read a ton more about RuboCop in its [official manual](https://docs.rubocop.org).\n\n## Compatibility\n\nRuboCop supports the following Ruby implementations:\n\n* MRI 2.2+\n* JRuby 9.0+\n\nThe Rails cops support the following versions:\n\n* Rails 4.0+\n\n## Team\n\nHere's a list of RuboCop's core developers:\n\n* [Bozhidar Batsov](https://github.com/bbatsov) (author \u0026 head maintainer)\n* [Jonas Arvidsson](https://github.com/jonas054)\n* [Yuji Nakayama](https://github.com/yujinakayama) (retired)\n* [Evgeni Dzhelyov](https://github.com/edzhelyov) (retired)\n* [Ted Johansson](https://github.com/drenmi)\n* [Masataka Kuwabara](https://github.com/pocke)\n* [Koichi Ito](https://github.com/koic)\n* [Maxim Krizhanovski](https://github.com/darhazer)\n\n## Logo\n\nRuboCop's logo was created by [Dimiter Petrov](https://www.chadomoto.com/). You can find the logo in various\nformats [here](https://github.com/rubocop-hq/rubocop/tree/master/logo).\n\nThe logo is licensed under a\n[Creative Commons Attribution-NonCommercial 4.0 International License](https://creativecommons.org/licenses/by-nc/4.0/deed.en_GB).\n\n## Contributors\n\nHere's a [list](https://github.com/rubocop-hq/rubocop/graphs/contributors) of\nall the people who have contributed to the development of RuboCop.\n\nI'm extremely grateful to each and every one of them!\n\nIf you'd like to contribute to RuboCop, please take the time to go\nthrough our short\n[contribution guidelines](CONTRIBUTING.md).\n\nConverting more of the Ruby Style Guide into RuboCop cops is our top\npriority right now. Writing a new cop is a great way to dive into RuboCop!\n\nOf course, bug reports and suggestions for improvements are always\nwelcome. GitHub pull requests are even better! :-)\n\n## Funding\n\nWhile RuboCop is free software and will always be, the project would benefit immensely from some funding.\nRaising a monthly budget of a couple of thousand dollars would make it possible to pay people to work on\ncertain complex features, fund other development related stuff (e.g. hardware, conference trips) and so on.\nRaising a monthly budget of over $5000 would open the possibility of someone working full-time on the project\nwhich would speed up the pace of development significantly.\n\nWe welcome both individual and corporate sponsors! We also offer a\nwide array of funding channels to account for your preferences\n(although\ncurrently [Open Collective](https://opencollective.com/rubocop) is our\npreferred funding platform).\n\nIf you're working in a company that's making significant use of RuboCop we'd appreciate it if you suggest to your company\nto become a RuboCop sponsor.\n\nYou can support the development of RuboCop via\n[Salt](https://salt.bountysource.com/teams/rubocop),\n[Patreon](https://www.patreon.com/bbatsov),\n[Liberapay](https://liberapay.com/bbatsov/donate),\nand [Open Collective](https://opencollective.com/rubocop).\n\n### Open Collective Backers\n\nSupport us with a monthly donation and help us continue our activities. [[Become a backer](https://opencollective.com/rubocop#backer)]\n\n\u003ca href=\"https://opencollective.com/rubocop/backer/0/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/backer/0/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/backer/1/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/backer/1/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/backer/2/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/backer/2/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/backer/3/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/backer/3/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/backer/4/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/backer/4/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/backer/5/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/backer/5/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/backer/6/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/backer/6/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/backer/7/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/backer/7/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/backer/8/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/backer/8/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/backer/9/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/backer/9/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/backer/10/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/backer/10/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/backer/11/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/backer/11/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/backer/12/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/backer/12/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/backer/13/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/backer/13/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/backer/14/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/backer/14/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/backer/15/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/backer/15/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/backer/16/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/backer/16/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/backer/17/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/backer/17/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/backer/18/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/backer/18/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/backer/19/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/backer/19/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/backer/20/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/backer/20/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/backer/21/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/backer/21/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/backer/22/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/backer/22/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/backer/23/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/backer/23/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/backer/24/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/backer/24/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/backer/25/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/backer/25/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/backer/26/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/backer/26/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/backer/27/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/backer/27/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/backer/28/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/backer/28/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/backer/29/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/backer/29/avatar.svg\"\u003e\u003c/a\u003e\n\n### Open Collective Sponsors\n\nBecome a sponsor and get your logo on our README on GitHub with a link to your site. [[Become a sponsor](https://opencollective.com/rubocop#sponsor)]\n\n\u003ca href=\"https://opencollective.com/rubocop/sponsor/0/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/sponsor/0/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/sponsor/1/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/sponsor/1/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/sponsor/2/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/sponsor/2/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/sponsor/3/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/sponsor/3/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/sponsor/4/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/sponsor/4/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/sponsor/5/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/sponsor/5/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/sponsor/6/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/sponsor/6/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/sponsor/7/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/sponsor/7/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/sponsor/8/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/sponsor/8/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/sponsor/9/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/sponsor/9/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/sponsor/10/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/sponsor/10/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/sponsor/11/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/sponsor/11/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/sponsor/12/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/sponsor/12/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/sponsor/13/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/sponsor/13/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/sponsor/14/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/sponsor/14/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/sponsor/15/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/sponsor/15/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/sponsor/16/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/sponsor/16/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/sponsor/17/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/sponsor/17/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/sponsor/18/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/sponsor/18/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/sponsor/19/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/sponsor/19/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/sponsor/20/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/sponsor/20/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/sponsor/21/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/sponsor/21/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/sponsor/22/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/sponsor/22/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/sponsor/23/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/sponsor/23/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/sponsor/24/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/sponsor/24/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/sponsor/25/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/sponsor/25/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/sponsor/26/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/sponsor/26/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/sponsor/27/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/sponsor/27/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/sponsor/28/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/sponsor/28/avatar.svg\"\u003e\u003c/a\u003e\n\u003ca href=\"https://opencollective.com/rubocop/sponsor/29/website\" target=\"_blank\"\u003e\u003cimg src=\"https://opencollective.com/rubocop/sponsor/29/avatar.svg\"\u003e\u003c/a\u003e\n\n## Changelog\n\nRuboCop's changelog is available [here](CHANGELOG.md).\n\n## Copyright\n\nCopyright (c) 2012-2018 Bozhidar Batsov. See [LICENSE.txt](LICENSE.txt) for\nfurther details.\n"
  },
  {
    "repo": "spree/spree",
    "content": "\n\u003cimg src=\"spree_logo.png\" width=\"261\"\u003e\n\n* Join our Slack at [slack.spreecommerce.org](http://slack.spreecommerce.org/)\n* [Success Stories](https://spreecommerce.org/stories/)\n* [Extensions](https://github.com/spree-contrib)\n* [Documentation](http://guides.spreecommerce.org)\n* [Roadmap](https://github.com/spree/spree/milestones?direction=asc\u0026sort=due_date\u0026state=open)\n\n[![Gem Version](https://badge.fury.io/rb/spree.svg)](https://badge.fury.io/rb/spree) [![Circle CI](https://circleci.com/gh/spree/spree.svg?style=shield)](https://circleci.com/gh/spree/spree/tree/master)\n[![Code Climate](https://codeclimate.com/github/spree/spree.svg)](https://codeclimate.com/github/spree/spree)\n[![Test Coverage](https://api.codeclimate.com/v1/badges/8277fc2bb0b1f777084f/test_coverage)](https://codeclimate.com/github/spree/spree/test_coverage)\n[![Slack Status](http://slack.spreecommerce.org/badge.svg)](http://slack.spreecommerce.org)\n\n**Spree** is a complete open source e-commerce solution built with Ruby on Rails. It\nwas originally developed by Sean Schofield and is now maintained by [Spark Solutions](http://sparksolutions.co). We're open to [contributions](#contributing) and accepting new [Core Team](https://github.com/spree/spree/wiki/Core-Team) members.\n\nSpree consists of several different gems, each of which are maintained\nin a single repository and documented in a single set of\n[online documentation](http://guides.spreecommerce.org/).\n\n* spree_api (RESTful API)\n* spree_frontend (Customer frontend)\n* spree_backend (Admin panel)\n* spree_cmd (Command-line tools)\n* spree_core (Models \u0026 Mailers, the basic components of Spree that it can't run without)\n* spree_sample (Sample data)\n\nDemo\n----\nTry Spree with direct deployment on Heroku:\n\n[![Deploy](https://www.herokucdn.com/deploy/button.svg)](https://heroku.com/deploy?template=https://github.com/spree/spree/tree/3-6-stable)\n\nIf you want to run demo spree application on your machine, you can use our docker image with command below. It will\ndownload and run sample Spree application on http://localhost:3000 (Login: spree@example.com / spree123)\n```shell\ndocker run --rm -it -p 3000:3000 spreecommerce/spree:3.6.4\n```\n\n\nGetting Started\n----------------------\n\nAdd Spree gems to your Gemfile:\n\n### Rails 5.2\n\n```ruby\ngem 'spree', '~\u003e 3.6.4'\ngem 'spree_auth_devise', '~\u003e 3.3'\ngem 'spree_gateway', '~\u003e 3.3'\n```\n\n### Rails 5.1\n\n```ruby\ngem 'spree', '~\u003e 3.5.0'\ngem 'spree_auth_devise', '~\u003e 3.3'\ngem 'spree_gateway', '~\u003e 3.3'\n```\n\n### Rails 5.0\n\n```ruby\ngem 'spree', '~\u003e 3.2.7'\ngem 'spree_auth_devise', '~\u003e 3.3'\ngem 'spree_gateway', '~\u003e 3.3'\n```\n\n### Rails 4.2\n\n```ruby\ngem 'spree', '~\u003e 3.1.12'\ngem 'spree_auth_devise', '~\u003e 3.3'\ngem 'spree_gateway', '~\u003e 3.3'\n```\n\n**Note: If you're using fresh Rails 5.1 application, you need to run `bundle update i18n` before following steps\nbelow.**\n\n\nRun `bundle install`\n\nUse the install generators to set up Spree:\n\n```shell\nrails g spree:install --user_class=Spree::User\nrails g spree:auth:install\nrails g spree_gateway:install\n```\n\nInstallation options\n----------------------\n\nAlternatively, if you want to use the bleeding edge version of Spree, add this to your Gemfile:\n\n```ruby\ngem 'spree', github: 'spree/spree'\ngem 'spree_auth_devise', github: 'spree/spree_auth_devise'\ngem 'spree_gateway', github: 'spree/spree_gateway'\n```\n\n**Note: The master branch is not guaranteed to ever be in a fully functioning\nstate. It is unwise to use this branch in a production system you care deeply\nabout.**\n\nBy default, the installation generator (`rails g spree:install`) will run\nmigrations as well as adding seed and sample data and will copy frontend views\nfor easy customization (if spree_frontend available). This can be disabled using\n\n```shell\nrails g spree:install --migrate=false --sample=false --seed=false --copy_views=false\n```\n\nYou can always perform any of these steps later by using these commands.\n\n```shell\nbundle exec rake railties:install:migrations\nbundle exec rake db:migrate\nbundle exec rake db:seed\nbundle exec rake spree_sample:load\n```\n\nBundle Issues\n----------------------\n\nIf you encountered any problems with `bundler`, please try downgrading to bundler `1.13.7` or earlier.\n\n\nBrowse Store\n----------------------\n\nhttp://localhost:3000\n\nBrowse Admin Interface\n----------------------\n\nhttp://localhost:3000/admin\n\nIf you have `spree_auth_devise` installed, you can generate a new admin user by running `rake spree_auth:admin:create`.\n\nExtensions\n----------------------\n\nSpree Extensions provide additional features not present in the Core system.\n\n\n| Extension | Spree 3.2+ support | Description |\n| --- | --- | --- |\n| [spree_gateway](https://github.com/spree/spree_gateway) | [![Build Status](https://travis-ci.org/spree/spree_gateway.svg?branch=master)](https://travis-ci.org/spree/spree_gateway) | Community supported Spree Payment Method Gateways\n| [spree_auth_devise](https://github.com/spree/spree_auth_devise) | [![Build Status](https://travis-ci.org/spree/spree_auth_devise.svg?branch=master)](https://travis-ci.org/spree/spree_auth_devise) | Provides authentication services for Spree, using the Devise gem.\n| [spree_i18n](https://github.com/spree-contrib/spree_i18n) | [![Build Status](https://travis-ci.org/spree-contrib/spree_i18n.svg?branch=master)](https://travis-ci.org/spree-contrib/spree_i18n) | I18n translation files for Spree Commerce\n| [spree-multi-domain](https://github.com/spree-contrib/spree-multi-domain) | [![Build Status](https://travis-ci.org/spree-contrib/spree-multi-domain.svg?branch=master)](https://travis-ci.org/spree-contrib/spree-multi-domain) | Multiple Spree stores on different domains - single unified backed for processing orders\n| [spree_multi_currency](https://github.com/spree-contrib/spree_multi_currency) | [![Build Status](https://travis-ci.org/spree-contrib/spree_multi_currency.svg?branch=master)](https://travis-ci.org/spree-contrib/spree_multi_currency) | Provides UI to allow configuring multiple currencies in Spree |\n| [spree-mollie-gateway](https://github.com/mollie/spree-mollie-gateway) | [![Build Status](https://travis-ci.org/mollie/spree-mollie-gateway.svg?branch=master)](https://github.com/mollie/spree-mollie-gateway) | Official [Mollie](https://www.mollie.com) payment gateway for Spree Commerce. |\n| [spree_braintree_vzero](https://github.com/spree-contrib/spree_braintree_vzero) | [![Build Status](https://travis-ci.org/spree-contrib/spree_braintree_vzero.svg?branch=master)](https://travis-ci.org/spree-contrib/spree_braintree_vzero) | Official Spree Braintree v.zero + PayPal extension |\n| [spree_address_book](https://github.com/spree-contrib/spree_address_book) | [![Build Status](https://travis-ci.org/spree-contrib/spree_address_book.svg?branch=master)](https://travis-ci.org/spree-contrib/spree_address_book) | Adds address book for users to Spree |\n| [spree_digital](https://github.com/spree-contrib/spree_digital) | [![Build Status](https://travis-ci.org/spree-contrib/spree_digital.svg?branch=master)](https://travis-ci.org/spree-contrib/spree_digital) | A Spree extension to enable downloadable products |\n| [spree_social](https://github.com/spree-contrib/spree_social) |[![Build Status](https://travis-ci.org/spree-contrib/spree_social.svg?branch=master)](https://travis-ci.org/spree-contrib/spree_social)  | Building block for spree social networking features (provides authentication and account linkage) |\n| [spree_related_products](https://github.com/spree-contrib/spree_related_products) | [![Build Status](https://travis-ci.org/spree-contrib/spree_related_products.svg?branch=master)](https://travis-ci.org/spree-contrib/spree_related_products) | Related products extension for Spree\n| [spree_active_shipping](https://github.com/spree-contrib/spree_active_shipping) | [![Build Status](https://travis-ci.org/spree-contrib/spree_active_shipping.svg?branch=master)](https://travis-ci.org/spree-contrib/spree_active_shipping) | Spree integration for Shopify's active_shipping gem\n| [spree_static_content](https://github.com/spree-contrib/spree_static_content) | [![Build Status](https://travis-ci.org/spree-contrib/spree_static_content.svg?branch=master)](https://travis-ci.org/spree-contrib/spree_static_content) | Manage static pages for Spree |\n| [spree-product-assembly](https://github.com/spree-contrib/spree-product-assembly) | [![Build Status](https://travis-ci.org/spree-contrib/spree-product-assembly.svg?branch=master)](https://travis-ci.org/spree-contrib/spree-product-assembly) | Adds oportunity to make bundle of products |\n| [spree_editor](https://github.com/spree-contrib/spree_editor) | [![Build Status](https://travis-ci.org/spree-contrib/spree_editor.svg?branch=master)](https://travis-ci.org/spree-contrib/spree_editor) | Rich text editor for Spree with Image and File uploading in-place |\n| [spree_recently_viewed](https://github.com/spree-contrib/spree_recently_viewed) | [![Build Status](https://travis-ci.org/spree-contrib/spree_recently_viewed.svg?branch=master)](https://travis-ci.org/spree-contrib/spree_recently_viewed) | Recently viewed products in Spree |\n| [spree_wishlist](https://github.com/spree-contrib/spree_wishlist) | [![Build Status](https://travis-ci.org/spree-contrib/spree_wishlist.svg?branch=master)](https://travis-ci.org/spree-contrib/spree_wishlist) | Wishlist extension for Spree |\n| [spree_sitemap](https://github.com/spree-contrib/spree_sitemap) | [![Build Status](https://travis-ci.org/spree-contrib/spree_sitemap.svg?branch=master)](https://travis-ci.org/spree-contrib/spree_sitemap) | Sitemap Generator for Spree  |\n| [spree_volume_pricing](https://github.com/spree-contrib/spree_volume_pricing) | [![Build Status](https://travis-ci.org/spree-contrib/spree_volume_pricing.svg?branch=master)](https://travis-ci.org/spree-contrib/spree_volume_pricing) | It determines the price for a particular product variant with predefined ranges of quantities\n| [better_spree_paypal_express](https://github.com/spree-contrib/better_spree_paypal_express) | [![Build Status](https://travis-ci.org/spree-contrib/better_spree_paypal_express.svg?branch=master)](https://travis-ci.org/spree-contrib/better_spree_paypal_express) | This is the official Paypal Express extension for Spree.\n| [spree_globalize](https://github.com/spree-contrib/spree_globalize) | [![Build Status](https://travis-ci.org/spree-contrib/spree_globalize.svg?branch=master)](https://travis-ci.org/spree-contrib/spree_globalize) | Adds support for model translations (multi-language stores)\n| [spree_avatax_certified](https://github.com/spree-contrib/spree_avatax_certified) | [![Build Status](https://travis-ci.org/spree-contrib/spree_avatax_certified.svg?branch=master)](https://travis-ci.org/spree-contrib/spree_avatax_certified) | Improve your Spree store's sales tax decision automation with Avalara AvaTax\n| [spree_analytics_trackers](https://github.com/spree-contrib/spree_analytics_trackers) | [![Build Status](https://travis-ci.org/spree-contrib/spree_analytics_trackers.svg?branch=master)](https://travis-ci.org/spree-contrib/spree_analytics_trackers) | Adds support for Analytics Trackers (Google Analytics \u0026 Segment)\n\nPerformance\n----------------------\n\nYou may notice that your Spree store runs slowly in development environment. This can be because in development each asset (css and javascript) is loaded separately. You can disable it by adding the following line to `config/environments/development.rb`.\n\n```ruby\nconfig.assets.debug = false\n```\n\n\nDeveloping Spree\n----------------------\n\nSpree is meant to be run within the context of Rails application and the source code is essentially a collection of gems. You can easily create a sandbox\napplication inside of your cloned source directory for testing purposes.\n\n\nClone the Git repo\n\n```shell\ngit clone git://github.com/spree/spree.git\ncd spree\n```\n\nInstall the gem dependencies\n\n```shell\nbundle install\n```\n\n### Sandbox\n\nCreate a sandbox Rails application for testing purposes which automatically perform all necessary database setup\n\n```shell\nbundle exec rake sandbox\n```\n\nStart the server\n\n```shell\ncd sandbox\nrails server\n```\n\n### Running Tests\n\nWe use [CircleCI](https://circleci.com/) to run the tests for Spree.\n\nYou can see the build statuses at [https://circleci.com/gh/spree/spree](https://circleci.com/gh/spree/spree).\n\n---\n\nEach gem contains its own series of tests, and for each directory, you need to\ndo a quick one-time creation of a test application and then you can use it to run\nthe tests.  For example, to run the tests for the core project.\n```shell\ncd core\nBUNDLE_GEMFILE=../Gemfile bundle exec rake test_app\nbundle exec rspec spec\n```\n\nIf you would like to run specs against a particular database you may specify the\ndummy app's database, which defaults to sqlite3.\n```shell\nDB=postgres bundle exec rake test_app\n```\n\nIf you want to run specs for only a single spec file\n```shell\nbundle exec rspec spec/models/spree/state_spec.rb\n```\n\nIf you want to run a particular line of spec\n```shell\nbundle exec rspec spec/models/spree/state_spec.rb:7\n```\n\nYou can also enable fail fast in order to stop tests at the first failure\n```shell\nFAIL_FAST=true bundle exec rspec spec/models/state_spec.rb\n```\n\nIf you want to run the simplecov code coverage report\n```shell\nCOVERAGE=true bundle exec rspec spec\n```\n\nIf you're working on multiple facets of Spree to test,\nplease ensure that you have a postgres user:\n\n```shell\ncreateuser -s -r postgres\n```\n\nAnd also ensure that you have [ChromeDriver](http://chromedriver.chromium.org) installed as well.\nPlease follow this\n[instruction](https://github.com/SeleniumHQ/selenium/wiki/ChromeDriver) to install it.\n\nTo execute all the tests, you may want to run this command at the\nroot of the Spree project to generate test applications and run\nspecs for all the facets:\n```shell\nbash build.sh\n```\n\n\nContributing\n----------------------\n\nSpree is an open source project and we encourage contributions. Please review the\n[contributing guidelines](https://github.com/spree/spree/blob/master/.github/CONTRIBUTING.md)\nbefore contributing.\n\nIn the spirit of [free software](http://www.fsf.org/licensing/essays/free-sw.html), **everyone** is encouraged to help improve this project.\n\nHere are some ways **you** can contribute:\n\n* by using prerelease versions / master branch\n* by reporting [bugs](https://github.com/spree/spree/issues/new)\n* by [translating to a new language](https://github.com/spree/spree_i18n/tree/master/config/locales)\n* by writing or editing [documentation](https://github.com/spree/spree/blob/master/.github/CONTRIBUTING.md)\n* by writing [specs](https://github.com/spree/spree/labels/need_specs)\n* by writing [needed code](https://github.com/spree/spree/labels/feature_request) or [finishing code](https://github.com/spree/spree/labels/address_feedback)\n* by [refactoring code](https://github.com/spree/spree/labels/address_feedback)\n* by reviewing [pull requests](https://github.com/spree/spree/pulls)\n* by verifying [issues](https://github.com/spree/spree/labels/unverified)\n\nLicense\n----------------------\n\nSpree is released under the [New BSD License](https://github.com/spree/spree/blob/master/license.md).\n\n\nAbout Spark Solutions\n----------------------\n[![Spark Solutions](http://sparksolutions.co/wp-content/uploads/2015/01/logo-ss-tr-221x100.png)][spark]\n\nSpree is maintained by [Spark Solutions Sp. z o.o.][spark].\n\nWe are passionate about open source software.\nWe are [available for hire][spark].\n\n[spark]:http://sparksolutions.co?utm_source=github\n"
  },
  {
    "repo": "imathis/octopress",
    "content": "## Octopress 3.0\n\nNote: Octopress 3.0 is in development at https://github.com/octopress/octopress\n\n## What is Octopress?\n\nOctopress is [Jekyll](https://github.com/mojombo/jekyll) blogging at its finest.\n\n1. **Octopress sports a clean responsive theme** written in semantic HTML5, focused on readability and friendliness toward mobile devices.\n2. **Code blogging is easy and beautiful.** Embed code (with [Solarized](http://ethanschoonover.com/solarized) styling) in your posts from gists, jsFiddle or from your filesystem.\n3. **Third party integration is simple** with built-in support for Pinboard, Delicious, GitHub Repositories, Disqus Comments and Google Analytics.\n4. **It's easy to use.** A collection of rake tasks simplifies development and makes deploying a cinch.\n5. **Ships with great plug-ins** some original and others from the Jekyll community \u0026mdash; tested and improved.\n\n**Note**: Octopress requires a minimum Ruby version of `1.9.3-p0`.\n\n## Documentation\n\nCheck out [Octopress.org](http://octopress.org/docs) for guides and documentation.\nIt should all apply to our current stable version (found in the `master`\nbranch). If this is not the case, [please submit a\nfix to our docs repo](https://github.com/octopress/docs).\n\n## Contributing\n\n[![Build Status](https://travis-ci.org/imathis/octopress.svg?branch=master)](https://travis-ci.org/imathis/octopress)\n\nWe love to see people contributing to Octopress, whether it's a bug report, feature suggestion or a pull request. At the moment, we try to keep the core slick and lean, focusing on basic blogging needs, so some of your suggestions might not find their way into Octopress. For those ideas, we started a [list of 3rd party plug-ins](https://github.com/imathis/octopress/wiki/3rd-party-plugins), where you can link your own Octopress plug-in repositories. For the future, we're thinking about ways to easier add them into our main releases.\n\n\n## License\n(The MIT License)\n\nCopyright © 2009-2013 Brandon Mathis\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ‘Software’), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED ‘AS IS’, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n#### If you want to be awesome.\n- Proudly display the 'Powered by Octopress' credit in the footer.\n- [Add your site to the Wiki](https://github.com/imathis/octopress/wiki/Octopress-Sites/_edit) so we can watch the community grow.\n"
  },
  {
    "repo": "mperham/sidekiq",
    "content": "Sidekiq\n==============\n\n[![Gem Version](https://badge.fury.io/rb/sidekiq.svg)](https://rubygems.org/gems/sidekiq)\n[![Code Climate](https://codeclimate.com/github/mperham/sidekiq.svg)](https://codeclimate.com/github/mperham/sidekiq)\n[![Build Status](https://travis-ci.org/mperham/sidekiq.svg)](https://travis-ci.org/mperham/sidekiq)\n[![Gitter Chat](https://badges.gitter.im/mperham/sidekiq.svg)](https://gitter.im/mperham/sidekiq)\n\n\nSimple, efficient background processing for Ruby.\n\nSidekiq uses threads to handle many jobs at the same time in the\nsame process.  It does not require Rails but will integrate tightly with\nRails to make background processing dead simple.\n\nSidekiq is compatible with Resque.  It uses the exact same\nmessage format as Resque so it can integrate into an existing Resque processing farm.\nYou can have Sidekiq and Resque run side-by-side at the same time and\nuse the Resque client to enqueue jobs in Redis to be processed by Sidekiq.\n\nPerformance\n---------------\n\nVersion |\tLatency | Garbage created for 10,000 jobs\t| Time to process 100,000 jobs |\tThroughput\n-----------------|------|---------|---------|------------------------\nSidekiq 4.0.0    | 10ms\t| 151 MB  | 22 sec  | **4500 jobs/sec**\nSidekiq 3.5.1    | 22ms\t| 1257 MB | 125 sec | 800 jobs/sec\nResque 1.25.2    |  -\t  | -       | 420 sec | 240 jobs/sec\nDelayedJob 4.1.1 |  -   | -       | 465 sec | 215 jobs/sec\n\n\u003csmall\u003eThis benchmark can be found in `bin/sidekiqload`.\u003c/small\u003e\n\nRequirements\n-----------------\n\nSidekiq supports CRuby 2.2.2+ and JRuby 9k.\n\nAll Rails releases \u003e= 4.0 are officially supported.\n\nRedis 2.8 or greater is required.  3.0.3+ is recommended for large\ninstallations with thousands of worker threads.\n\n\nInstallation\n-----------------\n\n    gem install sidekiq\n\n\nGetting Started\n-----------------\n\nSee the [Getting Started wiki page](https://github.com/mperham/sidekiq/wiki/Getting-Started) and follow the simple setup process.\nYou can watch [this Youtube playlist](https://www.youtube.com/playlist?list=PLjeHh2LSCFrWGT5uVjUuFKAcrcj5kSai1) to learn all about\nSidekiq and see its features in action.  Here's the Web UI:\n\n![Web UI](https://github.com/mperham/sidekiq/raw/master/examples/web-ui.png)\n\n\nWant to Upgrade?\n-------------------\n\nI also sell Sidekiq Pro and Sidekiq Enterprise, extensions to Sidekiq which provide more\nfeatures, a commercial-friendly license and allow you to support high\nquality open source development all at the same time.  Please see the\n[Sidekiq](http://sidekiq.org/) homepage for more detail.\n\nSubscribe to the **[quarterly newsletter](https://tinyletter.com/sidekiq)** to stay informed about the latest\nfeatures and changes to Sidekiq and its bigger siblings.\n\n\nProblems?\n-----------------\n\n**Please do not directly email any Sidekiq committers with questions or problems.**  A community is best served when discussions are held in public.\n\nIf you have a problem, please review the [FAQ](https://github.com/mperham/sidekiq/wiki/FAQ) and [Troubleshooting](https://github.com/mperham/sidekiq/wiki/Problems-and-Troubleshooting) wiki pages.\nSearching the [issues](https://github.com/mperham/sidekiq/issues) for your problem is also a good idea.\n\nSidekiq Pro and Sidekiq Enterprise customers get private email support.  You can purchase at http://sidekiq.org; email support@contribsys.com for help.\n\nUseful resources:\n\n* Product documentation is in the [wiki](https://github.com/mperham/sidekiq/wiki).\n* Release announcements are made to the [@sidekiq](https://twitter.com/sidekiq) Twitter account.\n* The [Sidekiq tag](https://stackoverflow.com/questions/tagged/sidekiq) on Stack Overflow has lots of useful Q \u0026amp; A.\n\n**No support via Twitter**\n\nEvery Friday morning is Sidekiq happy hour: I video chat and answer questions.\nSee the [Sidekiq support page](http://sidekiq.org/support.html) for details.\n\nThanks\n-----------------\n\nSidekiq stays fast by using the [JProfiler java profiler](http://www.ej-technologies.com/products/jprofiler/overview.html) to find and fix\nperformance problems on JRuby.  Unfortunately MRI does not have good multithreaded profiling tools.\n\n\nLicense\n-----------------\n\nPlease see [LICENSE](https://github.com/mperham/sidekiq/blob/master/LICENSE) for licensing details.\n\n\nAuthor\n-----------------\n\nMike Perham, [@mperham](https://twitter.com/mperham) / [@sidekiq](https://twitter.com/sidekiq), [http://www.mikeperham.com](http://www.mikeperham.com) / [http://www.contribsys.com](http://www.contribsys.com)\n"
  },
  {
    "repo": "thoughtbot/paperclip",
    "content": "Paperclip\n=========\n\n# Deprecated\n\n**[Paperclip is deprecated]**.\n\nFor new projects, we recommend Rails' own [ActiveStorage].\n\nFor existing projects, please consult and contribute to [the migration guide] ([en español]).\n\n\nWe will leave the Issues open as a discussion forum _only_. We do _not_\nguarantee a response from us in the Issues.\n\nWe are no longer accepting pull requests _except_ pull requests against the\nmigration guide. All other pull requests will be closed without merging.\n\n[Paperclip is deprecated]: https://robots.thoughtbot.com/closing-the-trombone\n[ActiveStorage]: http://guides.rubyonrails.org/active_storage_overview.html\n[the migration guide]: https://github.com/thoughtbot/paperclip/blob/master/MIGRATING.md\n[en español]: https://github.com/thoughtbot/paperclip/blob/master/MIGRATING-ES.md\n\n# Existing documentation\n\n## Documentation valid for `master` branch\n\nPlease check the documentation for the paperclip version you are using:\nhttps://github.com/thoughtbot/paperclip/releases\n\n---\n\n[![Build Status](https://secure.travis-ci.org/thoughtbot/paperclip.svg?branch=master)](http://travis-ci.org/thoughtbot/paperclip)\n[![Dependency Status](https://gemnasium.com/thoughtbot/paperclip.svg?travis)](https://gemnasium.com/thoughtbot/paperclip)\n[![Code Climate](https://codeclimate.com/github/thoughtbot/paperclip.svg)](https://codeclimate.com/github/thoughtbot/paperclip)\n[![Inline docs](http://inch-ci.org/github/thoughtbot/paperclip.svg)](http://inch-ci.org/github/thoughtbot/paperclip)\n[![Security](https://hakiri.io/github/thoughtbot/paperclip/master.svg)](https://hakiri.io/github/thoughtbot/paperclip/master)\n\n\u003c!-- START doctoc generated TOC please keep comment here to allow auto update --\u003e\n\u003c!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --\u003e\n\n- [Requirements](#requirements)\n  - [Ruby and Rails](#ruby-and-rails)\n  - [Image Processor](#image-processor)\n  - [`file`](#file)\n- [Installation](#installation)\n- [Quick Start](#quick-start)\n  - [Models](#models)\n  - [Migrations](#migrations)\n  - [Edit and New Views](#edit-and-new-views)\n  - [Edit and New Views with Simple Form](#edit-and-new-views-with-simple-form)\n  - [Controller](#controller)\n  - [View Helpers](#view-helpers)\n  - [Checking a File Exists](#checking-a-file-exists)\n  - [Deleting an Attachment](#deleting-an-attachment)\n- [Usage](#usage)\n- [Validations](#validations)\n- [Internationalization (I18n)](#internationalization-i18n)\n- [Security Validations](#security-validations)\n- [Defaults](#defaults)\n- [Migrations](#migrations-1)\n  - [Add Attachment Column To A Table](#add-attachment-column-to-a-table)\n  - [Schema Definition](#schema-definition)\n  - [Vintage Syntax](#vintage-syntax)\n- [Storage](#storage)\n  - [Understanding Storage](#understanding-storage)\n- [IO Adapters](#io-adapters)\n- [Post Processing](#post-processing)\n- [Custom Attachment Processors](#custom-attachment-processors)\n- [Events](#events)\n- [URI Obfuscation](#uri-obfuscation)\n- [Checksum / Fingerprint](#checksum--fingerprint)\n- [File Preservation for Soft-Delete](#file-preservation-for-soft-delete)\n- [Dynamic Configuration](#dynamic-configuration)\n  - [Dynamic Styles:](#dynamic-styles)\n  - [Dynamic Processors:](#dynamic-processors)\n- [Logging](#logging)\n- [Deployment](#deployment)\n  - [Attachment Styles](#attachment-styles)\n- [Testing](#testing)\n- [Contributing](#contributing)\n- [License](#license)\n- [About thoughtbot](#about-thoughtbot)\n\n\u003c!-- END doctoc generated TOC please keep comment here to allow auto update --\u003e\n\nPaperclip is intended as an easy file attachment library for ActiveRecord. The\nintent behind it was to keep setup as easy as possible and to treat files as\nmuch like other attributes as possible. This means they aren't saved to their\nfinal locations on disk, nor are they deleted if set to nil, until\nActiveRecord::Base#save is called. It manages validations based on size and\npresence, if required. It can transform its assigned image into thumbnails if\nneeded, and the prerequisites are as simple as installing ImageMagick (which,\nfor most modern Unix-based systems, is as easy as installing the right\npackages). Attached files are saved to the filesystem and referenced in the\nbrowser by an easily understandable specification, which has sensible and\nuseful defaults.\n\nSee the documentation for `has_attached_file` in [`Paperclip::ClassMethods`](http://www.rubydoc.info/gems/paperclip/Paperclip/ClassMethods) for\nmore detailed options.\n\nThe complete [RDoc](http://www.rubydoc.info/gems/paperclip) is online.\n\n---\n\nRequirements\n------------\n\n### Ruby and Rails\n\nPaperclip now requires Ruby version **\u003e= 2.1** and Rails version **\u003e= 4.2**\n(only if you're going to use Paperclip with Ruby on Rails).\n\n### Image Processor\n\n[ImageMagick](http://www.imagemagick.org) must be installed and Paperclip must have access to it. To ensure\nthat it does, on your command line, run `which convert` (one of the ImageMagick\nutilities). This will give you the path where that utility is installed. For\nexample, it might return `/usr/local/bin/convert`.\n\nThen, in your environment config file, let Paperclip know to look there by adding that\ndirectory to its path.\n\nIn development mode, you might add this line to `config/environments/development.rb)`:\n\n```ruby\nPaperclip.options[:command_path] = \"/usr/local/bin/\"\n```\n\nIf you're on Mac OS X, you'll want to run the following with [Homebrew](http://www.brew.sh):\n\n    brew install imagemagick\n\nIf you are dealing with pdf uploads or running the test suite, you'll also need\nto install GhostScript. On Mac OS X, you can also install that using Homebrew:\n\n    brew install gs\n\nIf you are on Ubuntu (or any Debian base Linux distribution), you'll want to run\nthe following with apt-get:\n\n    sudo apt-get install imagemagick -y\n\n### `file`\n\nThe Unix [`file` command](https://en.wikipedia.org/wiki/File_(command)) is required for content-type checking.\nThis utility isn't available in Windows, but comes bundled with Ruby [Devkit](https://github.com/oneclick/rubyinstaller/wiki/Development-Kit),\nso Windows users must make sure that the devkit is installed and added to the system `PATH`.\n\n**Manual Installation**\n\nIf you're using Windows 7+ as a development environment, you may need to install the `file.exe` application manually. The `file spoofing` system in Paperclip 4+ relies on this; if you don't have it working, you'll receive `Validation failed: Upload file has an extension that does not match its contents.` errors.\n\nTo manually install, you should perform the following:\n\n\u003e **Download \u0026 install `file` from [this URL](http://gnuwin32.sourceforge.net/packages/file.htm)**\n\nTo test, you can use the image below:\n![untitled](https://cloud.githubusercontent.com/assets/1104431/4524452/a1f8cce4-4d44-11e4-872e-17adb96f79c9.png)\n\nNext, you need to integrate with your environment - preferably through the `PATH` variable, or by changing your `config/environments/development.rb` file\n\n**PATH**\n\n    1. Click \"Start\"\n    2. On \"Computer\", right-click and select \"Properties\"\n    3. In Properties, select \"Advanced System Settings\"\n    4. Click the \"Environment Variables\" button\n    5. Locate the \"PATH\" var - at the end, add the path to your newly installed `file.exe` (typically `C:\\Program Files (x86)\\GnuWin32\\bin`)\n    6. Restart any CMD shells you have open \u0026 see if it works\n\nOR\n\n**Environment**\n\n    1. Open `config/environments/development.rb`\n    2. Add the following line: `Paperclip.options[:command_path] = 'C:\\Program Files (x86)\\GnuWin32\\bin'`\n    3. Restart your Rails server\n\nEither of these methods will give your Rails setup access to the `file.exe` functionality, thus providing the ability to check the contents of a file (fixing the spoofing problem)\n\n---\n\nInstallation\n------------\n\nPaperclip is distributed as a gem, which is how it should be used in your app.\n\nInclude the gem in your Gemfile:\n\n```ruby\ngem \"paperclip\", \"~\u003e 6.0.0\"\n```\n\nOr, if you want to get the latest, you can get master from the main paperclip repository:\n\n```ruby\ngem \"paperclip\", git: \"git://github.com/thoughtbot/paperclip.git\"\n```\n\nIf you're trying to use features that don't seem to be in the latest released gem, but are\nmentioned in this README, then you probably need to specify the master branch if you want to\nuse them. This README is probably ahead of the latest released version if you're reading it\non GitHub.\n\nFor Non-Rails usage:\n\n```ruby\nclass ModuleName \u003c ActiveRecord::Base\n  include Paperclip::Glue\n  ...\nend\n```\n\n---\n\nQuick Start\n-----------\n\n### Models\n\n```ruby\nclass User \u003c ActiveRecord::Base\n  has_attached_file :avatar, styles: { medium: \"300x300\u003e\", thumb: \"100x100\u003e\" }, default_url: \"/images/:style/missing.png\"\n  validates_attachment_content_type :avatar, content_type: /\\Aimage\\/.*\\z/\nend\n```\n\n### Migrations\n\n\nAssuming you have a `users` table, add an `avatar` column to the `users` table:\n```ruby\nclass AddAvatarColumnsToUsers \u003c ActiveRecord::Migration\n  def up\n    add_attachment :users, :avatar\n  end\n\n  def down\n    remove_attachment :users, :avatar\n  end\nend\n```\n\n(Or you can use the Rails migration generator: `rails generate paperclip user avatar`)\n\n### Edit and New Views\nMake sure you have corresponding methods in your controller:\n```erb\n\u003c%= form_for @user, url: users_path, html: { multipart: true } do |form| %\u003e\n  \u003c%= form.file_field :avatar %\u003e\n  \u003c%= form.submit %\u003e\n\u003c% end %\u003e\n```\n\n### Edit and New Views with [Simple Form](https://github.com/plataformatec/simple_form)\n\n```erb\n\u003c%= simple_form_for @user, url: users_path do |form| %\u003e\n  \u003c%= form.input :avatar, as: :file %\u003e\n  \u003c%= form.submit %\u003e\n\u003c% end %\u003e\n```\n\n### Controller\n\n```ruby\ndef create\n  @user = User.create(user_params)\nend\n\nprivate\n\n# Use strong_parameters for attribute whitelisting\n# Be sure to update your create() and update() controller methods.\n\ndef user_params\n  params.require(:user).permit(:avatar)\nend\n```\n\n### View Helpers\nAdd these to the view where you want your images displayed:\n```erb\n\u003c%= image_tag @user.avatar.url %\u003e\n\u003c%= image_tag @user.avatar.url(:medium) %\u003e\n\u003c%= image_tag @user.avatar.url(:thumb) %\u003e\n```\n\n### Checking a File Exists\n\nThere are two methods for checking if a file exists:\n\n- `file?` and `present?` checks if the `_file_name` field is populated\n- `exists?` checks if the file exists (will perform a TCP connection if stored in the cloud)\n\nKeep this in mind if you are checking if files are present in a loop. The first\nversion is significantly more performant, but has different semantics.\n\n### Deleting an Attachment\n\nSet the attribute to `nil` and save.\n\n```ruby\n@user.avatar = nil\n@user.save\n```\n---\n\nUsage\n-----\n\nThe basics of Paperclip are quite simple: Declare that your model has an\nattachment with the `has_attached_file` method, and give it a name.\n\nPaperclip will wrap up to four attributes (all prefixed with that attachment's name,\nso you can have multiple attachments per model if you wish) and give them a\nfriendly front end. These attributes are:\n\n* `\u003cattachment\u003e_file_name`\n* `\u003cattachment\u003e_file_size`\n* `\u003cattachment\u003e_content_type`\n* `\u003cattachment\u003e_updated_at`\n\nBy default, only `\u003cattachment\u003e_file_name` is required for Paperclip to operate.\nYou'll need to add `\u003cattachment\u003e_content_type` in case you want to use content type\nvalidation.\n\nMore information about the options passed to `has_attached_file` is available in the\ndocumentation of [`Paperclip::ClassMethods`](http://www.rubydoc.info/gems/paperclip/Paperclip/ClassMethods).\n\nValidations\n-----------\n\nFor validations, Paperclip introduces several validators to validate your attachment:\n\n* `AttachmentContentTypeValidator`\n* `AttachmentPresenceValidator`\n* `AttachmentSizeValidator`\n\nExample Usage:\n\n```ruby\nvalidates :avatar, attachment_presence: true\nvalidates_with AttachmentPresenceValidator, attributes: :avatar\nvalidates_with AttachmentSizeValidator, attributes: :avatar, less_than: 1.megabytes\n\n```\n\nValidators can also be defined using the old helper style:\n\n* `validates_attachment_presence`\n* `validates_attachment_content_type`\n* `validates_attachment_size`\n\nExample Usage:\n\n```ruby\nvalidates_attachment_presence :avatar\n```\n\nLastly, you can also define multiple validations on a single attachment using `validates_attachment`:\n\n```ruby\nvalidates_attachment :avatar, presence: true,\n  content_type: \"image/jpeg\",\n  size: { in: 0..10.kilobytes }\n```\n\n_NOTE: Post-processing will not even **start** if the attachment is not valid\naccording to the validations. Your callbacks and processors will **only** be\ncalled with valid attachments._\n\n```ruby\nclass Message \u003c ActiveRecord::Base\n  has_attached_file :asset, styles: { thumb: \"100x100#\" }\n\n  before_post_process :skip_for_audio\n\n  def skip_for_audio\n    ! %w(audio/ogg application/ogg).include?(asset_content_type)\n  end\nend\n```\n\nIf you have other validations that depend on assignment order, the recommended\ncourse of action is to prevent the assignment of the attachment until\nafterwards, then assign manually:\n\n```ruby\nclass Book \u003c ActiveRecord::Base\n  has_attached_file :document, styles: { thumbnail: \"60x60#\" }\n  validates_attachment :document, content_type: \"application/pdf\"\n  validates_something_else # Other validations that conflict with Paperclip's\nend\n\nclass BooksController \u003c ApplicationController\n  def create\n    @book = Book.new(book_params)\n    @book.document = params[:book][:document]\n    @book.save\n    respond_with @book\n  end\n\n  private\n\n  def book_params\n    params.require(:book).permit(:title, :author)\n  end\nend\n```\n\n**A note on content_type validations and security**\n\nYou should ensure that you validate files to be only those MIME types you\nexplicitly want to support.  If you don't, you could be open to\n\u003ca href=\"https://www.owasp.org/index.php/Testing_for_Stored_Cross_site_scripting_(OWASP-DV-002)\"\u003eXSS attacks\u003c/a\u003e\nif a user uploads a file with a malicious HTML payload.\n\nIf you're only interested in images, restrict your allowed content_types to\nimage-y ones:\n\n```ruby\nvalidates_attachment :avatar,\n  content_type: [\"image/jpeg\", \"image/gif\", \"image/png\"]\n```\n\n`Paperclip::ContentTypeDetector` will attempt to match a file's extension to an\ninferred content_type, regardless of the actual contents of the file.\n\n---\n\nInternationalization (I18n)\n---------------------------\n\nFor using or adding locale files in different languages, check the project\nhttps://github.com/thoughtbot/paperclip-i18n.\n\nSecurity Validations\n====================\n\nThanks to a report from [Egor Homakov](http://homakov.blogspot.com/) we have\ntaken steps to prevent people from spoofing Content-Types and getting data\nyou weren't expecting onto your server.\n\nNOTE: Starting at version 4.0.0, all attachments are *required* to include a\ncontent_type validation, a file_name validation, or to explicitly state that\nthey're not going to have either. *Paperclip will raise an error* if you do not\ndo this.\n\n```ruby\nclass ActiveRecord::Base\n  has_attached_file :avatar\n  # Validate content type\n  validates_attachment_content_type :avatar, content_type: /\\Aimage/\n  # Validate filename\n  validates_attachment_file_name :avatar, matches: [/png\\z/, /jpe?g\\z/]\n  # Explicitly do not validate\n  do_not_validate_attachment_file_type :avatar\nend\n```\n\nThis keeps Paperclip secure-by-default, and will prevent people trying to mess\nwith your filesystem.\n\nNOTE: Also starting at version 4.0.0, Paperclip has another validation that\ncannot be turned off. This validation will prevent content type spoofing. That\nis, uploading a PHP document (for example) as part of the EXIF tags of a\nwell-formed JPEG. This check is limited to the media type (the first part of the\nMIME type, so, 'text' in `text/plain`). This will prevent HTML documents from\nbeing uploaded as JPEGs, but will not prevent GIFs from being uploaded with a\n`.jpg` extension. This validation will only add validation errors to the form. It\nwill not cause errors to be raised.\n\nThis can sometimes cause false validation errors in applications that use custom\nfile extensions. In these cases you may wish to add your custom extension to the\nlist of content type mappings by creating `config/initializers/paperclip.rb`:\n\n```ruby\n# Allow \".foo\" as an extension for files with the MIME type \"text/plain\".\nPaperclip.options[:content_type_mappings] = {\n  foo: %w(text/plain)\n}\n```\n\n---\n\nDefaults\n--------\nGlobal defaults for all your Paperclip attachments can be defined by changing the Paperclip::Attachment.default_options Hash. This can be useful for setting your default storage settings per example so you won't have to define them in every `has_attached_file` definition.\n\nIf you're using Rails, you can define a Hash with default options in `config/application.rb` or in any of the `config/environments/*.rb` files on config.paperclip_defaults. These will get merged into `Paperclip::Attachment.default_options` as your Rails app boots. An example:\n\n```ruby\nmodule YourApp\n  class Application \u003c Rails::Application\n    # Other code...\n\n    config.paperclip_defaults = { storage: :fog, fog_credentials: { provider: \"Local\", local_root: \"#{Rails.root}/public\"}, fog_directory: \"\", fog_host: \"localhost\"}\n  end\nend\n```\n\nAnother option is to directly modify the `Paperclip::Attachment.default_options` Hash - this method works for non-Rails applications or is an option if you prefer to place the Paperclip default settings in an initializer.\n\nAn example Rails initializer would look something like this:\n\n```ruby\nPaperclip::Attachment.default_options[:storage] = :fog\nPaperclip::Attachment.default_options[:fog_credentials] = { provider: \"Local\", local_root: \"#{Rails.root}/public\"}\nPaperclip::Attachment.default_options[:fog_directory] = \"\"\nPaperclip::Attachment.default_options[:fog_host] = \"http://localhost:3000\"\n```\n---\n\nMigrations\n----------\n\nPaperclip defines several migration methods which can be used to create the necessary columns in your\nmodel. There are two types of helper methods to aid in this, as follows:\n\n### Add Attachment Column To A Table\n\nThe `attachment` helper can be used when creating a table:\n\n```ruby\nclass CreateUsersWithAttachments \u003c ActiveRecord::Migration\n  def up\n    create_table :users do |t|\n      t.attachment :avatar\n    end\n  end\n\n  # This is assuming you are only using the users table for Paperclip attachment. Drop with care!\n  def down\n    drop_table :users\n  end\nend\n```\n\nYou can also use the `change` method, instead of the `up`/`down` combination above, as shown below:\n\n```ruby\nclass CreateUsersWithAttachments \u003c ActiveRecord::Migration\n  def change\n    create_table :users do |t|\n      t.attachment :avatar\n    end\n  end\nend\n```\n\n### Schema Definition\n\nAlternatively, the `add_attachment` and `remove_attachment` methods can be used to add new Paperclip columns to an existing table:\n\n```ruby\nclass AddAttachmentColumnsToUsers \u003c ActiveRecord::Migration\n  def up\n    add_attachment :users, :avatar\n  end\n\n  def down\n    remove_attachment :users, :avatar\n  end\nend\n```\n\nOr you can do this with the `change` method:\n\n```ruby\nclass AddAttachmentColumnsToUsers \u003c ActiveRecord::Migration\n  def change\n    add_attachment :users, :avatar\n  end\nend\n```\n\n### Vintage Syntax\n\nVintage syntax (such as `t.has_attached_file` and `drop_attached_file`) is still supported in\nPaperclip 3.x, but you're advised to update those migration files to use this new syntax.\n\n---\n\nStorage\n-------\n\nPaperclip ships with 3 storage adapters:\n\n* File Storage\n* S3 Storage (via `aws-sdk-s3`)\n* Fog Storage\n\nIf you would like to use Paperclip with another storage, you can install these\ngems along side with Paperclip:\n\n* [paperclip-azure](https://github.com/supportify/paperclip-azure)\n* [paperclip-azure-storage](https://github.com/gmontard/paperclip-azure-storage)\n* [paperclip-dropbox](https://github.com/janko-m/paperclip-dropbox)\n\n### Understanding Storage\n\nThe files that are assigned as attachments are, by default, placed in the\ndirectory specified by the `:path` option to `has_attached_file`. By default, this\nlocation is `:rails_root/public/system/:class/:attachment/:id_partition/:style/:filename`.\nThis location was chosen because, on standard Capistrano deployments, the\n`public/system` directory can be symlinked to the app's shared directory, meaning it\nsurvives between deployments. For example, using that `:path`, you may have a\nfile at\n\n    /data/myapp/releases/20081229172410/public/system/users/avatar/000/000/013/small/my_pic.png\n\n_**NOTE**: This is a change from previous versions of Paperclip, but is overall a\nsafer choice for the default file store._\n\nYou may also choose to store your files using Amazon's S3 service. To do so, include\nthe `aws-sdk-s3` gem in your Gemfile:\n\n```ruby\ngem 'aws-sdk-s3'\n```\n\nAnd then you can specify using S3 from `has_attached_file`.\nYou can find more information about configuring and using S3 storage in\n[the `Paperclip::Storage::S3` documentation](http://www.rubydoc.info/gems/paperclip/Paperclip/Storage/S3).\n\nFiles on the local filesystem (and in the Rails app's public directory) will be\navailable to the internet at large. If you require access control, it's\npossible to place your files in a different location. You will need to change\nboth the `:path` and `:url` options in order to make sure the files are unavailable\nto the public. Both `:path` and `:url` allow the same set of interpolated\nvariables.\n\n---\n\nIO Adapters\n-----------\n\nWhen a file is uploaded or attached, it can be in one of a few different input\nforms, from Rails' UploadedFile object to a StringIO to a Tempfile or even a\nsimple String that is a URL that points to an image.\n\nPaperclip will accept, by default, many of these sources. It also is capable of\nhandling even more with a little configuration. The IO Adapters that handle\nimages from non-local sources are not enabled by default. They can be enabled by\nadding a line similar to the following into `config/initializers/paperclip.rb`:\n\n```ruby\nPaperclip::DataUriAdapter.register\n```\n\nIt's best to only enable a remote-loading adapter if you need it. Otherwise\nthere's a chance that someone can gain insight into your internal network\nstructure using it as a vector.\n\nThe following adapters are *not* loaded by default:\n\n* `Paperclip::UriAdapter` - which accepts a `URI` instance.\n* `Paperclip::HttpUrlProxyAdapter` - which accepts a `http` string.\n* `Paperclip::DataUriAdapter` - which accepts a Base64-encoded `data:` string.\n\n---\n\nPost Processing\n---------------\n\nPaperclip supports an extensible selection of post-processors. When you define\na set of styles for an attachment, by default it is expected that those\n\"styles\" are actually \"thumbnails.\" These are processed by\n`Paperclip::Thumbnail`.  For backward compatibility reasons you can pass either\na single geometry string, or an array containing a geometry and a format that\nthe file will be converted to, like so:\n\n```ruby\nhas_attached_file :avatar, styles: { thumb: [\"32x32#\", :png] }\n```\n\nThis will convert the \"thumb\" style to a 32x32 square in PNG format, regardless\nof what was uploaded. If the format is not specified, it is kept the same (e.g.\nJPGs will remain JPGs). `Paperclip::Thumbnail` uses ImageMagick to process\nimages; [ImageMagick's geometry documentation](http://www.imagemagick.org/script/command-line-processing.php#geometry)\nhas more information on the accepted style formats.\n\nFor more fine-grained control of the conversion process, `source_file_options` and `convert_options` can be used to pass flags and settings directly to ImageMagick's powerful Convert tool, [documented here](https://www.imagemagick.org/script/convert.php). For example:\n\n```ruby\nhas_attached_file :image, styles: { regular: ['800x800\u003e', :png]}, \n    source_file_options: { regular: \"-density 96 -depth 8 -quality 85\" },\n    convert_options: { regular: \"-posterize 3\"}\n```\n\nImageMagick supports a number of environment variables for controlling its resource limits. For example, you can enforce memory or execution time limits by setting the following variables in your application's process environment:\n\n* `MAGICK_MEMORY_LIMIT=128MiB`\n* `MAGICK_MAP_LIMIT=64MiB`\n* `MAGICK_TIME_LIMIT=30`\n\nFor a full list of variables and description, see [ImageMagick's resources documentation](http://www.imagemagick.org/script/resources.php).\n\n---\n\nCustom Attachment Processors\n-------\n\nYou can write your own custom attachment processors to carry out tasks like\nadding watermarks, compressing images, or encrypting files. Custom processors\nmust be defined within the `Paperclip` module, inherit from\n`Paperclip::Processor` (see [`lib/paperclip/processor.rb`](https://github.com/thoughtbot/paperclip/blob/master/lib/paperclip/processor.rb)),\nand implement a `make` method that returns a `File`. All files in your Rails\napp's `lib/paperclip` and `lib/paperclip_processors` directories will be\nautomatically loaded by Paperclip. Processors are specified using the\n`:processors` option to `has_attached_file`:\n\n```ruby\nhas_attached_file :scan, styles: { text: { quality: :better } },\n                         processors: [:ocr]\n```\n\nThis would load the hypothetical class `Paperclip::Ocr`, and pass it the\noptions hash `{ quality: :better }`, along with the uploaded file.\n\nMultiple processors can be specified, and they will be invoked in the order\nthey are defined in the `:processors` array. Each successive processor is given\nthe result from the previous processor. All processors receive the same\nparameters, which are defined in the `:styles` hash.  For example, assuming we\nhad this definition:\n\n```ruby\nhas_attached_file :scan, styles: { text: { quality: :better } },\n                         processors: [:rotator, :ocr]\n```\n\nBoth the `:rotator` processor and the `:ocr` processor would receive the\noptions `{ quality: :better }`. If a processor receives an option it doesn't\nrecognise, it's expected to ignore it.\n\n_NOTE: Because processors operate by turning the original attachment into the\nstyles, no processors will be run if there are no styles defined._\n\nIf you're interested in caching your thumbnail's width, height and size in the\ndatabase, take a look at the [paperclip-meta](https://github.com/teeparham/paperclip-meta)\ngem.\n\nAlso, if you're interested in generating the thumbnail on-the-fly, you might want\nto look into the [attachment_on_the_fly](https://github.com/drpentode/Attachment-on-the-Fly)\ngem.\n\nPaperclip's thumbnail generator (see [`lib/paperclip/thumbnail.rb`](lib/paperclip/thumbnail.rb))\nis implemented as a processor, and may be a good reference for writing your own\nprocessors.\n\n---\n\nEvents\n------\n\nBefore and after the Post Processing step, Paperclip calls back to the model\nwith a few callbacks, allowing the model to change or cancel the processing\nstep. The callbacks are `before_post_process` and `after_post_process` (which\nare called before and after the processing of each attachment), and the\nattachment-specific `before_\u003cattachment\u003e_post_process` and\n`after_\u003cattachment\u003e_post_process`. The callbacks are intended to be as close to\nnormal ActiveRecord callbacks as possible, so if you return false (specifically\n\\- returning nil is not the same) in a `before_filter`, the post processing step\nwill halt. Returning false in an `after_filter` will not halt anything, but you\ncan access the model and the attachment if necessary.\n\n_NOTE: Post processing will not even **start** if the attachment is not valid\naccording to the validations. Your callbacks and processors will **only** be\ncalled with valid attachments._\n\n```ruby\nclass Message \u003c ActiveRecord::Base\n  has_attached_file :asset, styles: { thumb: \"100x100#\" }\n\n  before_post_process :skip_for_audio\n\n  def skip_for_audio\n    ! %w(audio/ogg application/ogg).include?(asset_content_type)\n  end\nend\n```\n\n---\n\nURI Obfuscation\n---------------\n\nPaperclip has an interpolation called `:hash` for obfuscating filenames of\npublicly-available files.\n\nExample Usage:\n\n```ruby\nhas_attached_file :avatar, {\n    url: \"/system/:hash.:extension\",\n    hash_secret: \"longSecretString\"\n}\n```\n\n\nThe `:hash` interpolation will be replaced with a unique hash made up of whatever\nis specified in `:hash_data`. The default value for `:hash_data` is `\":class/:attachment/:id/:style/:updated_at\"`.\n\n`:hash_secret` is required - an exception will be raised if `:hash` is used without `:hash_secret` present.\n\nFor more on this feature, read [the author's own explanation](https://github.com/thoughtbot/paperclip/pull/416)\n\nChecksum / Fingerprint\n-------\n\nA checksum of the original file assigned will be placed in the model if it\nhas an attribute named fingerprint.  Following the user model migration example\nabove, the migration would look like the following:\n\n```ruby\nclass AddAvatarFingerprintColumnToUser \u003c ActiveRecord::Migration\n  def up\n    add_column :users, :avatar_fingerprint, :string\n  end\n\n  def down\n    remove_column :users, :avatar_fingerprint\n  end\nend\n```\n\nThe algorithm can be specified using a configuration option; it defaults to MD5\nfor backwards compatibility with Paperclip 5 and earlier.\n\n```ruby\nhas_attached_file :some_attachment, adapter_options: { hash_digest: Digest::SHA256 }\n```\n\nRun `CLASS=User ATTACHMENT=avatar rake paperclip:refresh:fingerprints` after\nchanging the digest on existing attachments to update the fingerprints in the\ndatabase.\n\nFile Preservation for Soft-Delete\n-------\n\nAn option is available to preserve attachments in order to play nicely with soft-deleted models. (acts_as_paranoid, paranoia, etc.)\n\n```ruby\nhas_attached_file :some_attachment, {\n    preserve_files: true,\n}\n```\n\nThis will prevent ```some_attachment``` from being wiped out when the model gets destroyed, so it will still exist when the object is restored later.\n\n---\n\nDynamic Configuration\n---------------------\n\nCallable objects (lambdas, Procs) can be used in a number of places for dynamic\nconfiguration throughout Paperclip.  This strategy exists in a number of\ncomponents of the library but is most significant in the possibilities for\nallowing custom styles and processors to be applied for specific model\ninstances, rather than applying defined styles and processors across all\ninstances.\n\n### Dynamic Styles:\n\nImagine a user model that had different styles based on the role of the user.\nPerhaps some users are bosses (e.g. a User model instance responds to `#boss?`)\nand merit a bigger avatar thumbnail than regular users. The configuration to\ndetermine what style parameters are to be used based on the user role might\nlook as follows where a boss will receive a `300x300` thumbnail otherwise a\n`100x100` thumbnail will be created.\n\n```ruby\nclass User \u003c ActiveRecord::Base\n  has_attached_file :avatar, styles: lambda { |attachment| { thumb: (attachment.instance.boss? ? \"300x300\u003e\" : \"100x100\u003e\") } }\nend\n```\n\n### Dynamic Processors:\n\nAnother contrived example is a user model that is aware of which file processors\nshould be applied to it (beyond the implied `thumbnail` processor invoked when\n`:styles` are defined). Perhaps we have a watermark processor available and it is\nonly used on the avatars of certain models.  The configuration for this might be\nwhere the instance is queried for which processors should be applied to it.\nPresumably some users might return `[:thumbnail, :watermark]` for its\nprocessors, where a defined `watermark` processor is invoked after the\n`thumbnail` processor already defined by Paperclip.\n\n```ruby\nclass User \u003c ActiveRecord::Base\n  has_attached_file :avatar, processors: lambda { |instance| instance.processors }\n  attr_accessor :processors\nend\n```\n\n---\n\nLogging\n----------\n\nBy default, Paperclip outputs logging according to your logger level. If you want to disable logging (e.g. during testing) add this into your environment's configuration:\n```ruby\nYour::Application.configure do\n...\n  Paperclip.options[:log] = false\n...\nend\n```\n\nMore information in the [rdocs](http://www.rubydoc.info/github/thoughtbot/paperclip/Paperclip.options)\n\n---\n\nDeployment\n----------\n\nTo make Capistrano symlink the `public/system` directory so that attachments\nsurvive new deployments, set the `linked_dirs` option in your `config/deploy.rb`\nfile:\n\n```ruby\nset :linked_dirs, fetch(:linked_dirs, []).push('public/system')\n```\n\n### Attachment Styles\n\nPaperclip is aware of new attachment styles you have added in previous deploys. The only thing you should do after each deployment is to call\n`rake paperclip:refresh:missing_styles`.  It will store current attachment styles in `RAILS_ROOT/public/system/paperclip_attachments.yml`\nby default. You can change it by:\n\n```ruby\nPaperclip.registered_attachments_styles_path = '/tmp/config/paperclip_attachments.yml'\n```\n\nHere is an example for Capistrano:\n\n```ruby\nnamespace :paperclip do\n  desc \"build missing paperclip styles\"\n  task :build_missing_styles do\n    on roles(:app) do\n      within release_path do\n        with rails_env: fetch(:rails_env) do\n          execute :rake, \"paperclip:refresh:missing_styles\"\n        end\n      end\n    end\n  end\nend\n\nafter(\"deploy:compile_assets\", \"paperclip:build_missing_styles\")\n```\n\nNow you don't have to remember to refresh thumbnails in production every time you add a new style.\nUnfortunately, it does not work with dynamic styles - it just ignores them.\n\nIf you already have a working app and don't want `rake paperclip:refresh:missing_styles` to refresh old pictures, you need to tell\nPaperclip about existing styles. Simply create a `paperclip_attachments.yml` file by hand. For example:\n\n```ruby\nclass User \u003c ActiveRecord::Base\n  has_attached_file :avatar, styles: { thumb: 'x100', croppable: '600x600\u003e', big: '1000x1000\u003e' }\nend\n\nclass Book \u003c ActiveRecord::Base\n  has_attached_file :cover, styles: { small: 'x100', large: '1000x1000\u003e' }\n  has_attached_file :sample, styles: { thumb: 'x100' }\nend\n```\n\nThen in `RAILS_ROOT/public/system/paperclip_attachments.yml`:\n\n```yml\n---\n:User:\n  :avatar:\n  - :thumb\n  - :croppable\n  - :big\n:Book:\n  :cover:\n  - :small\n  - :large\n  :sample:\n  - :thumb\n```\n\n---\n\nTesting\n-------\n\nPaperclip provides rspec-compatible matchers for testing attachments. See the\ndocumentation on [Paperclip::Shoulda::Matchers](http://www.rubydoc.info/gems/paperclip/Paperclip/Shoulda/Matchers)\nfor more information.\n\n**Parallel Tests**\n\nBecause of the default `path` for Paperclip storage, if you try to run tests in\nparallel, you may find that files get overwritten because the same path is being\ncalculated for them in each test process. While this fix works for\nparallel_tests, a similar concept should be used for any other mechanism for\nrunning tests concurrently.\n\n```ruby\nif ENV['PARALLEL_TEST_GROUPS']\n  Paperclip::Attachment.default_options[:path] = \":rails_root/public/system/:rails_env/#{ENV['TEST_ENV_NUMBER'].to_i}/:class/:attachment/:id_partition/:filename\"\nelse\n  Paperclip::Attachment.default_options[:path] = \":rails_root/public/system/:rails_env/:class/:attachment/:id_partition/:filename\"\nend\n```\n\nThe important part here being the inclusion of `ENV['TEST_ENV_NUMBER']`, or a\nsimilar mechanism for whichever parallel testing library you use.\n\n**Integration Tests**\n\nUsing integration tests with FactoryBot may save multiple copies of\nyour test files within the app. To avoid this, specify a custom path in\nthe `config/environments/test.rb` like so:\n\n```ruby\nPaperclip::Attachment.default_options[:path] = \"#{Rails.root}/spec/test_files/:class/:id_partition/:style.:extension\"\n```\n\nThen, make sure to delete that directory after the test suite runs by adding\nthis to `spec_helper.rb`.\n\n```ruby\nconfig.after(:suite) do\n  FileUtils.rm_rf(Dir[\"#{Rails.root}/spec/test_files/\"])\nend\n```\n\n**Example of test configuration with Factory Bot**\n\n\n```ruby\nFactoryBot.define do\n  factory :user do\n    avatar { File.new(\"#{Rails.root}/spec/support/fixtures/image.jpg\") }\n  end\nend\n```\n---\n\nContributing\n------------\n\nIf you'd like to contribute a feature or bugfix: Thanks! To make sure your\nfix/feature has a high chance of being included, please read the following\nguidelines:\n\n1. Post a [pull request](https://github.com/thoughtbot/paperclip/compare/).\n2. Make sure there are tests! We will not accept any patch that is not tested.\n   It's a rare time when explicit tests aren't needed. If you have questions\n   about writing tests for paperclip, please open a\n   [GitHub issue](https://github.com/thoughtbot/paperclip/issues/new).\n\nPlease see [`CONTRIBUTING.md`](./CONTRIBUTING.md) for more details on contributing and running test.\n\nThank you to all [the contributors](https://github.com/thoughtbot/paperclip/graphs/contributors)!\n\nLicense\n-------\n\nPaperclip is Copyright © 2008-2017 thoughtbot, inc. It is free software, and may be\nredistributed under the terms specified in the MIT-LICENSE file.\n\nAbout thoughtbot\n----------------\n\n![thoughtbot](http://presskit.thoughtbot.com/images/thoughtbot-logo-for-readmes.svg)\n\nPaperclip is maintained and funded by thoughtbot.\nThe names and logos for thoughtbot are trademarks of thoughtbot, inc.\n\nWe love open source software!\nSee [our other projects][community] or\n[hire us][hire] to design, develop, and grow your product.\n\n[community]: https://thoughtbot.com/community?utm_source=github\n[hire]: https://thoughtbot.com?utm_source=github\n"
  }
]